{"funs": {"get_consecutive_horizontal_lines": {"code": "def get_consecutive_horizontal_lines(input_grid: np.ndarray) -> List[int]:\n    consecutive_lines = []\n    for i in range(input_grid.shape[0]):\n        if np.all(input_grid[i, :] == black):\n            consecutive_lines.append(i)\n    return consecutive_lines", "prompt": "get the x of consecutive horizontal lines which are black", "subfunctions": [], "parent": "main"}, "get_consecutive_vertical_lines": {"code": "def get_consecutive_vertical_lines(input_grid: np.ndarray) -> List[int]:\n    consecutive_lines = []\n    for i in range(input_grid.shape[1]):\n        if np.all(input_grid[:, i] == black):\n            consecutive_lines.append(i)\n    return consecutive_lines", "prompt": "get the y of consecutive vertical lines which are black", "subfunctions": [], "parent": "main"}, "get_four_grids": {"code": "def get_four_grids(input_grid: np.ndarray, horizontal_lines: List[int], vertical_lines: List[int]) -> Tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]:\n    top_left = input_grid[:horizontal_lines[0], :vertical_lines[0]]\n    top_right = input_grid[:horizontal_lines[0], vertical_lines[-1] + 1:]\n    bottom_left = input_grid[horizontal_lines[-1] + 1:, :vertical_lines[0]]\n    bottom_right = input_grid[horizontal_lines[-1] + 1:, vertical_lines[-1] + 1:]\n    return (top_left, top_right, bottom_left, bottom_right)", "prompt": "four grids separated by the horizontal and vertical lines", "subfunctions": [], "parent": "main"}, "get_other_colors": {"code": "def get_other_colors(top_left: np.ndarray, top_right: np.ndarray, bottom_left: np.ndarray, bottom_right: np.ndarray) -> Tuple[int, int, int, int]:\n    colors = []\n    for grid in [top_left, top_right, bottom_left, bottom_right]:\n        unique_colors = np.unique(grid)\n        if len(unique_colors) == 1 and unique_colors[0] == black:\n            colors.append(grey)\n        else:\n            colors.append([color for color in unique_colors if color != black][0])\n    return tuple(colors)", "prompt": "get another color in each grid besides black", "subfunctions": [], "parent": "main"}, "get_different_color_grid": {"code": "def get_different_color_grid(colors: Tuple[int, int, int, int], top_left: np.ndarray, top_right: np.ndarray, bottom_left: np.ndarray, bottom_right: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Given four grids and their respective colors, return the grid whose color is different from the others.\n    \n    Args:\n    colors: A tuple of four integers representing the colors of the four grids.\n    top_left: A numpy array representing the top left grid.\n    top_right: A numpy array representing the top right grid.\n    bottom_left: A numpy array representing the bottom left grid.\n    bottom_right: A numpy array representing the bottom right grid.\n    \n    Returns:\n    A numpy array representing the grid whose color is different from the others.\n    \"\"\"\n    different_color = [color for color in colors if colors.count(color) == 1][0]\n    if top_left[0][0] == different_color:\n        return top_left\n    elif top_right[0][0] == different_color:\n        return top_right\n    elif bottom_left[0][0] == different_color:\n        return bottom_left\n    else:\n        return bottom_right", "prompt": "get the grid which color is different from others", "subfunctions": [], "parent": "main"}, "main": {"code": "def main(input_grid: np.ndarray) -> np.ndarray:\n    x = \"get the x of consecutive horizontal lines which are black\"(input_grid)\n    y = \"get the y of consecutive vertical lines which are black\"(input_grid)\n    top_left, top_right, bottom_left, bottom_right = \"four grids separated by the horizontal and vertical lines\"(input_grid, x, y)\n    colors = \"get another color in each grid besides black\"(top_left, top_right, bottom_left, bottom_right)\n    output_grid = \"get the grid which color is different from others\"(colors, top_left, top_right, bottom_left, bottom_right)\n    return output_grid", "prompt": null, "subfunctions": ["get_consecutive_horizontal_lines", "get_consecutive_vertical_lines", "get_four_grids", "get_other_colors", "get_different_color_grid"], "parent": null}}, "entry": "main"}