{"funs": {"find_consecutive_color": {"code": "def find_consecutive_color(input_grid: np.ndarray) -> Tuple[int, int]:\n    \"\"\"\n    This function takes in a n*n grid with multiple color pixels and returns the color that appears consecutively the most and the number of times it appears consecutively.\n    \"\"\"\n    max_consecutive_count = 0\n    max_consecutive_color = None\n    for row in input_grid:\n        consecutive_count = 1\n        for i in range(1, len(row)):\n            if row[i] == row[i - 1]:\n                consecutive_count += 1\n            else:\n                if consecutive_count > max_consecutive_count:\n                    max_consecutive_count = consecutive_count\n                    max_consecutive_color = row[i - 1]\n                consecutive_count = 1\n        if consecutive_count > max_consecutive_count:\n            max_consecutive_count = consecutive_count\n            max_consecutive_color = row[-1]\n    return (max_consecutive_color, max_consecutive_count)", "prompt": "Traverse each row, if a row has a color that appears consecutively, record this color as tcolor and the number of times it appears consecutively tcnt. Find the largest tcnt across all rows, return that tcolor and tcnt", "subfunctions": [], "parent": "main"}, "find_top_left": {"code": "def find_top_left(input_grid: np.ndarray, tcolor: int) -> Tuple[int, int]:\n    \"\"\"\n    This function takes in a n*n grid with multiple color pixels and the color that appears consecutively the most. It returns the coordinates of the top-left pixel of the largest consecutive block of the most frequent color.\n    \"\"\"\n    for i in range(input_grid.shape[0]):\n        for j in range(input_grid.shape[1]):\n            if input_grid[i][j] == tcolor and i + 1 < input_grid.shape[0] and (j + 1 < input_grid.shape[1]) and (input_grid[i + 1][j] == tcolor) and (input_grid[i][j + 1] == tcolor):\n                return (i, j)\n    return (-1, -1)", "prompt": "Traverse all pixels in the input grid, if the pixel is tcolor, and the pixel to the right and below the pixel are both tcolor, return the coordinates of the pixel (lux, luy)", "subfunctions": [], "parent": "main"}, "find_bottom_right": {"code": "def find_bottom_right(input_grid: np.ndarray, tcolor: int, lux: int, luy: int) -> Tuple[int, int]:\n    \"\"\"\n    This function takes in a n*n grid with multiple color pixels, the color that appears consecutively the most, and the coordinates of the top-left pixel of the largest consecutive block of the most frequent color. It returns the coordinates of the bottom-right pixel of the largest consecutive block of the most frequent color.\n    \"\"\"\n    for i in range(lux, input_grid.shape[0]):\n        for j in range(luy, input_grid.shape[1]):\n            if input_grid[i][j] == tcolor and (i + 1 == input_grid.shape[0] or input_grid[i + 1][j] != tcolor) and (j + 1 == input_grid.shape[1] or input_grid[i][j + 1] != tcolor):\n                return (i, j)\n    return (-1, -1)", "prompt": "Traverse all pixels in the input grid, if the pixel is tcolor, and the pixel to the right and upper the pixel are both tcolor, return the coordinates of the pixel (lbx, lby)", "subfunctions": [], "parent": "main"}, "get_subgrid": {"code": "def get_subgrid(input_grid: np.ndarray, lux: int, luy: int, lbx: int, lby: int, tcnt: int) -> np.ndarray:\n    \"\"\"\n    In the input grid, takes (lux+1, luy+1) as the upper left corner, takes the subgrid whose shape is (lby - luy -1, tcnt-2), and returns the grid.\n    \"\"\"\n    return input_grid[lux + 1:lbx, luy + 1:lby]", "prompt": "In the inputgrid, take (lux+1, luy+1) as the upper left corner, take the subgrid whose shape is (lby - luy -1, tcnt-2), and return the grid", "subfunctions": [], "parent": "main"}, "main": {"code": "def main(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    In the input, you should see a n*n grid with multiple color pixels.\n    \"\"\"\n    tcolor, tcnt = \"Traverse each row, if a row has a color that appears consecutively, record this color as tcolor and the number of times it appears consecutively tcnt. Find the largest tcnt across all rows, return that tcolor and tcnt\"(input_grid)\n    lux, luy = \"Traverse all pixels in the input grid, if the pixel is tcolor, and the pixel to the right and below the pixel are both tcolor, return the coordinates of the pixel (lux, luy)\"(input_grid, tcolor)\n    lbx, lby = \"Traverse all pixels in the input grid, if the pixel is tcolor, and the pixel to the right and upper the pixel are both tcolor, return the coordinates of the pixel (lbx, lby)\"(input_grid, tcolor, lux, luy)\n    ans_grid = \"In the inputgrid, take (lux+1, luy+1) as the upper left corner, take the subgrid whose shape is (lby - luy -1, tcnt-2), and return the grid\"(input_grid, lux, luy, lbx, lby, tcnt)\n    return ans_grid", "prompt": "In the input, you should see a n*n grid with multiple color pixels.", "subfunctions": ["find_consecutive_color", "find_top_left", "find_bottom_right", "get_subgrid"], "parent": null}}, "entry": "main"}