{"funs": {"get_centered_grids": {"code": "def get_centered_grids(input_grid: np.ndarray) -> List[np.ndarray]:\n    \"\"\"\n    Returns a list of 3x3 grids centered on gray pixels in the input grid.\n\n    Args:\n    input_grid: A numpy array representing the input grid.\n\n    Returns:\n    A list of numpy arrays, each representing a 3x3 grid centered on a gray pixel.\n    \"\"\"\n    gray_pixels = np.where(input_grid == grey)\n    centered_grids = []\n    for i in range(len(gray_pixels[0])):\n        row, col = (gray_pixels[0][i], gray_pixels[1][i])\n        if row > 0 and row < input_grid.shape[0] - 1 and (col > 0) and (col < input_grid.shape[1] - 1):\n            centered_grids.append(input_grid[row - 1:row + 2, col - 1:col + 2])\n    return centered_grids", "prompt": "Output all 3*3 grids centered on gray pixels", "subfunctions": [], "parent": "main"}, "add_grids_and_make_center_grey": {"code": "def add_grids_and_make_center_grey(grids: List[np.ndarray]) -> np.ndarray:\n    \"\"\"\n    Adds all the grids and makes the center pixel gray.\n\n    Args:\n    grids: A list of numpy arrays, each representing a 3x3 grid.\n\n    Returns:\n    A numpy array representing the output grid.\n    \"\"\"\n    output_grid = np.zeros_like(grids[0])\n    for grid in grids:\n        output_grid += grid\n    output_grid[1, 1] = grey\n    return output_grid", "prompt": "add all the grids and make the center grey", "subfunctions": [], "parent": "main"}, "main": {"code": "def main(input_grid: np.ndarray) -> np.ndarray:\n    grids = \"Output all 3*3 grids centered on gray pixels\"(input_grid)\n    output_grid = \"add all the grids and make the center grey\"(grids)\n    return output_grid", "prompt": null, "subfunctions": ["get_centered_grids", "add_grids_and_make_center_grey"], "parent": null}}, "entry": "main"}