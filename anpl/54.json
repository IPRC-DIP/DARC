{"funs": {"copy_grid": {"code": "def copy_grid(input_grid: np.ndarray) -> np.ndarray:\n    return np.copy(input_grid)", "prompt": "copy grid", "subfunctions": [], "parent": "main"}, "find_black_rectangles": {"code": "def find_black_rectangles(grid: np.ndarray) -> List[Tuple[int, int, int, int]]:\n    black_rectangles = []\n    rows, cols = grid.shape\n    for i in range(rows):\n        for j in range(cols):\n            if grid[i][j] == black:\n                k = i\n                while k < rows and grid[k][j] == black:\n                    k += 1\n                l = j\n                while l < cols and grid[i][l] == black:\n                    l += 1\n                black_rectangles.append((i, j, k - 1, l - 1))\n                grid[i:k, j:l] = teal\n    return black_rectangles", "prompt": "find black rectangles divided by teal lines and save position info list.For each black_rectangles,you should save a tuple of four integers: the row and col of top-left and bottom-right. these rectangles dont cover each other.They are independent", "subfunctions": [], "parent": "main"}, "color_rectangle": {"code": "def color_rectangle(grid: np.ndarray, rectangle: Tuple[int, int, int, int], color: int) -> np.ndarray:\n    i, j, k, l = rectangle\n    grid[i:k + 1, j:l + 1] = color\n    return grid", "prompt": "Color the rectangle in grid to color", "subfunctions": [], "parent": "main"}, "main": {"code": "def main(input_grid: np.ndarray) -> np.ndarray:\n    output = \"copy grid\"(input_grid)\n    BLACK_block_list = \"find black rectangles divided by teal lines and save position info list.For each black_rectangles,you should save a tuple of four integers: the row and col of top-left and bottom-right. these rectangles dont cover each other.They are independent\"(input_grid)\n    output = \"Color the rectangle in grid to color\"(output, BLACK_block_list[1], red)\n    output = \"Color the rectangle in grid to color\"(output, BLACK_block_list[3], yellow)\n    output = \"Color the rectangle in grid to color\"(output, BLACK_block_list[4], pink)\n    output = \"Color the rectangle in grid to color\"(output, BLACK_block_list[5], green)\n    output = \"Color the rectangle in grid to color\"(output, BLACK_block_list[7], blue)\n    return output", "prompt": null, "subfunctions": ["copy_grid", "find_black_rectangles", "color_rectangle"], "parent": null}}, "entry": "main"}