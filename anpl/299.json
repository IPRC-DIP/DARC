{"funs": {"find_color_positions": {"code": "def find_color_positions(input_grid: np.ndarray) -> List[List[Tuple[int, int]]]:\n    \"\"\"\n    Given a 2D numpy array, returns a list of lists where each inner list contains the positions of non-black elements\n    of a specific color in the input array.\n    \n    Args:\n    input_grid: A 2D numpy array of integers representing the color of each element.\n    \n    Returns:\n    A list of lists where each inner list contains the positions of non-black elements of a specific color in the input array.\n    \"\"\"\n    color_lists = [[] for _ in range(10)]\n    for i in range(input_grid.shape[0]):\n        for j in range(input_grid.shape[1]):\n            if input_grid[i][j] != black:\n                color_lists[input_grid[i][j]].append((i, j))\n    return color_lists", "prompt": "find the non black element lists, each color element corrsponding to a list, return the final lists ", "subfunctions": [], "parent": "main"}, "find_longest_list": {"code": "def find_longest_list(input_lists: List[List]) -> List:\n    \"\"\"\n    Given a list of lists, returns the longest list in the input list.\n    \n    Args:\n    input_lists: A list of lists.\n    \n    Returns:\n    The longest list in the input list.\n    \"\"\"\n    return max(input_lists, key=len)", "prompt": "find the longest list in input lists", "subfunctions": [], "parent": "main"}, "find_output_block": {"code": "def find_output_block(input_grid: np.ndarray, longest_list: List[Tuple[int, int]]) -> np.ndarray:\n    \"\"\"\n    Given a 2D numpy array and a list of tuples representing positions, returns a new 2D numpy array containing the\n    block of elements defined by the maximum and minimum positions in the input list.\n    \n    Args:\n    input_grid: A 2D numpy array of integers representing the color of each element.\n    longest_list: A list of tuples representing positions of elements in the input array.\n    \n    Returns:\n    A new 2D numpy array containing the block of elements defined by the maximum and minimum positions in the input list.\n    \"\"\"\n    max_pos = max(longest_list)\n    min_pos = min(longest_list)\n    return input_grid[min_pos[0]:max_pos[0] + 1, min_pos[1]:max_pos[1] + 1]", "prompt": "find the output block of the max and min position in longest list in input_grid", "subfunctions": [], "parent": "main"}, "main": {"code": "def main(input_grid: np.ndarray) -> np.ndarray:\n    ele_lists = \"find the non black element lists, each color element corrsponding to a list, return the final lists \"(input_grid)\n    longest_list = \"find the longest list in input lists\"(ele_lists)\n    output_grid = \"find the output block of the max and min position in longest list in input_grid\"(input_grid, longest_list)\n    return output_grid", "prompt": null, "subfunctions": ["find_color_positions", "find_longest_list", "find_output_block"], "parent": null}}, "entry": "main"}