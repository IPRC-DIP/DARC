{"funs": {"create_array": {"code": "def create_array() -> np.ndarray:\n    return np.zeros((9, 3), dtype=int)", "prompt": "create black 9*3 array", "subfunctions": [], "parent": "main"}, "copy_up_six_rows": {"code": "def copy_up_six_rows(input_grid: np.ndarray, output: np.ndarray) -> np.ndarray:\n    output[:6, :] = input_grid\n    return output", "prompt": "input is 6*3, output is 9*3, copy input to output in top six rows", "subfunctions": [], "parent": "main"}, "symmetrical_left_right": {"code": "def symmetrical_left_right(input_grid: np.ndarray) -> np.ndarray:\n    return np.concatenate((input_grid[:, ::-1], input_grid), axis=1)[:, :3]", "prompt": "Symmetrical left and right for the first three lines of input", "subfunctions": [], "parent": "main"}, "copy_bottom_to_output_bottom_three_rows": {"code": "def copy_bottom_to_output_bottom_three_rows(bottom: np.ndarray, output: np.ndarray) -> np.ndarray:\n    output[-3:, :] = bottom[:3, :]\n    return output", "prompt": "copy bottom to output bottom three rows", "subfunctions": [], "parent": "main"}, "turn_blue_to_red": {"code": "def turn_blue_to_red(input_grid: np.ndarray) -> np.ndarray:\n    output = np.copy(input_grid)\n    output[output == blue] = red\n    return output", "prompt": "turn blue to red", "subfunctions": [], "parent": "main"}, "main": {"code": "def main(input_grid: np.ndarray) -> np.ndarray:\n    output = \"create black 9*3 array\"()\n    output = \"input is 6*3, output is 9*3, copy input to output in top six rows\"(input_grid, output)\n    bottom = \"Symmetrical left and right for the first three lines of input\"(input_grid)\n    output = \"copy bottom to output bottom three rows\"(bottom, output)\n    output = \"turn blue to red\"(output)\n    return output", "prompt": null, "subfunctions": ["create_array", "copy_up_six_rows", "symmetrical_left_right", "copy_bottom_to_output_bottom_three_rows", "turn_blue_to_red"], "parent": null}}, "entry": "main"}