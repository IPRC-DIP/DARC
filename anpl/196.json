{"funs": {"find_complete_row": {"code": "def find_complete_row(input_grid: np.ndarray) -> Tuple[np.ndarray, int]:\n    \"\"\"\n    Finds the row that is completely filled with colored pixels (not black)\n    Args:\n        input_grid: A numpy array representing the input grid\n    Returns:\n        A tuple containing the numpy array representing the row that is completely filled with colored pixels (not black) and its row id\n    \"\"\"\n    for i in range(input_grid.shape[0]):\n        if np.all(input_grid[i] != black):\n            return (input_grid[i], i)\n    return (None, None)", "prompt": "find_complete_row and its row_id", "subfunctions": [], "parent": "main"}, "get_color_pattern": {"code": "def get_color_pattern(row: np.ndarray) -> List[int]:\n    \"\"\"                                                                                                                                                                   \n    Finds the color pattern of a row that is filled in completely with colored pixels (not black)                                                                         \n    Args:                                                                                                                                                                 \n        row: A numpy array representing the row that is filled in completely with colored pixels (not black)                                                              \n    Returns:                                                                                                                                                              \n        A list of integers representing the color pattern of the row                                                                                                      \n    \"\"\"\n    pattern = []\n    color1 = None\n    color2 = None\n    current_color = None\n    for pixel in row:\n        if color1 == None:\n            color1 = pixel\n            pattern.append('0')\n        elif color2 == None and pixel != color1:\n            color2 = pixel\n            pattern.append('1')\n        elif pixel == color1:\n            pattern.append('0')\n        elif pixel == color2:\n            pattern.append('1')\n    return pattern", "prompt": "Finds the color pattern of a row that is filled in completely with colored pixels (not black)                                                                         \nArgs:                                                                                                                                                                 \n    row: A numpy array representing the row that is filled in completely with colored pixels (not black)                                                              \nReturns:                                                                                                                                                              \n    A list of integers representing the color pattern of the row                                                                                                      ", "subfunctions": [], "parent": "main"}, "the_row_is_incomplete": {"code": "def the_row_is_incomplete(row: np.ndarray) -> bool:\n    \"\"\"\n    Checks if a row is incomplete, i.e., contains at least one black pixel\n    Args:\n        row: A numpy array representing the row to be checked\n    Returns:\n        A boolean value indicating whether the row is incomplete or not\n    \"\"\"\n    return np.any(row == black)", "prompt": "the_row_is_incomplete", "subfunctions": [], "parent": "main"}, "fill_row_with_pattern": {"code": "def fill_row_with_pattern(row: np.ndarray, pattern: List[int]) -> np.ndarray:\n    \"\"\"\n    Fills a row with a given color pattern\n    Args:\n        row: A numpy array representing the row to be filled\n        pattern: A list of integers representing the color pattern to be used for filling the row\n    Returns:\n        A numpy array representing the filled row\n    \"\"\"\n    filled_row = np.copy(row)\n    color1 = None\n    color2 = None\n    current_color = None\n    for i in range(len(pattern)):\n        if pattern[i] == '0':\n            if color1 == None:\n                color1 = filled_row[i]\n            filled_row[i] = color1\n        elif pattern[i] == '1':\n            if color2 == None:\n                color2 = filled_row[i]\n            filled_row[i] = color2\n    return filled_row", "prompt": "fill_row_with_pattern", "subfunctions": [], "parent": "main"}, "main": {"code": "def main(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"                                                                                                                                                                   \nIn the input, you should see... some lines filled in with colors                                                                                                          \nThe output grid size... is the same                                                                                                                                       \nTo make the output, For the line that is filled in completely with colored pixels (not black) keep these the same as input.                                               \nthere are two kinds of colors in this line: color1 and color2, you should get the color pattern of this line.                                                             \nFor any line with several color pixels filled in, use this pattern to finish the line across                                                                              \nAll other black squares remain black                                                                                                                                      \n    \"\"\"\n    output_grid = np.copy(input_grid)\n    compelete_row, row_id = \"find_complete_row and its row_id\"(input_grid)\n    pattern = \"Finds the color pattern of a row that is filled in completely with colored pixels (not black)                                                                         \nArgs:                                                                                                                                                                 \n    row: A numpy array representing the row that is filled in completely with colored pixels (not black)                                                              \nReturns:                                                                                                                                                              \n    A list of integers representing the color pattern of the row                                                                                                      \"(compelete_row)\n    for i in range(input_grid.shape[0]):\n        if \"the_row_is_incomplete\"(input_grid[i]) and i != row_id:\n            output_grid[i] = \"fill_row_with_pattern\"(input_grid[i], pattern)\n    return output_grid", "prompt": "In the input, you should see... some lines filled in with colors                                                                                                          \nThe output grid size... is the same                                                                                                                                       \nTo make the output, For the line that is filled in completely with colored pixels (not black) keep these the same as input.                                               \nthere are two kinds of colors in this line: color1 and color2, you should get the color pattern of this line.                                                             \nFor any line with several color pixels filled in, use this pattern to finish the line across                                                                              \nAll other black squares remain black                                                                                                                                      \n    ", "subfunctions": ["find_complete_row", "get_color_pattern", "the_row_is_incomplete", "fill_row_with_pattern"], "parent": null}}, "entry": "main"}