{"funs": {"find_color_with_fewest_occurrences": {"code": "def find_color_with_fewest_occurrences(input_grid: np.ndarray) -> int:\n    unique, counts = np.unique(input_grid, return_counts=True)\n    color_counts = dict(zip(unique, counts))\n    return min(color_counts, key=color_counts.get)", "prompt": "find the color with the fewest occurrences in the grid", "subfunctions": [], "parent": "main"}, "find_top_left_index": {"code": "def find_top_left_index(input_grid: np.ndarray, color: int) -> Tuple[int, int]:\n    for i in range(input_grid.shape[0]):\n        for j in range(input_grid.shape[1]):\n            if input_grid[i][j] == color:\n                return (i, j)\n    return (-1, -1)", "prompt": "find the index of the most top left block that is the corresponding color", "subfunctions": [], "parent": "main"}, "find_bottom_right_index": {"code": "def find_bottom_right_index(input_grid: np.ndarray, color: int) -> Tuple[int, int]:\n    for i in range(input_grid.shape[0] - 1, -1, -1):\n        for j in range(input_grid.shape[1] - 1, -1, -1):\n            if input_grid[i][j] == color:\n                return (i, j)\n    return (-1, -1)", "prompt": "find the index of the most bottom right block that is the corresponding color", "subfunctions": [], "parent": "main"}, "main": {"code": "def main(input_grid: np.ndarray) -> np.ndarray:\n    edge_color = \"find the color with the fewest occurrences in the grid\"(input_grid)\n    xmin, ymin = \"find the index of the most top left block that is the corresponding color\"(input_grid, edge_color)\n    xmax, ymax = \"find the index of the most bottom right block that is the corresponding color\"(input_grid, edge_color)\n    output_grid = input_grid[xmin:xmax + 1, ymin:ymax + 1]\n    return output_grid", "prompt": null, "subfunctions": ["find_color_with_fewest_occurrences", "find_top_left_index", "find_bottom_right_index"], "parent": null}}, "entry": "main"}