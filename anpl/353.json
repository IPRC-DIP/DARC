{"funs": {"find_first_row_pixels": {"code": "def find_first_row_pixels(input_grid: np.ndarray) -> Tuple[List[int], List[int]]:\n    first_row = input_grid[0]\n    columns = []\n    colors = []\n    for i, pixel in enumerate(first_row):\n        if pixel != black:\n            columns.append(i)\n            colors.append(pixel)\n    return (columns, colors)", "prompt": "find all pixels in the first row which are not black, and get their locations and color", "subfunctions": [], "parent": "main"}, "change_gray_pixels": {"code": "def change_gray_pixels(input_grid: np.ndarray, columns: List[int], colors: List[int]) -> np.ndarray:\n    for i in range(1, input_grid.shape[0]):\n        for j in columns:\n            if input_grid[i][j] == grey:\n                input_grid[i][j] = input_grid[0, j]\n    return input_grid", "prompt": null, "subfunctions": [], "parent": "main"}, "has_gray_pixels": {"code": "def has_gray_pixels(output: np.ndarray) -> bool:\n    return np.any(output == grey)", "prompt": "output has gray pixels", "subfunctions": [], "parent": "main"}, "change_gray_to_neighbour_color": {"code": "def change_gray_to_neighbour_color(input_grid: np.ndarray) -> np.ndarray:\n    for i in range(1, input_grid.shape[0]):\n        for j in range(1, input_grid.shape[1]):\n            if input_grid[i][j] == grey and input_grid[i - 1][j] != grey and (input_grid[i - 1][j] != black):\n                input_grid[i][j] = input_grid[i - 1][j]\n            elif input_grid[i][j] == grey and input_grid[i][j - 1] != grey and (input_grid[i][j - 1] != black):\n                input_grid[i][j] = input_grid[i][j - 1]\n            elif input_grid[i][j] == grey and input_grid[i][j + 1] != grey and (input_grid[i][j + 1] != black):\n                input_grid[i][j] = input_grid[i][j + 1]\n    return input_grid", "prompt": null, "subfunctions": [], "parent": "main"}, "main": {"code": "def main(input_grid: np.ndarray) -> np.ndarray:\n    columns, colors = \"find all pixels in the first row which are not black, and get their locations and color\"(input_grid)\n    output = change_gray_pixels(input_grid, columns, colors)\n    while \"output has gray pixels\"(output):\n        output = change_gray_to_neighbour_color(output)\n    return output", "prompt": null, "subfunctions": ["find_first_row_pixels", "change_gray_pixels", "has_gray_pixels", "change_gray_to_neighbour_color"], "parent": null}}, "entry": "main"}