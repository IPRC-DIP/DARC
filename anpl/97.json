{"funs": {"check_surrounding_colors": {"code": "def check_surrounding_colors(input_grid: np.ndarray, i: int, j: int) -> int:\n    current_color = input_grid[i][j]\n    if current_color == black:\n        return current_color\n    else:\n        surrounding_colors = []\n        if i > 0:\n            surrounding_colors.append(input_grid[i - 1][j])\n        if i < input_grid.shape[0] - 1:\n            surrounding_colors.append(input_grid[i + 1][j])\n        if j > 0:\n            surrounding_colors.append(input_grid[i][j - 1])\n        if j < input_grid.shape[1] - 1:\n            surrounding_colors.append(input_grid[i][j + 1])\n        if all((color == current_color for color in surrounding_colors)):\n            return black\n        else:\n            return current_color", "prompt": "if the current color is not black and the colors arround the current color is same as the current color, output black color, else output the current color ", "subfunctions": [], "parent": "new_function"}, "new_function": {"code": "def new_function(input_grid: np.ndarray) -> np.ndarray:\n    output_grid = np.zeros_like(input_grid)\n    for i in range(input_grid.shape[0]):\n        for j in range(input_grid.shape[1]):\n            output_grid[i][j] = \"if the current color is not black and the colors arround the current color is same as the current color, output black color, else output the current color \"(input_grid, i, j)\n    return output_grid", "prompt": null, "subfunctions": ["check_surrounding_colors"], "parent": "main"}, "main": {"code": "def main(input_grid: np.ndarray) -> np.ndarray:\n    output_grid = new_function(input_grid)\n    return output_grid", "prompt": null, "subfunctions": ["new_function"], "parent": null}}, "entry": "main"}