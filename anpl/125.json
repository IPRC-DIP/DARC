{"funs": {"find_black_pixels": {"code": "def find_black_pixels(input_grid: np.ndarray) -> List[Tuple[int, int]]:\n    \"\"\"\n    This function takes in a numpy array representing an image and returns a list of tuples representing the coordinates\n    of all black pixels that have at least 3 non-black neighbors.\n    \n    Args:\n    - input_grid: a numpy array representing an image\n    \n    Returns:\n    - A list of tuples representing the coordinates of all black pixels that have at least 3 non-black neighbors.\n    \"\"\"\n    black_pixels = []\n    for i in range(1, input_grid.shape[0] - 1):\n        for j in range(1, input_grid.shape[1] - 1):\n            if input_grid[i][j] == black:\n                neighbors = [input_grid[i - 1][j], input_grid[i + 1][j], input_grid[i][j - 1], input_grid[i][j + 1]]\n                if neighbors.count(black) == 1:\n                    black_pixels.append((i, j))\n    return black_pixels", "prompt": "find all black inner pixels whose 3 of 4 neighbors is not black", "subfunctions": [], "parent": "main"}, "color_bottom_pixel": {"code": "def color_bottom_pixel(p: List[Tuple[int, int]], input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    This function takes in a numpy array representing an image and a list of tuples representing the coordinates\n    of all black pixels that have at least 3 non-black neighbors. It colors the bottom pixel in the same column with \n    black pixel in yellow.\n    \n    Args:\n    - p: a list of tuples representing the coordinates of all black pixels that have at least 3 non-black neighbors.\n    - input_grid: a numpy array representing an image\n    \n    Returns:\n    - A numpy array representing the image with the bottom pixel in the same column with black pixel in yellow.\n    \"\"\"\n    for i, j in p:\n        input_grid[-1][j] = yellow\n    return input_grid", "prompt": "for all black pixel in p, color the bottom pixel in the same column with black pixel in yellow", "subfunctions": [], "parent": "main"}, "main": {"code": "def main(input_grid: np.ndarray) -> np.ndarray:\n    p = \"find all black inner pixels whose 3 of 4 neighbors is not black\"(input_grid)\n    out = \"for all black pixel in p, color the bottom pixel in the same column with black pixel in yellow\"(p, input_grid)\n    return out", "prompt": null, "subfunctions": ["find_black_pixels", "color_bottom_pixel"], "parent": null}}, "entry": "main"}