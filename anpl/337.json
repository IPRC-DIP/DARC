{"funs": {"get_red_box_locations": {"code": "def get_red_box_locations(input_grid: np.ndarray) -> List[Tuple[Tuple[int, int], Tuple[int, int]]]:\n    \"\"\"\n    This function takes in a numpy array as input_grid and returns a list of tuples, where each tuple contains the \n    location of a red box in the input_grid. The location of a box is its left-top corner and the down-right corner.\n    \n    Args:\n    input_grid: A numpy array of shape (n, m) representing the input grid.\n    \n    Returns:\n    A list of tuples, where each tuple contains the location of a red box in the input_grid.\n    \"\"\"\n    red_boxes = []\n    for i in range(input_grid.shape[0]):\n        for j in range(input_grid.shape[1]):\n            if input_grid[i][j] == red:\n                left_top = (i, j)\n                down_right = (i, j)\n                while down_right[0] < input_grid.shape[0] and input_grid[down_right[0]][down_right[1]] == red:\n                    down_right = (down_right[0] + 1, down_right[1])\n                while down_right[1] < input_grid.shape[1] and input_grid[left_top[0]][down_right[1]] == red:\n                    down_right = (down_right[0], down_right[1] + 1)\n                red_boxes.append((left_top, (down_right[0] - 1, down_right[1] - 1)))\n    return red_boxes", "prompt": "get all locations of all red boxes in the input. A location of a box is its left-top corner and the down-right corner.", "subfunctions": [], "parent": "main"}, "color_holes_green": {"code": "def color_holes_green(locations: List[Tuple[Tuple[int, int], Tuple[int, int]]], input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    This function takes in a list of tuples containing the location of red boxes in the input_grid and the input_grid itself.\n    It then locates the holes in each red box and colors them green in the input_grid. The function returns the updated input_grid.\n    \n    Args:\n    locations: A list of tuples, where each tuple contains the location of a red box in the input_grid.\n    input_grid: A numpy array of shape (n, m) representing the input grid.\n    \n    Returns:\n    A numpy array of shape (n, m) representing the updated input grid with green holes in each red box.\n    \"\"\"\n    for location in locations:\n        left_top = location[0]\n        down_right = location[1]\n        for i in range(left_top[0] + 1, down_right[0]):\n            for j in range(left_top[1] + 1, down_right[1]):\n                input_grid[i][j] = green\n    return input_grid", "prompt": "for each location, you can use it to locate the hole in the box, color the hole green", "subfunctions": [], "parent": "main"}, "color_red_black": {"code": "def color_red_black(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    This function takes in a numpy array as input_grid and colors all the red grids black.\n    \n    Args:\n    input_grid: A numpy array of shape (n, m) representing the input grid.\n    \n    Returns:\n    A numpy array of shape (n, m) representing the updated input grid with black colored red grids.\n    \"\"\"\n    for i in range(input_grid.shape[0]):\n        for j in range(input_grid.shape[1]):\n            if input_grid[i][j] == red:\n                input_grid[i][j] = black\n    return input_grid", "prompt": "color all red grids black", "subfunctions": [], "parent": "main"}, "main": {"code": "def main(input_grid: np.ndarray) -> np.ndarray:\n    locations = \"get all locations of all red boxes in the input. A location of a box is its left-top corner and the down-right corner.\"(input_grid)\n    output = \"for each location, you can use it to locate the hole in the box, color the hole green\"(locations, input_grid)\n    output = \"color all red grids black\"(output)\n    return output", "prompt": null, "subfunctions": ["get_red_box_locations", "color_holes_green", "color_red_black"], "parent": null}}, "entry": "main"}