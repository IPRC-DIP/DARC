{"funs": {"remove_corner_pixels": {"code": "def remove_corner_pixels(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Find all non-black pixels at the corner. If any neighbor of the pixel is black, turn it to black. Return the grid.\n    \n    Args:\n    input_grid: A numpy array representing the input grid\n    \n    Returns:\n    A numpy array representing the modified grid with corner pixels removed\n    \"\"\"\n    height, width = input_grid.shape\n    for i in range(height):\n        for j in range(width):\n            if i == 0 or i == height - 1:\n                if j == 0 or j == width - 1:\n                    if input_grid[i][j] != black:\n                        if i == 0 and j == 0:\n                            if input_grid[i + 1][j] == black or input_grid[i][j + 1] == black:\n                                input_grid[i][j] = black\n                        elif i == 0 and j == width - 1:\n                            if input_grid[i + 1][j] == black or input_grid[i][j - 1] == black:\n                                input_grid[i][j] = black\n                        elif i == height - 1 and j == 0:\n                            if input_grid[i - 1][j] == black or input_grid[i][j + 1] == black:\n                                input_grid[i][j] = black\n                        elif i == height - 1 and j == width - 1:\n                            if input_grid[i - 1][j] == black or input_grid[i][j - 1] == black:\n                                input_grid[i][j] = black\n    return input_grid", "prompt": "find all not black pixels at the corner, if any neighbor of the pixel is black, turn it to black. return the grid", "subfunctions": [], "parent": "main"}, "remove_edge_pixels": {"code": "def remove_edge_pixels(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Find all non-black pixels in the edge line. If at least 2 of 4 neighbors of the pixel are black, turn it to black. Return the grid.\n    \n    Args:\n    input_grid: A numpy array representing the input grid\n    \n    Returns:\n    A numpy array representing the modified grid with edge pixels removed\n    \"\"\"\n    height, width = input_grid.shape\n    for i in range(height):\n        for j in range(width):\n            if i == 0 or i == height - 1 or j == 0 or (j == width - 1):\n                if input_grid[i][j] != black:\n                    black_neighbors = 0\n                    if i > 0 and input_grid[i - 1][j] == black:\n                        black_neighbors += 1\n                    if i < height - 1 and input_grid[i + 1][j] == black:\n                        black_neighbors += 1\n                    if j > 0 and input_grid[i][j - 1] == black:\n                        black_neighbors += 1\n                    if j < width - 1 and input_grid[i][j + 1] == black:\n                        black_neighbors += 1\n                    if black_neighbors >= 2:\n                        input_grid[i][j] = black\n    return input_grid", "prompt": "find all not black pixels in the edge line, if at least 2 of 4 neighbors of the pixel is black, turn it to black. return the grid", "subfunctions": [], "parent": "main"}, "remove_inner_pixels": {"code": "def remove_inner_pixels(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Find all non-black pixels not in the edge line or at the corner. If at least 3 of 4 neighbors of the pixel are black, turn it to black. Return the grid.\n    \n    Args:\n    input_grid: A numpy array representing the input grid\n    \n    Returns:\n    A numpy array representing the modified grid with inner pixels removed\n    \"\"\"\n    height, width = input_grid.shape\n    for i in range(1, height - 1):\n        for j in range(1, width - 1):\n            if input_grid[i][j] != black:\n                black_neighbors = 0\n                if input_grid[i - 1][j] == black:\n                    black_neighbors += 1\n                if input_grid[i + 1][j] == black:\n                    black_neighbors += 1\n                if input_grid[i][j - 1] == black:\n                    black_neighbors += 1\n                if input_grid[i][j + 1] == black:\n                    black_neighbors += 1\n                if black_neighbors >= 3:\n                    input_grid[i][j] = black\n    return input_grid", "prompt": "find all not black pixels not in edge line or at the corner, if at least 3 of 4 neighbors of the pixel is black, turn it to black. return the grid", "subfunctions": [], "parent": "main"}, "main": {"code": "def main(input_grid: np.ndarray) -> np.ndarray:\n    out1 = \"find all not black pixels at the corner, if any neighbor of the pixel is black, turn it to black. return the grid\"(input_grid)\n    out2 = \"find all not black pixels in the edge line, if at least 2 of 4 neighbors of the pixel is black, turn it to black. return the grid\"(out1)\n    out = \"find all not black pixels not in edge line or at the corner, if at least 3 of 4 neighbors of the pixel is black, turn it to black. return the grid\"(out2)\n    return out", "prompt": null, "subfunctions": ["remove_corner_pixels", "remove_edge_pixels", "remove_inner_pixels"], "parent": null}}, "entry": "main"}