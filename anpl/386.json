{"funs": {"find_blue_pixels": {"code": "def find_blue_pixels(input_grid: np.ndarray) -> List[Tuple[int, int]]:\n    \"\"\"\n    Given an input grid, returns a list of tuples representing the coordinates of all blue pixels in the grid.\n\n    Args:\n    input_grid: A numpy array representing the input grid.\n\n    Returns:\n    A list of tuples representing the coordinates of all blue pixels in the grid.\n    \"\"\"\n    blue_pixels = []\n    for i in range(input_grid.shape[0]):\n        for j in range(input_grid.shape[1]):\n            if input_grid[i][j] == blue:\n                blue_pixels.append((i, j))\n    return blue_pixels", "prompt": "find all blue pixels", "subfunctions": [], "parent": "main"}, "find_yellow_pixels": {"code": "def find_yellow_pixels(input_grid: np.ndarray) -> List[Tuple[int, int]]:\n    \"\"\"\n    Given an input grid, returns a list of tuples representing the coordinates of all yellow pixels in the grid.\n\n    Args:\n    input_grid: A numpy array representing the input grid.\n\n    Returns:\n    A list of tuples representing the coordinates of all yellow pixels in the grid.\n    \"\"\"\n    yellow_pixels = []\n    for i in range(input_grid.shape[0]):\n        for j in range(input_grid.shape[1]):\n            if input_grid[i][j] == yellow:\n                yellow_pixels.append((i, j))\n    return yellow_pixels", "prompt": "find all yellow pixels", "subfunctions": [], "parent": "main"}, "fill_pixels_around_blue_with_yellow": {"code": "def fill_pixels_around_blue_with_yellow(blueloc: List[Tuple[int, int]], input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Given a list of tuples representing the coordinates of all blue pixels in the input grid and the input grid itself,\n    returns a new grid with all the pixels around the blue pixels filled with yellow.\n\n    Args:\n    blueloc: A list of tuples representing the coordinates of all blue pixels in the input grid.\n    input_grid: A numpy array representing the input grid.\n\n    Returns:\n    A numpy array representing the new grid with all the pixels around the blue pixels filled with yellow.\n    \"\"\"\n    for i, j in blueloc:\n        for x in range(i - 1, i + 2):\n            for y in range(j - 1, j + 2):\n                if 0 <= x < input_grid.shape[0] and 0 <= y < input_grid.shape[1] and (input_grid[x][y] != blue):\n                    input_grid[x][y] = yellow\n    return input_grid", "prompt": "fill the 8 pixels around blueloc with yellow", "subfunctions": [], "parent": "main"}, "fill_pixels_around_yellow_with_blue": {"code": "def fill_pixels_around_yellow_with_blue(yellowloc: List[Tuple[int, int]], input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Given a list of tuples representing the coordinates of all yellow pixels in the input grid and the input grid itself,\n    returns a new grid with all the pixels around the yellow pixels filled with blue.\n\n    Args:\n    yellowloc: A list of tuples representing the coordinates of all yellow pixels in the input grid.\n    input_grid: A numpy array representing the input grid.\n\n    Returns:\n    A numpy array representing the new grid with all the pixels around the yellow pixels filled with blue.\n    \"\"\"\n    for i, j in yellowloc:\n        for x in range(i - 1, i + 2):\n            for y in range(j - 1, j + 2):\n                if 0 <= x < input_grid.shape[0] and 0 <= y < input_grid.shape[1] and (input_grid[x][y] != yellow):\n                    input_grid[x][y] = blue\n    return input_grid", "prompt": "fill the 8 pixels around yellowloc with blue", "subfunctions": [], "parent": "main"}, "fill_blueloc_with_blue": {"code": "def fill_blueloc_with_blue(blueloc: List[Tuple[int, int]], input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Given a list of tuples representing the coordinates of all blue pixels in the input grid and the input grid itself,\n    returns a new grid with all the blue pixels filled with blue.\n\n    Args:\n    blueloc: A list of tuples representing the coordinates of all blue pixels in the input grid.\n    input_grid: A numpy array representing the input grid.\n\n    Returns:\n    A numpy array representing the new grid with all the blue pixels filled with blue.\n    \"\"\"\n    for i, j in blueloc:\n        input_grid[i][j] = blue\n    return input_grid", "prompt": "fill blueloc with blue", "subfunctions": [], "parent": "main"}, "fill_yellowloc_with_yellow": {"code": "def fill_yellowloc_with_yellow(yellowloc: List[Tuple[int, int]], input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Given a list of tuples representing the coordinates of all yellow pixels in the input grid and the input grid itself,\n    returns a new grid with all the yellow pixels filled with yellow.\n\n    Args:\n    yellowloc: A list of tuples representing the coordinates of all yellow pixels in the input grid.\n    input_grid: A numpy array representing the input grid.\n\n    Returns:\n    A numpy array representing the new grid with all the yellow pixels filled with yellow.\n    \"\"\"\n    for i, j in yellowloc:\n        input_grid[i][j] = yellow\n    return input_grid", "prompt": " fill yellowloc with yellow", "subfunctions": [], "parent": "main"}, "find_edges_of_blue_pixels": {"code": "def find_edges_of_blue_pixels(blueloc: List[Tuple[int, int]]) -> Tuple[int, int, int, int]:\n    left = min(blueloc, key=lambda x: x[1])[1]\n    right = max(blueloc, key=lambda x: x[1])[1]\n    up = min(blueloc, key=lambda x: x[0])[0]\n    down = max(blueloc, key=lambda x: x[0])[0]\n    return (left, right, up, down)", "prompt": "find the left, right, up, down edge of blueloc, and return the colomn number and row number", "subfunctions": [], "parent": "main"}, "fill_grey_pixels": {"code": "def fill_grey_pixels(left: int, right: int, up: int, down: int, input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Given the left, right, up, and down edges of the blue pixels in the input grid and the input grid itself,\n    returns a new grid with all specified pixels filled with grey.\n\n    Args:\n    left: An integer representing the left edge of the blue pixels in the input grid.\n    right: An integer representing the right edge of the blue pixels in the input grid.\n    up: An integer representing the up edge of the blue pixels in the input grid.\n    down: An integer representing the down edge of the blue pixels in the input grid.\n    input_grid: A numpy array representing the input grid.\n\n    Returns:\n    A numpy array representing the new grid with all specified pixels filled with grey.\n    \"\"\"\n    grey_pixels = [(up + 2, left), (up + 4, left), (down - 2, left), (down - 4, left), (up + 2, right), (up + 4, right), (down - 2, right), (down - 4, right), (up, left + 2), (up, left + 4), (up, right - 2), (up, right - 4), (down, left + 2), (down, left + 4), (down, right - 2), (down, right - 4)]\n    for i, j in grey_pixels:\n        input_grid[i][j] = grey\n    return input_grid", "prompt": "fill the following pixels with grey: (up+2, left), (up+4, left), (down-2, left), (down-4, left),(up+2, right), (up+4, right), (down-2, right), (down-4, right), (up, left+2), (up, left+4), (up, right-2), (up, right-4),(down, left+2), (down, left+4), (down, right-2), (down, right-4)", "subfunctions": [], "parent": "main"}, "main": {"code": "def main(input_grid: np.ndarray) -> np.ndarray:\n    blueloc = \"find all blue pixels\"(input_grid)\n    yellowloc = \"find all yellow pixels\"(input_grid)\n    output_grid = \"fill the 8 pixels around blueloc with yellow\"(blueloc, input_grid)\n    output_grid = \"fill the 8 pixels around yellowloc with blue\"(yellowloc, output_grid)\n    output_grid = \"fill blueloc with blue\"(blueloc, output_grid)\n    output_grid = \" fill yellowloc with yellow\"(yellowloc, output_grid)\n    left, right, up, down = \"find the left, right, up, down edge of blueloc, and return the colomn number and row number\"(blueloc)\n    output_grid = \"fill the following pixels with grey: (up+2, left), (up+4, left), (down-2, left), (down-4, left),(up+2, right), (up+4, right), (down-2, right), (down-4, right), (up, left+2), (up, left+4), (up, right-2), (up, right-4),(down, left+2), (down, left+4), (down, right-2), (down, right-4)\"(left, right, up, down, output_grid)\n    return output_grid", "prompt": null, "subfunctions": ["find_blue_pixels", "find_yellow_pixels", "fill_pixels_around_blue_with_yellow", "fill_pixels_around_yellow_with_blue", "fill_blueloc_with_blue", "fill_yellowloc_with_yellow", "find_edges_of_blue_pixels", "fill_grey_pixels"], "parent": null}}, "entry": "main"}