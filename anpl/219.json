{"funs": {"copy_grid": {"code": "def copy_grid(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns a copy of the input grid.\n\n    Args:\n    input_grid: A numpy array representing the input grid.\n\n    Returns:\n    A numpy array representing a copy of the input grid.\n    \"\"\"\n    return np.copy(input_grid)", "prompt": "copy of input grid", "subfunctions": [], "parent": "set_elements_around_colors"}, "set_elements_around_colors": {"code": "def set_elements_around_colors(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Sets black elements around red element in input grid to blue elments, sets black elements around green element in input grid to pink elements, and sets black elements around teal element in input grid to yellow elements.\n\n    Args:\n    input_grid: A numpy array representing the input grid.\n\n    Returns:\n    A numpy array representing the output grid after setting the elements around the specified colors.\n    \"\"\"\n    output_grid = \"copy of input grid\"(input_grid)\n    for i in range(1, input_grid.shape[0] - 1):\n        for j in range(1, input_grid.shape[1] - 1):\n            if input_grid[i][j] == red:\n                output_grid[i - 1:i + 2, j - 1:j + 2][output_grid[i - 1:i + 2, j - 1:j + 2] == black] = blue\n            elif input_grid[i][j] == green:\n                output_grid[i - 1:i + 2, j - 1:j + 2][output_grid[i - 1:i + 2, j - 1:j + 2] == black] = pink\n            elif input_grid[i][j] == teal:\n                output_grid[i - 1:i + 2, j - 1:j + 2][output_grid[i - 1:i + 2, j - 1:j + 2] == black] = yellow\n    return output_grid", "prompt": "set black elements around red element in input grid to blue elments, set black elements around green element in input grid to pink elements, and set black elements around teal element in input grid to yellow elements", "subfunctions": ["copy_grid"], "parent": "main"}, "main": {"code": "def main(input_grid: np.ndarray) -> np.ndarray:\n    output_grid = \"copy of input grid\"(input_grid)\n    output_grid = \"set black elements around red element in input grid to blue elments, set black elements around green element in input grid to pink elements, and set black elements around teal element in input grid to yellow elements\"(output_grid)\n    return output_grid", "prompt": null, "subfunctions": ["copy_grid", "set_elements_around_colors"], "parent": null}}, "entry": "main"}