{"funs": {"get_height_and_width": {"code": "def get_height_and_width(input_grid: np.ndarray) -> Tuple[int, int]:\n    h, w = input_grid.shape\n    return (h, w)", "prompt": "Get the height and width of the image matrix, denoted as h and w.", "subfunctions": [], "parent": "divide_image"}, "divide_image": {"code": "def divide_image(input_grid: np.ndarray) -> Tuple[np.ndarray, np.ndarray]:\n    h, w = \"Get the height and width of the image matrix, denoted as h and w.\"(input_grid)\n    if h < w:\n        mid = w // 2\n        left_half = input_grid[:, :mid]\n        right_half = input_grid[:, mid:]\n        return (left_half, right_half)\n    else:\n        mid = h // 2\n        upper_half = input_grid[:mid, :]\n        lower_half = input_grid[mid:, :]\n        return (upper_half, lower_half)", "prompt": "If h <w, divide the image matrix into left and right halves, else if h>w, divide the image matrix into up and down halves (both are squares with a size of h*h).", "subfunctions": ["get_height_and_width"], "parent": "main"}, "enlarge_grid": {"code": "def enlarge_grid(grid1: np.ndarray, h: int) -> np.ndarray:\n    return np.repeat(np.repeat(grid1, h, axis=0), h, axis=1)", "prompt": "Enlarging grid1 proportionally by h times.", "subfunctions": [], "parent": "main"}, "find_color_at": {"code": "def find_color_at(large_grid: np.ndarray, ii: int, jj: int) -> int:\n    return large_grid[ii][jj]", "prompt": "\u627e\u51falarge_grid\u4e2d\u4f4d\u4e8e(ii,jj)\u7684\u5143\u7d20\u989c\u8272", "subfunctions": [], "parent": "merge_grids"}, "modify_non_black_pixels": {"code": "def modify_non_black_pixels(temp_grid: np.ndarray, c: int) -> np.ndarray:\n    temp_grid[temp_grid != black] = c\n    return temp_grid", "prompt": "\u5c06temp_grid\u4e2d\u975e\u9ed1\u8272\u50cf\u7d20\u7684\u989c\u8272\u4fee\u6539\u4e3ac", "subfunctions": [], "parent": "merge_grids"}, "replace_subgrid": {"code": "def replace_subgrid(large_grid: np.ndarray, temp_grid: np.ndarray, ii: int, jj: int) -> np.ndarray:\n    large_grid[ii:ii + temp_grid.shape[0], jj:jj + temp_grid.shape[1]] = temp_grid\n    return large_grid", "prompt": "\u7528temp_grid\u8986\u76d6large_grid\u4e2d\u4ee5(ii,jj)\u4e3a\u5de6\u4e0a\u89d2\u7684h*h\u533a\u57df\uff08\u9ed1\u8272\u533a\u57df\u540c\u6837\u6267\u884c\u8986\u76d6\uff09", "subfunctions": [], "parent": "merge_grids"}, "merge_grids": {"code": "def merge_grids(large_grid: np.ndarray, h: int, small_grid: np.ndarray) -> np.ndarray:\n    for i in range(h):\n        for j in range(h):\n            ii = i * h\n            jj = j * h\n            print('ii=', ii, ' jj=', jj)\n            c = \"\u627e\u51falarge_grid\u4e2d\u4f4d\u4e8e(ii,jj)\u7684\u5143\u7d20\u989c\u8272\"(large_grid, ii, jj)\n            print('c=', c)\n            temp_grid = small_grid.copy()\n            temp_grid = \"\u5c06temp_grid\u4e2d\u975e\u9ed1\u8272\u50cf\u7d20\u7684\u989c\u8272\u4fee\u6539\u4e3ac\"(temp_grid, c)\n            print('modified temp_grid=\\n', temp_grid)\n            large_grid = \"\u7528temp_grid\u8986\u76d6large_grid\u4e2d\u4ee5(ii,jj)\u4e3a\u5de6\u4e0a\u89d2\u7684h*h\u533a\u57df\uff08\u9ed1\u8272\u533a\u57df\u540c\u6837\u6267\u884c\u8986\u76d6\uff09\"(large_grid, temp_grid, ii, jj)\n            print('modified large_grid=\\n', large_grid)\n    return large_grid", "prompt": null, "subfunctions": ["find_color_at", "modify_non_black_pixels", "replace_subgrid"], "parent": "main"}, "main": {"code": "def main(input_grid: np.ndarray) -> np.ndarray:\n    h, w = \"Get the height and width of the image matrix, denoted as h and w.\"(input_grid)\n    grid1, grid2 = \"If h <w, divide the image matrix into left and right halves, else if h>w, divide the image matrix into up and down halves (both are squares with a size of h*h).\"(input_grid)\n    if h < w:\n        large_grid = \"Enlarging grid1 proportionally by h times.\"(grid1, h)\n        output_grid = merge_grids(large_grid, h, grid2)\n    else:\n        large_grid = \"Enlarging grid1 proportionally by h times.\"(grid1, w)\n        output_grid = merge_grids(large_grid, w, grid2)\n    return output_grid", "prompt": null, "subfunctions": ["get_height_and_width", "divide_image", "enlarge_grid", "merge_grids"], "parent": null}}, "entry": "main"}