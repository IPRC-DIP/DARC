{"funs": {"find_blue_rectangles": {"code": "def find_blue_rectangles(input_grid: np.ndarray) -> List[Tuple[Tuple[int, int], Tuple[int, int]]]:\n    \"\"\"                                                                                                                                          \n    Given an input grid, this function finds all the blue rectangles (may include red pixels) in the input_grid.                                 \n                                                                                                                                                 \n    Args:                                                                                                                                        \n    input_grid: A numpy array representing the input grid.                                                                                       \n                                                                                                                                                 \n    Returns:                                                                                                                                     \n    A list of tuples, where each tuple represents the top-left and bottom-right coordinates of a blue rectangle.                                 \n    \"\"\"\n    flags = np.zeros_like(input_grid)\n    blue_rects = []\n    for i in range(input_grid.shape[0]):\n        for j in range(input_grid.shape[1]):\n            if input_grid[i][j] == blue and (not flags[i, j]):\n                top_left = (i, j)\n                bottom_right = (i, j)\n                while bottom_right[1] < input_grid.shape[1] - 1 and input_grid[i][bottom_right[1] + 1] in [blue, red]:\n                    bottom_right = (i, bottom_right[1] + 1)\n                while bottom_right[0] < input_grid.shape[0] - 1 and input_grid[bottom_right[0] + 1][j] in [blue, red]:\n                    bottom_right = (bottom_right[0] + 1, bottom_right[1])\n                blue_rects.append((top_left, bottom_right))\n                flags[top_left[0]:bottom_right[0] + 1, top_left[1]:bottom_right[1] + 1] = 1\n    return blue_rects", "prompt": "Given an input grid, this function finds all the blue rectangles (may include red pixels) in the input_grid.                                 \n                                                                                                                                             \nArgs:                                                                                                                                        \ninput_grid: A numpy array representing the input grid.                                                                                       \n                                                                                                                                             \nReturns:                                                                                                                                     \nA list of tuples, where each tuple represents the top-left and bottom-right coordinates of a blue rectangle.                                 ", "subfunctions": [], "parent": "main"}, "find_blue_rect_with_most_red_pixels": {"code": "def find_blue_rect_with_most_red_pixels(blue_red_rects: List[Tuple[Tuple[int, int], Tuple[int, int]]], input_grid: np.ndarray) -> Tuple[Tuple[int, int], Tuple[int, int]]:\n    \"\"\"\n    Given a list of blue rectangles (may include red pixels) and an input grid, this function finds the blue rectangle with the most red pixels.\n\n    Args:\n    - blue_red_rects (List[Tuple[Tuple[int, int], Tuple[int, int]]]): A list of tuples, where each tuple represents the top-left and bottom-right coordinates of a blue rectangle in the input grid.\n    - input_grid (np.ndarray): A 2D numpy array representing the input grid.\n\n    Returns:\n    - Tuple[Tuple[int, int], Tuple[int, int]]: A tuple representing the top-left and bottom-right coordinates of the blue rectangle with the most red pixels in the input grid.\n    \"\"\"\n    max_red_pixels = 0\n    max_red_rect = None\n    for rect in blue_red_rects:\n        top_left = rect[0]\n        bottom_right = rect[1]\n        red_pixels = 0\n        for i in range(top_left[0], bottom_right[0] + 1):\n            for j in range(top_left[1], bottom_right[1] + 1):\n                if input_grid[i][j] == red:\n                    red_pixels += 1\n        if red_pixels > max_red_pixels:\n            max_red_pixels = red_pixels\n            max_red_rect = rect\n    return max_red_rect", "prompt": "return the blue rect which has the most red pixels", "subfunctions": [], "parent": "main"}, "get_max_red_rect": {"code": "def get_max_red_rect(blue_red_rects, input_grid):\n    return input_grid[blue_red_rects[0][0]:blue_red_rects[1][0] + 1, blue_red_rects[0][1]:blue_red_rects[1][1] + 1]", "prompt": null, "subfunctions": [], "parent": "main"}, "main": {"code": "def main(input_grid: np.ndarray) -> np.ndarray:\n    blue_red_rects = \"Given an input grid, this function finds all the blue rectangles (may include red pixels) in the input_grid.                                 \n                                                                                                                                             \nArgs:                                                                                                                                        \ninput_grid: A numpy array representing the input grid.                                                                                       \n                                                                                                                                             \nReturns:                                                                                                                                     \nA list of tuples, where each tuple represents the top-left and bottom-right coordinates of a blue rectangle.                                 \"(input_grid)\n    max_red_rect = \"return the blue rect which has the most red pixels\"(blue_red_rects, input_grid)\n    output_grid = get_max_red_rect(max_red_rect, input_grid)\n    return output_grid", "prompt": null, "subfunctions": ["find_blue_rectangles", "find_blue_rect_with_most_red_pixels", "get_max_red_rect"], "parent": null}}, "entry": "main"}