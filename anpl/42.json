{"funs": {"copy_array": {"code": "def copy_array(input_grid: np.ndarray) -> np.ndarray:\n    return np.copy(input_grid)", "prompt": "copy array", "subfunctions": [], "parent": "main"}, "is_grey_corner": {"code": "def is_grey_corner(input_grid: np.ndarray, i: int, j: int) -> bool:\n    return input_grid[0][j] == grey and input_grid[i][input_grid.shape[1] - 1] == grey", "prompt": "the toppest one of this column and the most right one of this row both are grey", "subfunctions": [], "parent": "main"}, "change_black_to_red": {"code": "def change_black_to_red(output: np.ndarray, i: int, j: int) -> None:\n    output[i][j] = red", "prompt": "change this black block to red", "subfunctions": [], "parent": "main"}, "main": {"code": "def main(input_grid: np.ndarray) -> np.ndarray:\n    output = \"copy array\"(input_grid)\n    for i in range(input_grid.shape[0]):\n        for j in range(input_grid.shape[1]):\n            if \"the toppest one of this column and the most right one of this row both are grey\"(input_grid, i, j):\n                \"change this black block to red\"(output, i, j)\n    return output", "prompt": null, "subfunctions": ["copy_array", "is_grey_corner", "change_black_to_red"], "parent": null}}, "entry": "main"}