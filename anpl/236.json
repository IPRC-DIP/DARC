{"funs": {"create_black_grid": {"code": "def create_black_grid(input_grid: np.ndarray) -> np.ndarray:\n    return np.zeros_like(input_grid)", "prompt": "same size as input and element all black", "subfunctions": [], "parent": "main"}, "find_non_black_element": {"code": "def find_non_black_element(line: np.ndarray) -> Tuple[Optional[int], Optional[int]]:\n    for i, color in enumerate(line):\n        if color != black:\n            return (i, color)\n    return (None, None)", "prompt": "find the element in input where is not black, output is position and corresponding element color and if there is no non black element, return None", "subfunctions": [], "parent": "main"}, "replace_element_behind_non_black": {"code": "def replace_element_behind_non_black(line: np.ndarray, pos: int, color: int) -> np.ndarray:\n    output_line = np.zeros_like(line)\n    output_line[:pos] = black\n    output_line[pos:] = color\n    return output_line", "prompt": "output is the same size as input line, but index less than input pos is black and index more than or equal to input pos is color", "subfunctions": [], "parent": "main"}, "replace_black_with_last_color": {"code": "def replace_black_with_last_color(line: np.ndarray, last_color: int) -> np.ndarray:\n    output_line = np.zeros_like(line)\n    output_line[:-1] = line[:-1]\n    output_line[-1] = last_color\n    return output_line", "prompt": "output is the same size as input line, but the last element is input last_color and the other place is same as input line", "subfunctions": [], "parent": "main"}, "replace_line_in_grid": {"code": "def replace_line_in_grid(grid: np.ndarray, line: np.ndarray, index: int) -> np.ndarray:\n    grid[index] = line\n    return grid", "prompt": "change the line in output_grid to output_line in index", "subfunctions": [], "parent": "main"}, "main": {"code": "def main(input_grid: np.ndarray) -> np.ndarray:\n    output_grid = \"same size as input and element all black\"(input_grid)\n    last_color = black\n    for index, line in enumerate(input_grid):\n        pos, color = \"find the element in input where is not black, output is position and corresponding element color and if there is no non black element, return None\"(line)\n        if pos != None:\n            output_line = \"output is the same size as input line, but index less than input pos is black and index more than or equal to input pos is color\"(line, pos, color)\n            last_color = color\n        else:\n            output_line = \"output is the same size as input line, but the last element is input last_color and the other place is same as input line\"(line, last_color)\n        output_grid = \"change the line in output_grid to output_line in index\"(output_grid, output_line, index)\n    return output_grid", "prompt": null, "subfunctions": ["create_black_grid", "find_non_black_element", "replace_element_behind_non_black", "replace_black_with_last_color", "replace_line_in_grid"], "parent": null}}, "entry": "main"}