{"funs": {"does_not_meet_other_color": {"code": "def does_not_meet_other_color(row, len, color):\n    return row[len] == color", "prompt": null, "subfunctions": [], "parent": "find_square_side_length"}, "find_square_side_length": {"code": "def find_square_side_length(row):\n    len, color = (0, row[0])\n    while does_not_meet_other_color(row, len, color):\n        len += 1\n    return len", "prompt": null, "subfunctions": ["does_not_meet_other_color"], "parent": "main"}, "get_input_coordinate": {"code": "def get_input_coordinate(i, j, len):\n    return (i * (len + 1), j * (len + 1))", "prompt": null, "subfunctions": [], "parent": "main"}, "flip_grid_left_right": {"code": "def flip_grid_left_right(grid: np.ndarray) -> np.ndarray:\n    return np.fliplr(grid)", "prompt": "flip the grid left and right", "subfunctions": [], "parent": "main"}, "main": {"code": "def main(input_grid: np.ndarray) -> np.ndarray:\n    square_side_length = find_square_side_length(input_grid[0])\n    output_len = input_grid.shape[0] // square_side_length\n    output_grid = np.zeros((output_len, output_len), dtype=int)\n    for i in range(output_len):\n        for j in range(output_len):\n            x, y = get_input_coordinate(i, j, square_side_length)\n            output_grid[i][j] = input_grid[x][y]\n    return \"flip the grid left and right\"(output_grid)", "prompt": null, "subfunctions": ["find_square_side_length", "get_input_coordinate", "flip_grid_left_right"], "parent": null}}, "entry": "main"}