{"funs": {"create_image_matrix": {"code": "def create_image_matrix() -> np.ndarray:\n    return np.zeros((6, 3))", "prompt": "Create a 6x3 image matrix", "subfunctions": [], "parent": "main"}, "assign_input_to_top_half": {"code": "def assign_input_to_top_half(output_grid: np.ndarray, input_grid: np.ndarray) -> np.ndarray:\n    output_grid[:3, :] = input_grid\n    return output_grid", "prompt": "Assign input_grid to the top half of output_grid", "subfunctions": [], "parent": "main"}, "flip_input_grid": {"code": "def flip_input_grid(input_grid: np.ndarray) -> np.ndarray:\n    return np.flipud(input_grid)", "prompt": "Flip input_grid upside down", "subfunctions": [], "parent": "main"}, "assign_input_to_bottom_half": {"code": "def assign_input_to_bottom_half(output_grid: np.ndarray, input_grid: np.ndarray) -> np.ndarray:\n    output_grid[3:, :] = input_grid\n    return output_grid", "prompt": "Assign input_grid to the bottom half of output_grid", "subfunctions": [], "parent": "main"}, "main": {"code": "def main(input_grid: np.ndarray) -> np.ndarray:\n    output_grid = \"Create a 6x3 image matrix\"()\n    output_grid = \"Assign input_grid to the top half of output_grid\"(output_grid, input_grid)\n    input_grid = \"Flip input_grid upside down\"(input_grid)\n    output_grid = \"Assign input_grid to the bottom half of output_grid\"(output_grid, input_grid)\n    return output_grid", "prompt": null, "subfunctions": ["create_image_matrix", "assign_input_to_top_half", "flip_input_grid", "assign_input_to_bottom_half"], "parent": null}}, "entry": "main"}