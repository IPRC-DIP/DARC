{"funs": {"get_middle_row_color": {"code": "def get_middle_row_color(input_grid: np.ndarray) -> int:\n    return input_grid[input_grid.shape[0] // 2][0]", "prompt": "get the color of the row in the middle", "subfunctions": [], "parent": "main"}, "replace_not_black_with_color": {"code": "def replace_not_black_with_color(input_grid: np.ndarray, c: int) -> np.ndarray:\n    \"\"\"\n    Given an input grid and a color c, this function replaces all the non-black cells in the grid with the color c.\n    It returns the modified grid.\n    \"\"\"\n    not_black = input_grid != black\n    input_grid[not_black] = c\n    return input_grid", "prompt": "turn not black pattern in input_grid into the color c, return the grid", "subfunctions": [], "parent": "main"}, "delete_middle_row_and_column": {"code": "def delete_middle_row_and_column(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Given an input grid, this function deletes the middle row and middle column of the grid.\n    It returns the modified grid.\n    \"\"\"\n    middle_row = input_grid.shape[0] // 2\n    middle_col = input_grid.shape[1] // 2\n    output_grid = np.delete(input_grid, middle_row, axis=0)\n    output_grid = np.delete(output_grid, middle_col, axis=1)\n    return output_grid", "prompt": "delete the row in the middle and column in the middle", "subfunctions": [], "parent": "main"}, "mirror_image": {"code": "def mirror_image(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Given an input grid, this function draws a mirror image of the upper half grid on the middle row axis in the lower half grid,\n    and draws a mirror image of the left half grid on the middle column axis in the right half grid.\n    It returns the modified grid.\n    \"\"\"\n    middle_row = input_grid.shape[0] // 2\n    middle_col = input_grid.shape[1] // 2\n    upper_half = input_grid[:middle_row, :]\n    lower_half = input_grid[middle_row:, :]\n    lower_half[:middle_row, :] = np.flip(upper_half, axis=0)\n    left_half = input_grid[:, :middle_col]\n    right_half = input_grid[:, middle_col:]\n    right_half[:, :middle_col] = np.flip(left_half, axis=1)\n    return input_grid", "prompt": "Draw a mirror image of the upper half grid on the middle row axis in the lower half grid, donot change the shape, Draw a mirror image of the left half grid on the middle column axis in the right half grid", "subfunctions": [], "parent": "main"}, "main": {"code": "def main(input_grid: np.ndarray) -> np.ndarray:\n    c = \"get the color of the row in the middle\"(input_grid)\n    t = \"turn not black pattern in input_grid into the color c, return the grid\"(input_grid, c)\n    d = \"delete the row in the middle and column in the middle\"(t)\n    out = \"Draw a mirror image of the upper half grid on the middle row axis in the lower half grid, donot change the shape, Draw a mirror image of the left half grid on the middle column axis in the right half grid\"(d)\n    return out", "prompt": null, "subfunctions": ["get_middle_row_color", "replace_not_black_with_color", "delete_middle_row_and_column", "mirror_image"], "parent": null}}, "entry": "main"}