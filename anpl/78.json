{"funs": {"get_highest_color": {"code": "def get_highest_color(input_grid: np.ndarray) -> int:\n    \"\"\"\n    Given an input grid, returns the color with the highest number of pixels except for black.\n\n    Args:\n    input_grid: A numpy array representing the input grid.\n\n    Returns:\n    An integer representing the color with the highest number of pixels except for black.\n    \"\"\"\n    color_counts = np.bincount(input_grid.flatten())\n    color_counts[black] = 0\n    return np.argmax(color_counts)", "prompt": "Returns the color with the highest number of pixels except for black", "subfunctions": [], "parent": "main"}, "find_3x3_matrix_with_color_in_each_row_and_column": {"code": "def find_3x3_matrix_with_color_in_each_row_and_column(input_grid: np.ndarray, c: int) -> np.ndarray:\n    \"\"\"\n    Given an input grid and a color c, returns a 3x3 matrix from the input, with at least one pixel color of c in each row and at least one pixel color of c in each column.\n\n    Args:\n    input_grid: A numpy array representing the input grid.\n    c: An integer representing the color.\n\n    Returns:\n    A numpy array representing the 3x3 matrix with at least one pixel color of c in each row and at least one pixel color of c in each column.\n    \"\"\"\n    for i in range(input_grid.shape[0] - 2):\n        for j in range(input_grid.shape[1] - 2):\n            if c in input_grid[i:i + 3, j:j + 3]:\n                row_sum = np.sum(input_grid[i:i + 3, j:j + 3] == c, axis=1)\n                col_sum = np.sum(input_grid[i:i + 3, j:j + 3] == c, axis=0)\n                if np.all(row_sum) and np.all(col_sum):\n                    return input_grid[i:i + 3, j:j + 3]\n    return np.zeros((3, 3))", "prompt": "Find and return a 3x3 matrix from the input, with at least one pixel color of c in each row and at least one pixel color of c in each column", "subfunctions": [], "parent": "main"}, "main": {"code": "def main(input_grid: np.ndarray) -> np.ndarray:\n    c = \"Returns the color with the highest number of pixels except for black\"(input_grid)\n    out = \"Find and return a 3x3 matrix from the input, with at least one pixel color of c in each row and at least one pixel color of c in each column\"(input_grid, c)\n    return out", "prompt": null, "subfunctions": ["get_highest_color", "find_3x3_matrix_with_color_in_each_row_and_column"], "parent": null}}, "entry": "main"}