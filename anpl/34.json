{"funs": {"get_first_column": {"code": "def get_first_column(grid: np.ndarray) -> np.ndarray:\n    return grid[:, 0]", "prompt": "get the first column of the grid", "subfunctions": [], "parent": "main"}, "find_non_black_cells": {"code": "def find_non_black_cells(arr: np.ndarray) -> List[Tuple[int, int]]:\n    return [(arr[i], i) for i in range(len(arr)) if arr[i] != black]", "prompt": "find the list of tuple that contain non-blacack color and its index in the numpy 1D array", "subfunctions": [], "parent": "main"}, "fill_leftmost_teal_block": {"code": "def fill_leftmost_teal_block(grid: np.ndarray, row: int, color: int) -> np.ndarray:\n    for i in range(len(grid[row])):\n        if grid[row][i] == teal:\n            grid[row][i] = color\n            break\n    return grid", "prompt": "fill the leftmost teal block in the corresponding row with the corresponding color in the grid", "subfunctions": [], "parent": "main"}, "rotate_grid_90_clockwise": {"code": "def rotate_grid_90_clockwise(grid: np.ndarray) -> np.ndarray:\n    return np.rot90(grid, k=-1)", "prompt": "rotate the grid 90 degrees cllockwise", "subfunctions": [], "parent": "main"}, "main": {"code": "def main(input_grid: np.ndarray) -> np.ndarray:\n    output_grid = np.copy(input_grid)\n    for i in range(4):\n        first_col = \"get the first column of the grid\"(output_grid)\n        list = \"find the list of tuple that contain non-blacack color and its index in the numpy 1D array\"(first_col)\n        for color, row in list:\n            output_grid = \"fill the leftmost teal block in the corresponding row with the corresponding color in the grid\"(output_grid, row, color)\n        output_grid = \"rotate the grid 90 degrees cllockwise\"(output_grid)\n    return output_grid", "prompt": null, "subfunctions": ["get_first_column", "find_non_black_cells", "fill_leftmost_teal_block", "rotate_grid_90_clockwise"], "parent": null}}, "entry": "main"}