{"funs": {"find_grey_pixels": {"code": "def find_grey_pixels(input_grid: np.ndarray) -> List[Tuple[int, int]]:\n    \"\"\"\n    Given an input grid, returns a list of tuples containing the indices of all the grey pixels in the grid.\n    \n    Args:\n    input_grid: A numpy array representing the input grid.\n    \n    Returns:\n    A list of tuples containing the indices of all the grey pixels in the grid.\n    \"\"\"\n    grey_pixels = []\n    for i in range(input_grid.shape[0]):\n        for j in range(input_grid.shape[1]):\n            if input_grid[i][j] == grey:\n                grey_pixels.append((i, j))\n    return grey_pixels", "prompt": "find all the grey pixels", "subfunctions": [], "parent": "main"}, "turn_grey_pixels_blue": {"code": "def turn_grey_pixels_blue(input_grid: np.ndarray, grey_pixels: List[Tuple[int, int]]) -> np.ndarray:\n    \"\"\"\n    Given an input grid and a list of tuples containing the indices of all the grey pixels in the grid,\n    turns each grey pixel and its 8 neighbors in the 3x3 area into blue.\n    \n    Args:\n    input_grid: A numpy array representing the input grid.\n    grey_pixels: A list of tuples containing the indices of all the grey pixels in the grid.\n    \n    Returns:\n    A numpy array representing the updated grid.\n    \"\"\"\n    for i, j in grey_pixels:\n        for x in range(max(0, i - 1), min(input_grid.shape[0], i + 2)):\n            for y in range(max(0, j - 1), min(input_grid.shape[1], j + 2)):\n                input_grid[x][y] = blue\n    return input_grid", "prompt": "for all grey pixels, turn it and its 8 neighbors in the 3x3 area in blue.", "subfunctions": [], "parent": "main"}, "main": {"code": "def main(input_grid: np.ndarray) -> np.ndarray:\n    p = \"find all the grey pixels\"(input_grid)\n    out = \"for all grey pixels, turn it and its 8 neighbors in the 3x3 area in blue.\"(input_grid, p)\n    return out", "prompt": null, "subfunctions": ["find_grey_pixels", "turn_grey_pixels_blue"], "parent": null}}, "entry": "main"}