{"funs": {"record_colors": {"code": "def record_colors(input_grid: np.ndarray) -> Dict[int, int]:\n    \"\"\"\n    Given an input grid, this function records the colors of all non-black patterns on the grid and the number of pixels\n    in the color.\n\n    Args:\n    input_grid: A numpy array representing the input grid.\n\n    Returns:\n    A dictionary where the keys are the colors of non-black patterns and the values are the number of pixels in the color.\n    \"\"\"\n    color_counts = {}\n    for row in input_grid:\n        for pixel in row:\n            if pixel != black:\n                if pixel in color_counts:\n                    color_counts[pixel] += 1\n                else:\n                    color_counts[pixel] = 1\n    return color_counts", "prompt": "record the colors of all non black patterns on the grid and the number of pixels in the color.", "subfunctions": [], "parent": "main"}, "find_max_color": {"code": "def find_max_color(color_counts: Dict[int, int]) -> int:\n    \"\"\"\n    Given a dictionary of color counts, this function returns the color with the maximum number of pixels.\n\n    Args:\n    color_counts: A dictionary where the keys are the colors of non-black patterns and the values are the number of pixels in the color.\n\n    Returns:\n    The color with the maximum number of pixels.\n    \"\"\"\n    max_color = None\n    max_count = 0\n    for color, count in color_counts.items():\n        if count > max_count:\n            max_color = color\n            max_count = count\n    return max_color", "prompt": "Find one colors with the maximum number of pixels.", "subfunctions": [], "parent": "main"}, "turn_other_colors_to_grey": {"code": "def turn_other_colors_to_grey(color: int, input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Given an input grid and a color, this function turns all pixels in colors other than the given color to grey.\n\n    Args:\n    color: An integer representing the color to keep.\n    input_grid: A numpy array representing the input grid.\n\n    Returns:\n    A numpy array representing the output grid with all pixels in colors other than the given color turned to grey.\n    \"\"\"\n    output_grid = np.copy(input_grid)\n    for i in range(output_grid.shape[0]):\n        for j in range(output_grid.shape[1]):\n            if output_grid[i][j] != color and output_grid[i][j] != black:\n                output_grid[i][j] = grey\n    return output_grid", "prompt": "Turn pixels in other color to grey", "subfunctions": [], "parent": "main"}, "main": {"code": "def main(input_grid: np.ndarray) -> np.ndarray:\n    Record = \"record the colors of all non black patterns on the grid and the number of pixels in the color.\"(input_grid)\n    p = \"Find one colors with the maximum number of pixels.\"(Record)\n    out = \"Turn pixels in other color to grey\"(p, input_grid)\n    return out", "prompt": null, "subfunctions": ["record_colors", "find_max_color", "turn_other_colors_to_grey"], "parent": null}}, "entry": "main"}