{"funs": {"get_non_black_colors": {"code": "def get_non_black_colors(grid: np.ndarray) -> List[int]:\n    colors = set()\n    for row in grid:\n        for cell in row:\n            if cell != black:\n                colors.add(cell)\n    return list(colors)", "prompt": " Generate a list to record all colors except black ", "subfunctions": [], "parent": "main"}, "generate_rectangles": {"code": "def generate_rectangles(grid: np.ndarray, color: int) -> np.ndarray:\n    points = []\n    for i in range(grid.shape[0]):\n        for j in range(grid.shape[1]):\n            if grid[i][j] == color:\n                points.append((i, j))\n                if len(points) == 2:\n                    break\n        if len(points) == 2:\n            break\n    x1, y1 = points[0]\n    x2, y2 = points[1]\n    x_min = min(x1, x2)\n    x_max = max(x1, x2)\n    y_min = min(y1, y2)\n    y_max = max(y1, y2)\n    for i in range(x_min, x_max + 1):\n        for j in range(y_min, y_max + 1):\n            grid[i][j] = color\n    return grid", "prompt": " For two points of each input color, with these two points as diagonals, generate a rectangle of that color ", "subfunctions": [], "parent": "main"}, "main": {"code": "def main(input_grid: np.ndarray) -> np.ndarray:\n    output_grid = np.copy(input_grid)\n    listc = \" Generate a list to record all colors except black \"(output_grid)\n    for color in listc:\n        output_grid = \" For two points of each input color, with these two points as diagonals, generate a rectangle of that color \"(output_grid, color)\n    return output_grid", "prompt": null, "subfunctions": ["get_non_black_colors", "generate_rectangles"], "parent": null}}, "entry": "main"}