{"funs": {"find_gray_pixels": {"code": "def find_gray_pixels(input_grid: np.ndarray) -> List[Tuple[int, int, int]]:\n    \"\"\"\n    Iterate over all pixels in the input grid, if a pixel (x, y) is gray, and the pixels below and to the right of it are also gray. \n    Then traverse all the pixels in the same line, if there is a gray pixel (bx,by) and the pixel on the right side of the pixel is black, \n    record cnt=by-y. If cnt is not None, add (x, y, cnt) to the answer list.\n    \"\"\"\n    gray_pixels = []\n    n = input_grid.shape[0]\n    for i in range(n - 1):\n        for j in range(n - 1):\n            if input_grid[i][j] == grey and input_grid[i + 1][j] == grey and (input_grid[i][j + 1] == grey):\n                cnt = None\n                for k in range(j + 1, n):\n                    if input_grid[i][k] == black:\n                        break\n                    if input_grid[i][k] == grey:\n                        if input_grid[i + 1][k] == grey:\n                            cnt = k - j\n                            break\n                if cnt is not None:\n                    gray_pixels.append((i, j, cnt))\n    return gray_pixels", "prompt": "Iterate over all pixels in the input grid, if a pixel (x, y) is gray, and the pixels below and to the right of it are also gray. Then traverse all the pixels in the same line, if there is a gray pixel (bx,by) and the pixel on the right side of the pixel is black, record cnt=by-y. If cnt is not None, add (x, y, cnt) to the answer list. back to list of answers", "subfunctions": [], "parent": "main"}, "color_by_length": {"code": "def color_by_length(length: int) -> int:\n    \"\"\"\n    Given the length of the sub-grid, return the corresponding color.\n    \"\"\"\n    if length == 2:\n        return pink\n    elif length == 3:\n        return orange\n    elif length == 4:\n        return teal\n    else:\n        return maroon", "prompt": "Given the length of the sub-grid, return the corresponding color.", "subfunctions": [], "parent": "color_gray_pixels"}, "color_subgrid": {"code": "def color_subgrid(input_grid: np.ndarray, x: int, y: int, length: int, color: int) -> np.ndarray:\n    \"\"\"\n    Given the input grid, the upper left corner (x, y) and the length of the sub-grid, color the sub-grid with the given color.\n    \"\"\"\n    for i in range(x, x + length - 1):\n        for j in range(y, y + length - 1):\n            input_grid[i][j] = color\n    return input_grid", "prompt": "Given the input grid, the upper left corner (x, y) and the length of the sub-grid, color the sub-grid with the given color.", "subfunctions": [], "parent": "color_gray_pixels"}, "color_gray_pixels": {"code": "def color_gray_pixels(input_grid: np.ndarray, target_list: List[Tuple[int, int, int]]) -> np.ndarray:\n    \"\"\"\n    Traverse the target_list, for each item (x, y, length), take (x+1, y+1) in the inputgrid as the upper left corner, \n    and color the sub-grid whose shape is (length-1, length-1): if length If the length is 2, the sub-grid will be painted in pink; \n    if the length is 3, the sub-grid will be painted in orange; if the length is 4, the sub-grid will be painted in teal.\n    \"\"\"\n    for target in target_list:\n        x, y, length = target\n        color = \"Given the length of the sub-grid, return the corresponding color.\"(length)\n        input_grid = \"Given the input grid, the upper left corner (x, y) and the length of the sub-grid, color the sub-grid with the given color.\"(input_grid, x + 1, y + 1, length, color)\n    return input_grid", "prompt": "Traverse the target_list, for each item (x, y, length), take (x+1, y+1) in the inputgrid as the upper left corner, \nand color the sub-grid whose shape is (length-1, length-1): if length If the length is 2, the sub-grid will be painted in pink; \nif the length is 3, the sub-grid will be painted in orange; if the length is 4, the sub-grid will be painted in teal.", "subfunctions": ["color_by_length", "color_subgrid"], "parent": "main"}, "main": {"code": "def main(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    In the input, you should see a n*n grid with multiple color pixels.\n    \"\"\"\n    target_list = \"Iterate over all pixels in the input grid, if a pixel (x, y) is gray, and the pixels below and to the right of it are also gray. Then traverse all the pixels in the same line, if there is a gray pixel (bx,by) and the pixel on the right side of the pixel is black, record cnt=by-y. If cnt is not None, add (x, y, cnt) to the answer list. back to list of answers\"(input_grid)\n    ans_grid = \"Traverse the target_list, for each item (x, y, length), take (x+1, y+1) in the inputgrid as the upper left corner, \nand color the sub-grid whose shape is (length-1, length-1): if length If the length is 2, the sub-grid will be painted in pink; \nif the length is 3, the sub-grid will be painted in orange; if the length is 4, the sub-grid will be painted in teal.\"(input_grid, target_list)\n    return ans_grid", "prompt": "In the input, you should see a n*n grid with multiple color pixels.", "subfunctions": ["find_gray_pixels", "color_gray_pixels"], "parent": null}}, "entry": "main"}