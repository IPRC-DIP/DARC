{"funs": {"find_blue_pixels": {"code": "def find_blue_pixels(input_grid: np.ndarray) -> List[Tuple[int, int]]:\n    \"\"\"Returns a list of tuples containing the indices of blue pixels in the input grid.\"\"\"\n    blue_pixels = []\n    for i in range(input_grid.shape[0]):\n        for j in range(input_grid.shape[1]):\n            if input_grid[i][j] == blue:\n                blue_pixels.append((i, j))\n    return blue_pixels", "prompt": "find_blue_pixels", "subfunctions": [], "parent": "main"}, "color_pixels_in_same_row_to_teal": {"code": "def color_pixels_in_same_row_to_teal(indices_of_blue_pixels: List[Tuple[int, int]], output_grid: np.ndarray, ibp1: int, ibp2: int) -> np.ndarray:\n    \"\"\"Colors the black pixels to teal between the two blue pixels in the same row.\"\"\"\n    row = indices_of_blue_pixels[ibp1][0]\n    start_col = indices_of_blue_pixels[ibp1][1]\n    end_col = indices_of_blue_pixels[ibp2][1]\n    if start_col > end_col:\n        start_col, end_col = (end_col, start_col)\n    for col in range(start_col + 1, end_col):\n        if output_grid[row][col] == black:\n            output_grid[row][col] = teal\n    return output_grid", "prompt": "Colors the black pixels to teal between the two blue pixels in the same row.", "subfunctions": [], "parent": "main"}, "color_pixels_in_same_col_to_teal": {"code": "def color_pixels_in_same_col_to_teal(indices_of_blue_pixels: List[Tuple[int, int]], output_grid: np.ndarray, ibp1: int, ibp2: int) -> np.ndarray:\n    \"\"\"Colors the black pixels to teal between the two blue pixels in the same column.\"\"\"\n    col = indices_of_blue_pixels[ibp1][1]\n    start_row = indices_of_blue_pixels[ibp1][0]\n    end_row = indices_of_blue_pixels[ibp2][0]\n    if start_row > end_row:\n        start_row, end_row = (end_row, start_row)\n    for row in range(start_row + 1, end_row):\n        if output_grid[row][col] == black:\n            output_grid[row][col] = teal\n    return output_grid", "prompt": "Colors the black pixels to teal between the two blue pixels in the same column.", "subfunctions": [], "parent": "main"}, "main": {"code": "def main(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"                                                                                                                                                                 \n    In the input, you should see blue pixels on the black grid                                                                                                          \n    if two blue pixels are in same row or same col, color the black pixels to teal between the two blue pixels.                                                         \n    \"\"\"\n    output_grid = input_grid.copy()\n    indices_of_blue_pixels = \"find_blue_pixels\"(output_grid)\n    for ibp1 in range(len(indices_of_blue_pixels) - 1):\n        for ibp2 in range(ibp1, len(indices_of_blue_pixels)):\n            if indices_of_blue_pixels[ibp1][0] == indices_of_blue_pixels[ibp2][0]:\n                output_grid = \"Colors the black pixels to teal between the two blue pixels in the same row.\"(indices_of_blue_pixels, output_grid, ibp1, ibp2)\n            if indices_of_blue_pixels[ibp1][1] == indices_of_blue_pixels[ibp2][1]:\n                output_grid = \"Colors the black pixels to teal between the two blue pixels in the same column.\"(indices_of_blue_pixels, output_grid, ibp1, ibp2)\n    return output_grid", "prompt": "In the input, you should see blue pixels on the black grid                                                                                                          \nif two blue pixels are in same row or same col, color the black pixels to teal between the two blue pixels.                                                         ", "subfunctions": ["find_blue_pixels", "color_pixels_in_same_row_to_teal", "color_pixels_in_same_col_to_teal"], "parent": null}}, "entry": "main"}