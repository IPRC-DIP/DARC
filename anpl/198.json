{"funs": {"find_not_black_pixel": {"code": "def find_not_black_pixel(input_grid: np.ndarray) -> Tuple[int, int]:\n    \"\"\"\n    Finds the first non-black pixel in the input grid and returns its coordinates.\n\n    Args:\n    input_grid: A numpy array representing the input grid.\n\n    Returns:\n    A tuple containing the row and column indices of the first non-black pixel.\n    \"\"\"\n    for i in range(input_grid.shape[0]):\n        for j in range(input_grid.shape[1]):\n            if input_grid[i][j] != black:\n                return (i, j)\n    return None", "prompt": "find the not black pixel in the input", "subfunctions": [], "parent": "main"}, "move_down": {"code": "def move_down(p: Tuple[int, int], input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Moves the given pixel down by one row in the input grid.\n\n    Args:\n    p: A tuple containing the row and column indices of the pixel to be moved.\n    input_grid: A numpy array representing the input grid.\n\n    Returns:\n    A numpy array representing the updated grid after moving the pixel down by one row.\n    \"\"\"\n    i, j = p\n    if i == input_grid.shape[0] - 1:\n        return input_grid\n    input_grid[i][j], input_grid[i + 1][j] = (input_grid[i + 1][j], input_grid[i][j])\n    return input_grid", "prompt": "move p downwards a pixel, return the grid", "subfunctions": [], "parent": "main"}, "color_pixels_above_yellow": {"code": "def color_pixels_above_yellow(p: Tuple[int, int], input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Colors the given pixel and the pixels above it in the same column in yellow.\n\n    Args:\n    p: A tuple containing the row and column indices of the pixel to be colored.\n    input_grid: A numpy array representing the input grid.\n\n    Returns:\n    A numpy array representing the updated grid after coloring the pixels in yellow.\n    \"\"\"\n    i, j = p\n    input_grid[i][j] = yellow\n    for k in range(i):\n        input_grid[k][j] = yellow\n    return input_grid", "prompt": "color p and the pixels above p in the same column in yellow, return the grid", "subfunctions": [], "parent": "main"}, "find_yellow_line": {"code": "def find_yellow_line(input_grid: np.ndarray) -> Tuple[int, Tuple[int, int]]:\n    \"\"\"\n    Finds the index and shape of the vertical line in yellow in the input grid.\n\n    Args:\n    input_grid: A numpy array representing the input grid.\n\n    Returns:\n    A tuple containing the index of the yellow line and a tuple representing its shape (start row, end row).\n    \"\"\"\n    yellow_pixels = np.where(input_grid == yellow)\n    if len(yellow_pixels[1]) == 0:\n        return None\n    j = yellow_pixels[1][0]\n    start_row = min(yellow_pixels[0])\n    end_row = max(yellow_pixels[0])\n    return (j, (start_row, end_row))", "prompt": "find the index and shape of the vertical line in yellow in the grid", "subfunctions": [], "parent": "copy_yellow_pattern_along_horizontal"}, "copy_short_yellow_line": {"code": "def copy_short_yellow_line(input_grid: np.ndarray, shape: Tuple[int, int], i: int) -> np.ndarray:\n    \"\"\"\n    Copies a short yellow line with the given shape at the specified column index in the input grid.\n\n    Args:\n    input_grid: A numpy array representing the input grid.\n    shape: A tuple representing the shape of the yellow line (start row, end row).\n    i: An integer representing the column index where the yellow line should be copied.\n\n    Returns:\n    A numpy array representing the updated grid after copying the yellow line.\n    \"\"\"\n    start_row, end_row = shape\n    for row in range(start_row, end_row + 1):\n        input_grid[row][i] = yellow\n    return input_grid", "prompt": "copy a short yellow line with shape in yellow at the column i", "subfunctions": [], "parent": "copy_yellow_pattern_along_horizontal"}, "copy_yellow_pattern_along_horizontal": {"code": "def copy_yellow_pattern_along_horizontal(input_grid: np.ndarray) -> np.ndarray:\n    index, shape = \"find the index and shape of the vertical line in yellow in the grid\"(input_grid)\n    for i in range(input_grid.shape[1]):\n        if i % 2 == index % 2:\n            input_grid = \"copy a short yellow line with shape in yellow at the column i\"(input_grid, shape, i)\n    return input_grid", "prompt": null, "subfunctions": ["find_yellow_line", "copy_short_yellow_line"], "parent": "main"}, "main": {"code": "def main(input_grid: np.ndarray) -> np.ndarray:\n    p = \"find the not black pixel in the input\"(input_grid)\n    move = \"move p downwards a pixel, return the grid\"(p, input_grid)\n    color = \"color p and the pixels above p in the same column in yellow, return the grid\"(p, input_grid)\n    out = copy_yellow_pattern_along_horizontal(input_grid)\n    return out", "prompt": null, "subfunctions": ["find_not_black_pixel", "move_down", "color_pixels_above_yellow", "copy_yellow_pattern_along_horizontal"], "parent": null}}, "entry": "main"}