{"funs": {"initialize_grid": {"code": "def initialize_grid(input_grid: np.ndarray) -> np.ndarray:\n    output_grid = np.copy(input_grid)\n    return output_grid", "prompt": "same size as input", "subfunctions": [], "parent": "main"}, "replace_grey_with_green": {"code": "def replace_grey_with_green(grid: np.ndarray, i: int) -> np.ndarray:\n    \"\"\"\n    This function replaces the grey elements in the i-th column of the grid with green elements if the total number of columns minus i is odd.\n\n    Args:\n    grid: A numpy array representing the input grid.\n    i: An integer representing the column index.\n\n    Returns:\n    A numpy array representing the updated grid.\n    \"\"\"\n    if (grid.shape[1] - i) % 2 == 1:\n        for j in range(grid.shape[0]):\n            if grid[j][i] == grey:\n                grid[j][i] = green\n    return grid", "prompt": "find the total column of output_grid and caculate the total column minus i, if the result is odd, replace grey element in the i-th colmun with green element", "subfunctions": [], "parent": "main"}, "main": {"code": "def main(input_grid: np.ndarray) -> np.ndarray:\n    output_grid = \"same size as input\"(input_grid)\n    for i in range(input_grid.shape[1]):\n        output_grid = \"find the total column of output_grid and caculate the total column minus i, if the result is odd, replace grey element in the i-th colmun with green element\"(output_grid, i)\n    return output_grid", "prompt": null, "subfunctions": ["initialize_grid", "replace_grey_with_green"], "parent": null}}, "entry": "main"}