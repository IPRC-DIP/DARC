{"funs": {"find_color_shape": {"code": "def find_color_shape(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"                                                                                                                                                                 \n    In the input, you should see some colored pixels form a colored shape.                                                                                              \n    there is one color that only has one pixels.                                                                                                                        \n    The output is the same size as the input.                                                                                                                           \n    To make the output, you should find the start row, end row, start col, and end col of the colored shape.                                                            \n    you should find the center of the shape, and make a symmetrical pixel of the single color according to the center.                                                  \n    \"\"\"\n    for i in range(input_grid.shape[0]):\n        if input_grid[i].sum() != 0:\n            start_row = i\n            break\n    for i in range(input_grid.shape[0] - 1, -1, -1):\n        if input_grid[i].sum() != 0:\n            end_row = i\n            break\n    for i in range(input_grid.shape[1]):\n        if input_grid[:, i].sum() != 0:\n            start_col = i\n            break\n    for i in range(input_grid.shape[1] - 1, -1, -1):\n        if input_grid[:, i].sum() != 0:\n            end_col = i\n            break\n    return (start_row, end_row, start_col, end_col)", "prompt": "In the input, you should see some colored pixels form a colored shape.                                                                                              \nthere is one color that only has one pixels.                                                                                                                        \nThe output is the same size as the input.                                                                                                                           \nTo make the output, you should find the start row, end row, start col, and end col of the colored shape.                                                            \nyou should find the center of the shape, and make a symmetrical pixel of the single color according to the center.                                                  ", "subfunctions": [], "parent": "main"}, "get_shape_center": {"code": "def get_shape_center(start_row: int, end_row: int, start_col: int, end_col: int) -> Tuple[int, int]:\n    \"\"\"\n    Given the start row, end row, start col, and end col of a colored shape, \n    this function returns the center of the shape as a tuple of (row, col).\n    \"\"\"\n    row_center = (start_row + end_row) // 2\n    col_center = (start_col + end_col) // 2\n    return (row_center, col_center)", "prompt": "get_shape_center", "subfunctions": [], "parent": "main"}, "find_single_color": {"code": "def find_single_color(input_grid: np.ndarray) -> int:\n    \"\"\"                                                                                                                                                                 \n    Given an input grid, this function returns the color that appears only once in the grid.                                                                            \n    \"\"\"\n    unique, counts = np.unique(input_grid, return_counts=True)\n    color_counts = dict(zip(unique, counts))\n    single_color = None\n    for color, count in color_counts.items():\n        if count == 1:\n            single_color = color\n            break\n    for i in range(input_grid.shape[0]):\n        for j in range(input_grid.shape[1]):\n            if input_grid[i][j] == single_color:\n                return (i, j, single_color)\n    return None", "prompt": "Given an input grid, this function returns the color that appears only once in the grid.                                                                            ", "subfunctions": [], "parent": "main"}, "make_symmetrical_pixel": {"code": "def make_symmetrical_pixel(input_grid: np.ndarray, color: int, center: Tuple[int, int]) -> np.ndarray:\n    \"\"\"                                                                                                                                                                 \n    Given an input grid, a color, and a center point as a tuple of (row, col),                                                                                          \n    this function returns a new grid with a symmetrical pixel of the given color                                                                                        \n    added to the input grid at the center point.                                                                                                                        \n    \"\"\"\n    output_grid = input_grid.copy()\n    center_row, center_col = center\n    single_row, single_col, single_color = color\n    if single_col == center_col:\n        dist = abs(single_row - center_row)\n    elif single_row == center_row:\n        dist = abs(single_col - center_col)\n    output_grid[center_row + dist][center_col] = single_color\n    output_grid[center_row - dist][center_col] = single_color\n    output_grid[center_row][center_col + dist] = single_color\n    output_grid[center_row][center_col - dist] = single_color\n    return output_grid", "prompt": "Given an input grid, a color, and a center point as a tuple of (row, col),                                                                                          \nthis function returns a new grid with a symmetrical pixel of the given color                                                                                        \nadded to the input grid at the center point.                                                                                                                        ", "subfunctions": [], "parent": "main"}, "main": {"code": "def main(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"                                                                                                                                                                 \n    In the input, you should see some colored pixels form a colored shape.\n    there is one color that only has one pixels.\n    The output is the same size as the input.\n    To make the output, you should find the start row, end row, start col, and end col of the colored shape. \n    you should find the center of the shape, and make a symmetrical pixel of the single color according to the center.          \n    \"\"\"\n    output_grid = input_grid.copy()\n    start_row, end_row, start_col, end_col = \"In the input, you should see some colored pixels form a colored shape.                                                                                              \nthere is one color that only has one pixels.                                                                                                                        \nThe output is the same size as the input.                                                                                                                           \nTo make the output, you should find the start row, end row, start col, and end col of the colored shape.                                                            \nyou should find the center of the shape, and make a symmetrical pixel of the single color according to the center.                                                  \"(input_grid)\n    center = \"get_shape_center\"(start_row, end_row, start_col, end_col)\n    single_color = \"Given an input grid, this function returns the color that appears only once in the grid.                                                                            \"(input_grid)\n    output_grid = \"Given an input grid, a color, and a center point as a tuple of (row, col),                                                                                          \nthis function returns a new grid with a symmetrical pixel of the given color                                                                                        \nadded to the input grid at the center point.                                                                                                                        \"(output_grid, single_color, center)\n    return output_grid", "prompt": "In the input, you should see some colored pixels form a colored shape.\nthere is one color that only has one pixels.\nThe output is the same size as the input.\nTo make the output, you should find the start row, end row, start col, and end col of the colored shape. \nyou should find the center of the shape, and make a symmetrical pixel of the single color according to the center.          ", "subfunctions": ["find_color_shape", "get_shape_center", "find_single_color", "make_symmetrical_pixel"], "parent": null}}, "entry": "main"}