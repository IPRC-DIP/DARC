{"funs": {"find_hollow_rectangles": {"code": "def find_hollow_rectangles(input: List[List[int]]) -> List[Tuple[Tuple[int, int], Tuple[int, int]]]:\n    \"\"\"\n    Given a 2D list of integers representing a grid of colors, this function finds all the hollow rectangles in the grid.\n    A hollow rectangle is defined as a rectangle with non-black cells on the border and black cells in the interior.\n    The function returns a list of tuples, where each tuple represents the coordinates of the top-left and bottom-right corners of a hollow rectangle.\n    \"\"\"\n    hollow_rectangles = []\n    rows, cols = (len(input), len(input[0]))\n    for i in range(rows):\n        for j in range(cols):\n            if input[i][j] != black:\n                if (i == 0 or input[i - 1][j] == black) and (j == 0 or input[i][j - 1] == black):\n                    k = j\n                    while k < cols and input[i][k] != black:\n                        k += 1\n                    l = i\n                    while l < rows and input[l][j] != black:\n                        l += 1\n                    hollow_rectangles.append(((i, j), (l - 1, k - 1)))\n    return hollow_rectangles", "prompt": "find all hollow rectangles in the input. you can find a non-black position and trace through two directions to get another corner of this rectangle", "subfunctions": [], "parent": "main"}, "find_max_rectangle": {"code": "def find_max_rectangle(hollow_rectangles: List[Tuple[Tuple[int, int], Tuple[int, int]]]) -> Tuple[Tuple[int, int], Tuple[int, int]]:\n    \"\"\"\n    Given a list of tuples representing the coordinates of the top-left and bottom-right corners of hollow rectangles,\n    this function returns the maximum rectangle among them.\n    \"\"\"\n    max_area = 0\n    max_rectangle = None\n    for rectangle in hollow_rectangles:\n        (x1, y1), (x2, y2) = rectangle\n        area = (x2 - x1 + 1) * (y2 - y1 + 1)\n        if area > max_area:\n            max_area = area\n            max_rectangle = rectangle\n    return max_rectangle", "prompt": "return the max rectangle given the position of all the hollow rectangles", "subfunctions": [], "parent": "main"}, "clip_rectangle": {"code": "def clip_rectangle(input: List[List[int]], rectangle: Tuple[Tuple[int, int], Tuple[int, int]]) -> np.ndarray:\n    \"\"\"\n    Given a 2D list of integers representing a grid of colors and a tuple representing the coordinates of the top-left and bottom-right corners of a rectangle,\n    this function clips the rectangle from the input and returns it as a numpy array.\n    \"\"\"\n    (x1, y1), (x2, y2) = rectangle\n    return np.array(input[x1:x2 + 1, y1:y2 + 1])", "prompt": "clip the rectangle from input to get a new numpy array", "subfunctions": [], "parent": "main"}, "find_middle_color": {"code": "def find_middle_color(input: np.ndarray) -> int:\n    \"\"\"\n    Given a 2D numpy array representing a grid of colors, this function finds the color which is not black inside of input.\n    It eliminates the outermost circle and returns the color of the remaining cells.\n    \"\"\"\n    inner_input = input[1:-1, 1:-1]\n    unique_colors = np.unique(inner_input[inner_input != black])\n    if len(unique_colors) == 1:\n        return unique_colors[0]\n    else:\n        return black", "prompt": "find the color which is not black inside of input, notice that Eliminate the outermost circle", "subfunctions": [], "parent": "main"}, "color_non_black": {"code": "def color_non_black(input: np.ndarray, color: int) -> np.ndarray:\n    \"\"\"\n    Given a 2D numpy array and a color, this function colors all the positions in the input array which is not black with the color.\n    \"\"\"\n    input[input != black] = color\n    return input", "prompt": "color all the positions in the input array which is not black with the color", "subfunctions": [], "parent": "main"}, "main": {"code": "def main(input):\n    hollow_rectangles = \"find all hollow rectangles in the input. you can find a non-black position and trace through two directions to get another corner of this rectangle\"(input)\n    max_hollow_rectangle = \"return the max rectangle given the position of all the hollow rectangles\"(hollow_rectangles)\n    output = \"clip the rectangle from input to get a new numpy array\"(input, max_hollow_rectangle)\n    color = \"find the color which is not black inside of input, notice that Eliminate the outermost circle\"(output)\n    output = \"color all the positions in the input array which is not black with the color\"(output, color)\n    return output", "prompt": null, "subfunctions": ["find_hollow_rectangles", "find_max_rectangle", "clip_rectangle", "find_middle_color", "color_non_black"], "parent": null}}, "entry": "main"}