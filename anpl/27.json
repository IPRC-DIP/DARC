{"funs": {"find_non_black_color": {"code": "def find_non_black_color(row: np.ndarray) -> int:\n    \"\"\"\n    This function takes a numpy array as input and returns the non-black color in the array.\n    \"\"\"\n    for color in row:\n        if color != black:\n            return color\n    return black", "prompt": "In the row, there is only one non black color pixel. Iterate the row and find it", "subfunctions": [], "parent": "main"}, "draw_shape": {"code": "def draw_shape(color):\n    out = np.zeros((5, 10), dtype=int)\n    out[0, :] = color\n    out[2, :] = color\n    out[:, 0] = color\n    out[:, -1] = color\n    return out", "prompt": null, "subfunctions": [], "parent": "main"}, "flip_and_concat": {"code": "def flip_and_concat(shape1: np.ndarray, shape2: np.ndarray) -> np.ndarray:\n    flipped_shape2 = np.flipud(shape2)\n    return np.concatenate((shape1, flipped_shape2), axis=0)", "prompt": "flip the shape2 up and down, then concat shape1 and shape2 vertically", "subfunctions": [], "parent": "main"}, "main": {"code": "def main(input_grid: np.ndarray) -> np.ndarray:\n    color1 = \"In the row, there is only one non black color pixel. Iterate the row and find it\"(input_grid[2])\n    color2 = \"In the row, there is only one non black color pixel. Iterate the row and find it\"(input_grid[7])\n    shape1 = draw_shape(color1)\n    shape2 = draw_shape(color2)\n    out = \"flip the shape2 up and down, then concat shape1 and shape2 vertically\"(shape1, shape2)\n    return out", "prompt": null, "subfunctions": ["find_non_black_color", "draw_shape", "flip_and_concat"], "parent": null}}, "entry": "main"}