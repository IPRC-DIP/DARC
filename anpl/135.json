{"funs": {"find_top_left_blue_pixel": {"code": "def find_top_left_blue_pixel(input_grid: np.ndarray) -> Tuple[int, int]:\n    \"\"\"\n    Given an input grid, this function finds the top-left blue pixel and returns its coordinates.\n\n    Args:\n    input_grid: A numpy array representing the input grid.\n\n    Returns:\n    A tuple containing the row and column indices of the top-left blue pixel.\n    \"\"\"\n    for i in range(input_grid.shape[0]):\n        for j in range(input_grid.shape[1]):\n            if input_grid[i][j] == blue:\n                return (i, j)", "prompt": "find the top-left blue pixel", "subfunctions": [], "parent": "main"}, "find_bottom_right_red_pixel": {"code": "def find_bottom_right_red_pixel(input_grid: np.ndarray) -> Tuple[int, int]:\n    \"\"\"\n    Given an input grid, this function finds the bottom-right red pixel and returns its coordinates.\n\n    Args:\n    input_grid: A numpy array representing the input grid.\n\n    Returns:\n    A tuple containing the row and column indices of the bottom-right red pixel.\n    \"\"\"\n    for i in range(input_grid.shape[0] - 1, -1, -1):\n        for j in range(input_grid.shape[1] - 1, -1, -1):\n            if input_grid[i][j] == red:\n                return (i, j)", "prompt": "find the bottom-right red pixel", "subfunctions": [], "parent": "main"}, "put_blue_on_diagonal": {"code": "def put_blue_on_diagonal(blue_corner: Tuple[int, int], input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Given an input grid and the coordinates of the top-left blue pixel, this function puts blue pixels on the diagonal\n    from the blue corner to the top-left corner.\n\n    Args:\n    blue_corner: A tuple containing the row and column indices of the top-left blue pixel.\n    input_grid: A numpy array representing the input grid.\n\n    Returns:\n    A numpy array representing the updated grid with blue pixels on the diagonal.\n    \"\"\"\n    i, j = blue_corner\n    while i >= 0 and j >= 0:\n        input_grid[i][j] = blue\n        i -= 1\n        j -= 1\n    return input_grid", "prompt": "put blue pixels on diagonal from blue_corner to top-left", "subfunctions": [], "parent": "main"}, "put_red_on_diagonal": {"code": "def put_red_on_diagonal(red_corner: Tuple[int, int], input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Given an input grid and the coordinates of the bottom-right red pixel, this function puts red pixels on the diagonal\n    from the red corner to the bottom-right corner.\n\n    Args:\n    red_corner: A tuple containing the row and column indices of the bottom-right red pixel.\n    input_grid: A numpy array representing the input grid.\n\n    Returns:\n    A numpy array representing the updated grid with red pixels on the diagonal.\n    \"\"\"\n    i, j = red_corner\n    while i < input_grid.shape[0] and j < input_grid.shape[1]:\n        input_grid[i][j] = red\n        i += 1\n        j += 1\n    return input_grid", "prompt": "put red pixels on diagonal from red_corner to bottom-right", "subfunctions": [], "parent": "main"}, "main": {"code": "def main(input_grid: np.ndarray) -> np.ndarray:\n    blue_corner = \"find the top-left blue pixel\"(input_grid)\n    red_corner = \"find the bottom-right red pixel\"(input_grid)\n    input_grid = \"put blue pixels on diagonal from blue_corner to top-left\"(blue_corner, input_grid)\n    input_grid = \"put red pixels on diagonal from red_corner to bottom-right\"(red_corner, input_grid)\n    return input_grid", "prompt": null, "subfunctions": ["find_top_left_blue_pixel", "find_bottom_right_red_pixel", "put_blue_on_diagonal", "put_red_on_diagonal"], "parent": null}}, "entry": "main"}