{"funs": {"dfs": {"code": "def dfs(grid: np.ndarray, visited: np.ndarray, i: int, j: int) -> np.ndarray:\n    \"\"\"\n    This function performs depth-first search to find all the grey pixels in a grey shape.\n    \"\"\"\n    if i < 0 or i >= grid.shape[0] or j < 0 or (j >= grid.shape[1]) or (visited[i][j] == 1) or (grid[i][j] != grey):\n        return np.zeros_like(grid)\n    visited[i][j] = 1\n    shape = np.zeros_like(grid)\n    shape[i][j] = 1\n    shape += dfs(grid, visited, i + 1, j)\n    shape += dfs(grid, visited, i - 1, j)\n    shape += dfs(grid, visited, i, j + 1)\n    shape += dfs(grid, visited, i, j - 1)\n    return shape", "prompt": "This function performs depth-first search to find all the grey pixels in a grey shape.", "subfunctions": [], "parent": "find_grey_shapes"}, "find_grey_shapes": {"code": "def find_grey_shapes(grid: np.ndarray) -> List[np.ndarray]:\n    \"\"\"\n    This function takes an input grid and returns a list of the indices of the grey shapes, each grey shape contains some grey pixels.\n    \"\"\"\n    grey_shapes = []\n    visited = np.zeros_like(grid)\n    for i in range(grid.shape[0]):\n        for j in range(grid.shape[1]):\n            if grid[i][j] == grey and visited[i][j] == 0:\n                grey_shape = \"This function performs depth-first search to find all the grey pixels in a grey shape.\"(grid, visited, i, j)\n                grey_shapes.append(grey_shape)\n    return grey_shapes", "prompt": "This function takes an input grid and returns a list of the indices of the grey shapes, each grey shape contains some grey pixels.", "subfunctions": ["dfs"], "parent": "main"}, "count_pixels": {"code": "def count_pixels(gs: np.ndarray) -> int:\n    \"\"\"                                                                                                                                                                 \n    This function takes a grey shape and returns the number of grey pixels in it.                                                                                       \n    \"\"\"\n    return np.sum(gs)", "prompt": "This function takes a grey shape and returns the number of grey pixels in it.                                                                                       ", "subfunctions": [], "parent": "main"}, "color_grey_shape": {"code": "def color_grey_shape(grid: np.ndarray, grey_shape: np.ndarray, color: int) -> np.ndarray:\n    \"\"\"\n    This function takes a grid, a grey shape, and a color, and colors the pixels of the grid to give color where its value equals 1 in grey shape.\n    \"\"\"\n    grid[grey_shape == 1] = color\n    return grid", "prompt": "This function takes a grid, a grey shape, and a color, color the pixels of the grid to give color where its value equals 1 in grey shape.                                  ", "subfunctions": [], "parent": "main"}, "main": {"code": "def main(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"                                                                                                                                                                 \n    In the input, you should see a black grid, it has some grey shapes.\n    the output grid is the same size as the input grid.\n    To make the output, you should color the grey shapes to red that has six grey pixels, and color the grey shapes to blue that do not have six grep pixels.\n    \"\"\"\n    output_grid = input_grid.copy()\n    grey_shapes = \"This function takes an input grid and returns a list of the indices of the grey shapes, each grey shape contains some grey pixels.\"(input_grid)\n    for gs in grey_shapes:\n        if \"This function takes a grey shape and returns the number of grey pixels in it.                                                                                       \"(gs) == 6:\n            output_grid = \"This function takes a grid, a grey shape, and a color, color the pixels of the grid to give color where its value equals 1 in grey shape.                                  \"(output_grid, gs, red)\n        else:\n            output_grid = \"This function takes a grid, a grey shape, and a color, color the pixels of the grid to give color where its value equals 1 in grey shape.                                  \"(output_grid, gs, blue)\n    return output_grid", "prompt": "In the input, you should see a black grid, it has some grey shapes.\nthe output grid is the same size as the input grid.\nTo make the output, you should color the grey shapes to red that has six grey pixels, and color the grey shapes to blue that do not have six grep pixels.", "subfunctions": ["find_grey_shapes", "count_pixels", "color_grey_shape"], "parent": null}}, "entry": "main"}