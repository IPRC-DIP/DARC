{"funs": {"get_color_list": {"code": "def get_color_list(input, positions):\n    i, j = positions\n    return [input[i][j], input[i - 2][j], input[i + 2][j], input[i][j - 2], input[i][j + 2]]", "prompt": null, "subfunctions": [], "parent": "find_red_centers"}, "find_red_centers": {"code": "def find_red_centers(input_grid):\n    centers = []\n    for i in range(2, len(input_grid) - 2):\n        for j in range(2, len(input_grid[0]) - 2):\n            color_list2 = get_color_list(input_grid, (i, j))\n            if color_list2.count(red) >= 3:\n                centers.append((i, j))\n    return centers", "prompt": null, "subfunctions": ["get_color_list"], "parent": "main"}, "change_cross_to_teal": {"code": "def change_cross_to_teal(input_grid: List[List[int]], centers: List[Tuple[int, int]]) -> List[List[int]]:\n    \"\"\"\n    Change the non-red positions of the cross with radius 3 to teal for each position in the input centers.\n\n    Args:\n    input_grid: A 2D list of integers representing the initial color grid.\n    centers: A list of tuples representing the positions of the red centers.\n\n    Returns:\n    A 2D list of integers representing the updated color grid after changing the non-red positions of the cross with radius 3 to teal for each position in the input centers.\n    \"\"\"\n    for center in centers:\n        i, j = center\n        for k in range(1, 3):\n            if input_grid[i - k][j] != red:\n                input_grid[i - k][j] = teal\n            if input_grid[i + k][j] != red:\n                input_grid[i + k][j] = teal\n            if input_grid[i][j - k] != red:\n                input_grid[i][j - k] = teal\n            if input_grid[i][j + k] != red:\n                input_grid[i][j + k] = teal\n        if input_grid[i][j] != red:\n            input_grid[i][j] = teal\n    return input_grid", "prompt": "for each position in the second input, you should Change the non-red position of the cross with radius 3  to teal", "subfunctions": [], "parent": "main"}, "main": {"code": "def main(input_grid):\n    centers = find_red_centers(input_grid)\n    output = \"for each position in the second input, you should Change the non-red position of the cross with radius 3  to teal\"(input_grid, centers)\n    return output", "prompt": null, "subfunctions": ["find_red_centers", "change_cross_to_teal"], "parent": null}}, "entry": "main"}