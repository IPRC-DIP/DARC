{"funs": {"get_smallest_matrix_with_red_pixels": {"code": "def get_smallest_matrix_with_red_pixels(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Given an input grid, this function returns the smallest matrix which includes all red pixels in the input grid.\n    \n    Args:\n    input_grid: A numpy ndarray representing the input grid\n    \n    Returns:\n    A numpy ndarray representing the smallest matrix which includes all red pixels in the input grid\n    \"\"\"\n    m = np.zeros_like(input_grid)\n    m[input_grid == red] = 1\n    rows = np.any(m, axis=1)\n    cols = np.any(m, axis=0)\n    min_row, max_row = np.where(rows)[0][[0, -1]]\n    min_col, max_col = np.where(cols)[0][[0, -1]]\n    out = input_grid[min_row:max_row + 1, min_col:max_col + 1]\n    return out", "prompt": "Return the smallest matrix which includes all red pixels in the input grid", "subfunctions": [], "parent": "main"}, "replace_black_pixels_with_red": {"code": "def replace_black_pixels_with_red(input_grid: np.ndarray, m: np.ndarray) -> np.ndarray:\n    \"\"\"\n    For each submatrix of input grid, which has the same shape as m, if the corresponding pixels of red pixels in m are all black, replace them as red\n    \n    Args:\n    input_grid: A numpy ndarray representing the input grid\n    m: A numpy ndarray representing the smallest matrix which includes all red pixels in the input grid\n    \n    Returns:\n    A numpy ndarray representing the modified input grid with black pixels replaced by red pixels\n    \"\"\"\n    submatrices = []\n    for i in range(input_grid.shape[0] - m.shape[0] + 1):\n        for j in range(input_grid.shape[1] - m.shape[1] + 1):\n            submatrices.append(input_grid[i:i + m.shape[0], j:j + m.shape[1]])\n    for submatrix in submatrices:\n        red_pixels = np.where(m == red)\n        if np.all(submatrix[red_pixels] == black):\n            submatrix[red_pixels] = red\n    return input_grid", "prompt": "For each submatrix of input grid, which has the same shape as m, if the corresponding pixels of red pixels in m are all black, replace them as red", "subfunctions": [], "parent": "main"}, "main": {"code": "def main(input_grid: np.ndarray) -> np.ndarray:\n    m = \"Return the smallest matrix which includes all red pixels in the input grid\"(input_grid)\n    out = \"For each submatrix of input grid, which has the same shape as m, if the corresponding pixels of red pixels in m are all black, replace them as red\"(input_grid, m)\n    return out", "prompt": null, "subfunctions": ["get_smallest_matrix_with_red_pixels", "replace_black_pixels_with_red"], "parent": null}}, "entry": "main"}