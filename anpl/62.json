{"funs": {"find_rows_with_most_black_pixels": {"code": "def find_rows_with_most_black_pixels(input_grid: np.ndarray) -> List[int]:\n    \"\"\"\n    This function takes in a numpy array as input and returns a list of row indices that contain the most black pixels.\n    If there are multiple rows with the same number of black pixels, all of them are returned.\n    \n    Args:\n    - input_grid: a numpy array representing the input grid\n    \n    Returns:\n    - A list of row indices that contain the most black pixels\n    \"\"\"\n    row_sums = np.sum(input_grid == black, axis=1)\n    max_sum = np.max(row_sums)\n    return [i for i, sum in enumerate(row_sums) if sum == max_sum]", "prompt": " find the rows contain most black pixels (may be not 1 row)", "subfunctions": [], "parent": "main"}, "find_columns_with_most_black_pixels": {"code": "def find_columns_with_most_black_pixels(input_grid: np.ndarray) -> List[int]:\n    \"\"\"\n    This function takes in a numpy array as input and returns a list of column indices that contain the most black pixels.\n    If there are multiple columns with the same number of black pixels, all of them are returned.\n    \n    Args:\n    - input_grid: a numpy array representing the input grid\n    \n    Returns:\n    - A list of column indices that contain the most black pixels\n    \"\"\"\n    column_sums = np.sum(input_grid == black, axis=0)\n    max_sum = np.max(column_sums)\n    return [i for i, sum in enumerate(column_sums) if sum == max_sum]", "prompt": "find the columns contain most black pixels (may be not 1 column)", "subfunctions": [], "parent": "main"}, "change_black_pixels_to_green_in_rows": {"code": "def change_black_pixels_to_green_in_rows(row_indices: List[int], output_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    This function takes in a list of row indices and a numpy array as input and changes the black pixels in the specified rows to green.\n    \n    Args:\n    - row_indices: a list of row indices to change the black pixels to green\n    - output_grid: a numpy array representing the output grid\n    \n    Returns:\n    - A numpy array with the specified black pixels changed to green\n    \"\"\"\n    for row_index in row_indices:\n        output_grid[row_index][output_grid[row_index] == black] = green\n    return output_grid", "prompt": "change the black pixels in the row_indices's row in the output_grid to green", "subfunctions": [], "parent": "main"}, "change_black_pixels_to_green_in_columns": {"code": "def change_black_pixels_to_green_in_columns(column_indices: List[int], output_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    This function takes in a list of column indices and a numpy array as input and changes the black pixels in the specified columns to green.\n    \n    Args:\n    - column_indices: a list of column indices to change the black pixels to green\n    - output_grid: a numpy array representing the output grid\n    \n    Returns:\n    - A numpy array with the specified black pixels changed to green\n    \"\"\"\n    for column_index in column_indices:\n        output_grid[:, column_index][output_grid[:, column_index] == black] = green\n    return output_grid", "prompt": "change the black pixels in the column_indices's column in the output_grid to green", "subfunctions": [], "parent": "main"}, "main": {"code": "def main(input_grid: np.ndarray) -> np.ndarray:\n    row_indices = \" find the rows contain most black pixels (may be not 1 row)\"(input_grid)\n    column_indices = \"find the columns contain most black pixels (may be not 1 column)\"(input_grid)\n    output_grid = input_grid.copy()\n    output_grid = \"change the black pixels in the row_indices's row in the output_grid to green\"(row_indices, output_grid)\n    output_grid = \"change the black pixels in the column_indices's column in the output_grid to green\"(column_indices, output_grid)\n    return output_grid", "prompt": null, "subfunctions": ["find_rows_with_most_black_pixels", "find_columns_with_most_black_pixels", "change_black_pixels_to_green_in_rows", "change_black_pixels_to_green_in_columns"], "parent": null}}, "entry": "main"}