{"funs": {"find_non_black_2x2_pixels": {"code": "def find_non_black_2x2_pixels(input_grid: np.ndarray) -> List[Tuple[int, int]]:\n    locs = []\n    for i in range(input_grid.shape[0] - 1):\n        for j in range(input_grid.shape[1] - 1):\n            if input_grid[i][j] != black and input_grid[i][j + 1] != black and (input_grid[i + 1][j] != black) and (input_grid[i + 1][j + 1] != black):\n                locs.append((i, j))\n    return locs", "prompt": "find all 2*2 pixels which is not in black and get the location", "subfunctions": [], "parent": "main"}, "get_num_colors_2x2": {"code": "def get_num_colors_2x2(input_grid: np.ndarray, locs: List[Tuple[int, int]]) -> List[int]:\n    num_colors = []\n    for loc in locs:\n        i, j = loc\n        colors = set([input_grid[i][j], input_grid[i][j + 1], input_grid[i + 1][j], input_grid[i + 1][j + 1]])\n        num_colors.append(len(colors))\n    return num_colors", "prompt": "get the number of colors in each 2*2 grid", "subfunctions": [], "parent": "main"}, "color_2x2_grids": {"code": "def color_2x2_grids(input_grid: np.ndarray, locs: List[Tuple[int, int]], n: List[int]) -> np.ndarray:\n    \"\"\"\n      This function takes in a numpy array as input_grid, a list of tuples containing the row and column indices\n      of all 2x2 pixels that are not black (represented by the integer value 0), and a list of integers, where each\n      integer represents the number of unique non-black colors in the corresponding 2x2 pixel. It returns a numpy array\n      where for each 2x2 pixel, the n * 2 pixels just under it are changed to green.\n\n      Args:\n      - input_grid: A numpy array of shape (n, m) representing the input grid\n      - locs: A list of tuples containing the row and column indices of all 2x2 pixels that are not black\n      - n: A list of integers, where each integer represents the number of unique non-black colors in the corresponding 2x2 pixel\n\n      Returns:\n      - A numpy array where for each 2x2 pixel, the n * 2 pixels just under it are changed to green\n      \"\"\"\n    out_grid = input_grid.copy()\n    for i, loc in enumerate(locs):\n        x, y = loc\n        for j in range(n[i]):\n            for k in range(2):\n                out_grid[x + j + 2, y + k] = green\n    return out_grid", "prompt": "This function takes in a numpy array as input_grid, a list of tuples containing the row and column indices\nof all 2x2 pixels that are not black (represented by the integer value 0), and a list of integers, where each\ninteger represents the number of unique non-black colors in the corresponding 2x2 pixel. It returns a numpy array\nwhere for each 2x2 pixel, the n * 2 pixels just under it are changed to green.\n\nArgs:\n- input_grid: A numpy array of shape (n, m) representing the input grid\n- locs: A list of tuples containing the row and column indices of all 2x2 pixels that are not black\n- n: A list of integers, where each integer represents the number of unique non-black colors in the corresponding 2x2 pixel\n\nReturns:\n- A numpy array where for each 2x2 pixel, the n * 2 pixels just under it are changed to green", "subfunctions": [], "parent": "main"}, "main": {"code": "def main(input_grid: np.ndarray) -> np.ndarray:\n    locs = \"find all 2*2 pixels which is not in black and get the location\"(input_grid)\n    n = \"get the number of colors in each 2*2 grid\"(input_grid, locs)\n    out_grid = \"This function takes in a numpy array as input_grid, a list of tuples containing the row and column indices\nof all 2x2 pixels that are not black (represented by the integer value 0), and a list of integers, where each\ninteger represents the number of unique non-black colors in the corresponding 2x2 pixel. It returns a numpy array\nwhere for each 2x2 pixel, the n * 2 pixels just under it are changed to green.\n\nArgs:\n- input_grid: A numpy array of shape (n, m) representing the input grid\n- locs: A list of tuples containing the row and column indices of all 2x2 pixels that are not black\n- n: A list of integers, where each integer represents the number of unique non-black colors in the corresponding 2x2 pixel\n\nReturns:\n- A numpy array where for each 2x2 pixel, the n * 2 pixels just under it are changed to green\"(input_grid, locs, n)\n    return out_grid", "prompt": null, "subfunctions": ["find_non_black_2x2_pixels", "get_num_colors_2x2", "color_2x2_grids"], "parent": null}}, "entry": "main"}