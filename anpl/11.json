{"funs": {"find_center_points": {"code": "def find_center_points(input_grid: np.ndarray) -> List[Tuple[int, int]]:\n    centers = []\n    for i in range(1, input_grid.shape[0] - 1):\n        for j in range(1, input_grid.shape[1] - 1):\n            if input_grid[i][j] != black and input_grid[i - 1][j] != black and (input_grid[i + 1][j] != black) and (input_grid[i][j - 1] != black) and (input_grid[i][j + 1] != black):\n                centers.append((i, j))\n    return centers", "prompt": "Traverse the image matrix and for each pixel that has non-black pixels on all four sides, record its coordinates as a center point.", "subfunctions": [], "parent": "main"}, "get_pixel_colors": {"code": "def get_pixel_colors(input_grid: np.ndarray, i: int, j: int) -> Tuple[int, int]:\n    c1 = input_grid[i][j]\n    c2 = input_grid[i][j - 1]\n    return (c1, c2)", "prompt": "Get the color of pixel (i,j), denoted as c1, and the color of pixel (i,j-1), denoted as c2", "subfunctions": [], "parent": "main"}, "set_pixel_colors": {"code": "def set_pixel_colors(input_grid: np.ndarray, i: int, j: int, c1: int, c2: int) -> np.ndarray:\n    input_grid[i - 1][j - 1] = c1\n    input_grid[i - 2][j - 2] = c1\n    input_grid[i - 1][j + 1] = c1\n    input_grid[i - 2][j + 2] = c1\n    input_grid[i + 1][j + 1] = c1\n    input_grid[i + 2][j + 2] = c1\n    input_grid[i + 1][j - 1] = c1\n    input_grid[i + 2][j - 2] = c1\n    input_grid[i - 2][j] = c2\n    input_grid[i + 2][j] = c2\n    input_grid[i][j - 2] = c2\n    input_grid[i][j + 2] = c2\n    return input_grid", "prompt": "Set the colors of pixels (i-1,j-1),(i-2,j-2),(i-1,j+1),(i-2,j+2),(i+1,j+1),(i+2,j+2),(i+1,j-1), and (i+2,j-2) to c1. Set the colors of pixels (i-2,j),(i+2,j),(i,j-2), and (i,j+2) to c2.", "subfunctions": [], "parent": "main"}, "main": {"code": "def main(input_grid: np.ndarray) -> np.ndarray:\n    centers = \"Traverse the image matrix and for each pixel that has non-black pixels on all four sides, record its coordinates as a center point.\"(input_grid)\n    for center in centers:\n        i, j = center\n        c1, c2 = \"Get the color of pixel (i,j), denoted as c1, and the color of pixel (i,j-1), denoted as c2\"(input_grid, i, j)\n        input_grid = \"Set the colors of pixels (i-1,j-1),(i-2,j-2),(i-1,j+1),(i-2,j+2),(i+1,j+1),(i+2,j+2),(i+1,j-1), and (i+2,j-2) to c1. Set the colors of pixels (i-2,j),(i+2,j),(i,j-2), and (i,j+2) to c2.\"(input_grid, i, j, c1, c2)\n    return input_grid", "prompt": null, "subfunctions": ["find_center_points", "get_pixel_colors", "set_pixel_colors"], "parent": null}}, "entry": "main"}