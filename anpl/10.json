{"funs": {"remove_rows_cols": {"code": "def remove_rows_cols(input_grid: np.ndarray) -> np.ndarray:\n    return np.delete(np.delete(input_grid, [3, 7], axis=1), [3, 7], axis=0)", "prompt": "remove the 4-th, 8-th column and 4-th, 8-th row ", "subfunctions": [], "parent": "main"}, "separate_sub_blocks": {"code": "def separate_sub_blocks(input_grid: np.ndarray) -> List[np.ndarray]:\n    sub_blocks = []\n    for i in range(0, 9, 3):\n        for j in range(0, 9, 3):\n            sub_blocks.append(input_grid[i:i + 3, j:j + 3])\n    return sub_blocks", "prompt": "seperate the input grid into 9 3x3 sub block", "subfunctions": [], "parent": "main"}, "find_block_with_4_non_black_elements": {"code": "def find_block_with_4_non_black_elements(sub_blocks: List[np.ndarray]) -> np.ndarray:\n    for block in sub_blocks:\n        if np.count_nonzero(block != black) == 4:\n            return block\n    return np.zeros((3, 3))", "prompt": "find the block contains 4 non black elements ", "subfunctions": [], "parent": "main"}, "set_block_colors": {"code": "def set_block_colors(output_grid: np.ndarray, output_block: np.ndarray) -> np.ndarray:\n    for i, element in enumerate(output_block.flatten()):\n        if element != black:\n            row = i // 3 * 3\n            col = i % 3 * 3\n            output_grid[row:row + 3, col:col + 3] = element\n    return output_grid", "prompt": "for elements in output_block, set the i-th 3x3 block in output_grid to the color of the element", "subfunctions": [], "parent": "main"}, "add_grey_lines": {"code": "def add_grey_lines(input_grid: np.ndarray) -> np.ndarray:\n    output_grid = np.zeros((11, 11))\n    for i in range(11):\n        for j in range(11):\n            if i % 4 == 3 or j % 4 == 3:\n                output_grid[i][j] = grey\n            else:\n                output_grid[i][j] = input_grid[i - i // 4][j - j // 4]\n    return output_grid", "prompt": "add grey lines average 3 rows or column to make the 9x9 input grid to the 11x11 output grid", "subfunctions": [], "parent": "main"}, "main": {"code": "def main(input_grid: np.ndarray) -> np.ndarray:\n    output_grid = np.zeros((9, 9))\n    remove_grey_input_grid = \"remove the 4-th, 8-th column and 4-th, 8-th row \"(input_grid)\n    sub_blocks = \"seperate the input grid into 9 3x3 sub block\"(remove_grey_input_grid)\n    output_block = \"find the block contains 4 non black elements \"(sub_blocks)\n    output_grid = \"for elements in output_block, set the i-th 3x3 block in output_grid to the color of the element\"(output_grid, output_block)\n    output_grid = \"add grey lines average 3 rows or column to make the 9x9 input grid to the 11x11 output grid\"(output_grid)\n    return output_grid", "prompt": null, "subfunctions": ["remove_rows_cols", "separate_sub_blocks", "find_block_with_4_non_black_elements", "set_block_colors", "add_grey_lines"], "parent": null}}, "entry": "main"}