{"funs": {"find_red_grids": {"code": "def find_red_grids(input_grid: np.ndarray) -> List[Tuple[int, int]]:\n    \"\"\"\n    This function takes in a numpy array as input_grid and returns a list of tuples containing the positions of all the red grids in the input.\n    \n    Args:\n    input_grid: A numpy array representing the input grid\n    \n    Returns:\n    A list of tuples containing the positions of all the red grids in the input.\n    \"\"\"\n    red_grids = []\n    for i in range(input_grid.shape[0]):\n        for j in range(input_grid.shape[1]):\n            if input_grid[i][j] == red:\n                red_grids.append((i, j))\n    return red_grids", "prompt": "find all red grids in the input and return their positions", "subfunctions": [], "parent": "main"}, "color_adjacent_black_grids": {"code": "def color_adjacent_black_grids(input_grid: np.ndarray, red_grids: List[Tuple[int, int]]) -> np.ndarray:\n    \"\"\"\n    This function takes in a numpy array as input_grid and a list of tuples containing the positions of all the red grids in the input as red_grids.\n    It colors all black grids(diagonally adjacent included) that are adjacent to the red grids with blue.\n    \n    Args:\n    input_grid: A numpy array representing the input grid\n    red_grids: A list of tuples containing the positions of all the red grids in the input.\n    \n    Returns:\n    A numpy array with the black grids adjacent to the red grids colored blue.\n    \"\"\"\n    blue_grids = []\n    for r, c in red_grids:\n        for i in range(r - 1, r + 2):\n            for j in range(c - 1, c + 2):\n                if i >= 0 and j >= 0 and (i < input_grid.shape[0]) and (j < input_grid.shape[1]) and (input_grid[i][j] == black):\n                    input_grid[i][j] = blue\n                    blue_grids.append((i, j))\n    return input_grid", "prompt": "find all black grids with legal positions that are adjacent to the red grids(diagonally adjacent included). Color them blue.", "subfunctions": [], "parent": "main"}, "main": {"code": "def main(input_grid: np.ndarray) -> np.ndarray:\n    red_grids = \"find all red grids in the input and return their positions\"(input_grid)\n    output = \"find all black grids with legal positions that are adjacent to the red grids(diagonally adjacent included). Color them blue.\"(input_grid, red_grids)\n    return output", "prompt": null, "subfunctions": ["find_red_grids", "color_adjacent_black_grids"], "parent": null}}, "entry": "main"}