{"funs": {"find_non_black_color": {"code": "def find_non_black_color(input_grid: np.ndarray) -> int:\n    \"\"\"\n    Given an input grid, this function returns the color of a non-black square.\n    \n    Args:\n    input_grid: A numpy array representing the input grid.\n    \n    Returns:\n    An integer representing the color of a non-black square.\n    \"\"\"\n    for i in range(input_grid.shape[0]):\n        for j in range(input_grid.shape[1]):\n            if input_grid[i][j] != black:\n                return input_grid[i][j]", "prompt": "Find the color of a non-black square", "subfunctions": [], "parent": "main"}, "find_num_non_black_squares": {"code": "def find_num_non_black_squares(input_grid: np.ndarray) -> int:\n    \"\"\"\n    Given an input grid, this function returns the number of non-black squares.\n    \n    Args:\n    input_grid: A numpy array representing the input grid.\n    \n    Returns:\n    An integer representing the number of non-black squares.\n    \"\"\"\n    count = 0\n    for i in range(input_grid.shape[0]):\n        for j in range(input_grid.shape[1]):\n            if input_grid[i][j] != black:\n                count += 1\n    return count", "prompt": "Find the number of non-black squares", "subfunctions": [], "parent": "main"}, "change_all_squares_to_color": {"code": "def change_all_squares_to_color(input_grid: np.ndarray, color: int) -> np.ndarray:\n    \"\"\"\n    Given an input grid and a color, this function returns the grid with all squares changed to the input color.\n    \n    Args:\n    input_grid: A numpy array representing the input grid.\n    color: An integer representing the input color.\n    \n    Returns:\n    A numpy array representing the grid with all squares changed to the input color.\n    \"\"\"\n    for i in range(input_grid.shape[0]):\n        for j in range(input_grid.shape[1]):\n            input_grid[i][j] = color\n    return input_grid", "prompt": " Change all squares to the input color ", "subfunctions": [], "parent": "main"}, "main": {"code": "def main(input_grid: np.ndarray) -> np.ndarray:\n    color = \"Find the color of a non-black square\"(input_grid)\n    number = \"Find the number of non-black squares\"(input_grid)\n    output_grid = np.zeros((1, number), dtype=int)\n    output_grid = \" Change all squares to the input color \"(output_grid, color)\n    return output_grid", "prompt": null, "subfunctions": ["find_non_black_color", "find_num_non_black_squares", "change_all_squares_to_color"], "parent": null}}, "entry": "main"}