{"funs": {"find_first_color": {"code": "def find_first_color(input_grid: np.ndarray) -> int:\n    for i in range(input_grid.shape[0]):\n        for j in range(input_grid.shape[1]):\n            if input_grid[i][j] != black:\n                return input_grid[i][j]\n    return black", "prompt": "Traverse the image and find all colors in the image. Return the first color, excluding black.", "subfunctions": [], "parent": "main"}, "get_color_array": {"code": "def get_color_array(color: int) -> np.ndarray:\n    if color == blue:\n        return np.array([[0, 5, 0], [5, 5, 5], [0, 5, 0]])\n    elif color == red:\n        return np.array([[5, 5, 5], [0, 5, 0], [0, 5, 0]])\n    elif color == green:\n        return np.array([[0, 0, 5], [0, 0, 5], [5, 5, 5]])\n    else:\n        return np.zeros((3, 3), dtype=int)", "prompt": "If c is blue, return array([[0,5,0],[5,5,5],[0,5,0]]); if c is red, return array([[5,5,5],[0,5,0],[0,5,0]]); if c is green, return array([[0,0,5],[0,0,5],[5,5,5]]).", "subfunctions": [], "parent": "main"}, "main": {"code": "def main(input_grid: np.ndarray) -> np.ndarray:\n    c = \"Traverse the image and find all colors in the image. Return the first color, excluding black.\"(input_grid)\n    output_grid = \"If c is blue, return array([[0,5,0],[5,5,5],[0,5,0]]); if c is red, return array([[5,5,5],[0,5,0],[0,5,0]]); if c is green, return array([[0,0,5],[0,0,5],[5,5,5]]).\"(c)\n    return output_grid", "prompt": null, "subfunctions": ["find_first_color", "get_color_array"], "parent": null}}, "entry": "main"}