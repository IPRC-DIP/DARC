{"funs": {"has_more_than_63_black_pixels": {"code": "def has_more_than_63_black_pixels(grid: np.ndarray) -> bool:\n    return np.count_nonzero(grid == black) > 63", "prompt": "the number of black pixels in the grid is more than 63", "subfunctions": [], "parent": "main"}, "find_black_pixels_with_two_non_black_neighbours": {"code": "def find_black_pixels_with_two_non_black_neighbours(grid: np.ndarray) -> List[Tuple[int, int]]:\n    black_pixels = np.where(grid == black)\n    locs = []\n    for i in range(len(black_pixels[0])):\n        row, col = (black_pixels[0][i], black_pixels[1][i])\n        neighbours = [(row - 1, col), (row + 1, col), (row, col - 1), (row, col + 1)]\n        non_black_neighbours = [n for n in neighbours if 0 <= n[0] < grid.shape[0] and 0 <= n[1] < grid.shape[1] and (grid[n] != black)]\n        if len(non_black_neighbours) >= 2:\n            locs.append((row, col))\n    return locs", "prompt": "find all black pixels which have at least two neighbour pixels on its up or down or left or right which are not black", "subfunctions": [], "parent": "main"}, "change_pixels_to_orange": {"code": "def change_pixels_to_orange(grid: np.ndarray, locs: List[Tuple[int, int]]) -> np.ndarray:\n    for loc in locs:\n        grid[loc] = orange\n    return grid", "prompt": "change pixels to orange", "subfunctions": [], "parent": "main"}, "main": {"code": "def main(input_grid: np.ndarray) -> np.ndarray:\n    output_grid = input_grid\n    while \"the number of black pixels in the grid is more than 63\"(output_grid):\n        locs = \"find all black pixels which have at least two neighbour pixels on its up or down or left or right which are not black\"(output_grid)\n        output_grid = \"change pixels to orange\"(output_grid, locs)\n    return output_grid", "prompt": null, "subfunctions": ["has_more_than_63_black_pixels", "find_black_pixels_with_two_non_black_neighbours", "change_pixels_to_orange"], "parent": null}}, "entry": "main"}