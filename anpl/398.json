{"funs": {"count_red_squares": {"code": "def count_red_squares(input_grid: np.ndarray) -> int:\n    \"\"\"\n    Counts how many 2x2 red squares there are in the input grid.\n    \n    Args:\n    input_grid: A numpy array representing the input grid.\n    \n    Returns:\n    An integer representing the number of 2x2 red squares in the input grid.\n    \"\"\"\n    cnt = 0\n    for i in range(input_grid.shape[0] - 1):\n        for j in range(input_grid.shape[1] - 1):\n            if input_grid[i][j] == red and input_grid[i + 1][j] == red and (input_grid[i][j + 1] == red) and (input_grid[i + 1][j + 1] == red):\n                cnt += 1\n    return cnt", "prompt": "count how many 2x2 red squares there are in the input.return the number", "subfunctions": [], "parent": "main"}, "generate_blue_grid": {"code": "def generate_blue_grid(cnt: int) -> np.ndarray:\n    \"\"\"\n    Generates a new grid with blue squares based on the count of red squares in the input grid.\n    \n    Args:\n    cnt: An integer representing the count of 2x2 red squares in the input grid.\n    \n    Returns:\n    A numpy array representing the new grid with blue squares.\n    \"\"\"\n    grid = np.full((3, 3), black)\n    if cnt == 1:\n        grid[0][0] = blue\n    elif cnt == 2:\n        grid[0][0] = blue\n        grid[0][2] = blue\n    elif cnt == 3:\n        grid[0][0] = blue\n        grid[0][2] = blue\n        grid[1][1] = blue\n    elif cnt == 4:\n        grid[0][0] = blue\n        grid[0][2] = blue\n        grid[1][1] = blue\n        grid[2][0] = blue\n    elif cnt == 5:\n        grid[0][0] = blue\n        grid[0][2] = blue\n        grid[1][1] = blue\n        grid[2][0] = blue\n        grid[2][2] = blue\n    return grid", "prompt": "generate a 3*3 black grid, add a single blue square in the top left corner if cnt is one, add two blue squares in top left and top right corners if cnt is two, add three blue squares in top left, top right and center if cnt is three, add four blue squares in top left, top right, center and bottom left if cnt is four and add five blue squares in top left, top right, center, bottom left, and bottom right if cnt is five.", "subfunctions": [], "parent": "main"}, "main": {"code": "def main(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    In the input, you should see a n*n grid with multiple color pixels.\n    \"\"\"\n    cnt = \"count how many 2x2 red squares there are in the input.return the number\"(input_grid)\n    ans_grid = \"generate a 3*3 black grid, add a single blue square in the top left corner if cnt is one, add two blue squares in top left and top right corners if cnt is two, add three blue squares in top left, top right and center if cnt is three, add four blue squares in top left, top right, center and bottom left if cnt is four and add five blue squares in top left, top right, center, bottom left, and bottom right if cnt is five.\"(cnt)\n    return ans_grid", "prompt": "In the input, you should see a n*n grid with multiple color pixels.", "subfunctions": ["count_red_squares", "generate_blue_grid"], "parent": null}}, "entry": "main"}