{"funs": {"traverse_grid": {"code": "def traverse_grid(input_grid: np.ndarray) -> List[int]:\n    \"\"\"\n    Traverse the grid from left to right and top to bottom, noting the order of different colors.\n    \n    Args:\n    input_grid: A numpy array representing the input grid.\n    \n    Returns:\n    A list of integers representing the order of different colors in the grid.\n    \"\"\"\n    color_list = []\n    for row in input_grid:\n        for color in row:\n            if color not in color_list:\n                color_list.append(color)\n    return color_list", "prompt": "traverse the grid from left to right and top to bottom, noting the order of different colors", "subfunctions": [], "parent": "main"}, "row_has_only_one_color": {"code": "def row_has_only_one_color(row: np.ndarray) -> bool:\n    \"\"\"\n    Check if a given row has only one color.\n    \n    Args:\n    row: A numpy array representing a row in the input grid.\n    \n    Returns:\n    A boolean value indicating whether the row has only one color or not.\n    \"\"\"\n    return len(set(row)) == 1", "prompt": "Check if a given row has only one color.\n\nArgs:\nrow: A numpy array representing a row in the input grid.\n\nReturns:\nA boolean value indicating whether the row has only one color or not.", "subfunctions": [], "parent": "main"}, "main": {"code": "def main(input_grid: np.ndarray) -> np.ndarray:\n    color_list = \"traverse the grid from left to right and top to bottom, noting the order of different colors\"(input_grid)\n    output_grid = np.array([color_list])\n    if \"Check if a given row has only one color.\n\nArgs:\nrow: A numpy array representing a row in the input grid.\n\nReturns:\nA boolean value indicating whether the row has only one color or not.\"(input_grid[0]):\n        return output_grid.T\n    else:\n        return output_grid", "prompt": null, "subfunctions": ["traverse_grid", "row_has_only_one_color"], "parent": null}}, "entry": "main"}