{"funs": {"has_red_neighbors_in_horizontal_directions": {"code": "def has_red_neighbors_in_horizontal_directions(grid: np.ndarray, i: int, j: int) -> bool:\n    \"\"\"\n    Checks if the given point has red neighbors in horizontal directions.\n\n    Args:\n    - grid (np.ndarray): The input grid.\n    - i (int): The row index of the point.\n    - j (int): The column index of the point.\n\n    Returns:\n    - bool: True if the given point has red neighbors in horizontal directions, False otherwise.\n    \"\"\"\n    if grid[i][j] == black:\n        row = grid[i]\n        if red in row[:j] and red in row[j + 1:]:\n            return True\n    return False", "prompt": "you get a grid and a point. First you should check if this point is black.If it's black,you should check if there are red point in left direction and right direction at the same time. These red points do not necessarily need to be adjacent, just need be on the same row. ", "subfunctions": [], "parent": "main"}, "color_to_maroon": {"code": "def color_to_maroon(grid: np.ndarray, i: int, j: int) -> np.ndarray:\n    \"\"\"\n    Colors the given point in the grid to maroon.\n\n    Args:\n    - grid (np.ndarray): The input grid.\n    - i (int): The row index of the point.\n    - j (int): The column index of the point.\n\n    Returns:\n    - np.ndarray: The updated grid with the given point colored to maroon.\n    \"\"\"\n    grid[i][j] = maroon\n    return grid", "prompt": "color this point to maroon", "subfunctions": [], "parent": "main"}, "main": {"code": "def main(input_grid: np.ndarray) -> np.ndarray:\n    for i in range(input_grid.shape[0]):\n        for j in range(input_grid.shape[1]):\n            if \"you get a grid and a point. First you should check if this point is black.If it's black,you should check if there are red point in left direction and right direction at the same time. These red points do not necessarily need to be adjacent, just need be on the same row. \"(input_grid, i, j):\n                input_grid = \"color this point to maroon\"(input_grid, i, j)\n    return input_grid", "prompt": null, "subfunctions": ["has_red_neighbors_in_horizontal_directions", "color_to_maroon"], "parent": null}}, "entry": "main"}