{"funs": {"split_input": {"code": "def split_input(input: np.ndarray) -> Tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]:\n    center_x = input.shape[0] // 2\n    center_y = input.shape[1] // 2\n    top_left = input[:center_x, :center_y]\n    top_right = input[:center_x, center_y + 1:]\n    bottom_left = input[center_x + 1:, :center_y]\n    bottom_right = input[center_x + 1:, center_y + 1:]\n    return (top_left, top_right, bottom_left, bottom_right)", "prompt": "Change the input into four new arrays based on the central dividing line in the x and y directions. the outputs do not contains the central dividing line", "subfunctions": [], "parent": "main"}, "find_non_monochrome_array": {"code": "def find_non_monochrome_array(inputs: Tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]) -> np.ndarray:\n    for arr in inputs:\n        if len(np.unique(arr)) > 1:\n            return arr\n    return None", "prompt": "Find an array that doesn't have just one color", "subfunctions": [], "parent": "main"}, "main": {"code": "def main(input):\n    inputs = \"Change the input into four new arrays based on the central dividing line in the x and y directions. the outputs do not contains the central dividing line\"(input)\n    output = \"Find an array that doesn't have just one color\"(inputs)\n    return output", "prompt": null, "subfunctions": ["split_input", "find_non_monochrome_array"], "parent": null}}, "entry": "main"}