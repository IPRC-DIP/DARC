{"funs": {"is_blue_pixel_reached_top": {"code": "def is_blue_pixel_reached_top(input_grid: np.ndarray) -> bool:\n    \"\"\"\n    This function checks if the blue pixel has reached the top of the grid.\n\n    Args:\n    input_grid: A numpy array representing the grid.\n\n    Returns:\n    A boolean value indicating if the blue pixel has reached the top of the grid.\n    \"\"\"\n    return blue in input_grid[0]", "prompt": "Is blue pixel reach the top", "subfunctions": [], "parent": "main"}, "copy_blue_pixel_right_up": {"code": "def copy_blue_pixel_right_up(input_grid: np.ndarray) -> np.ndarray:\n    blue_pixel_position = np.where(input_grid == blue)\n    row, col = (blue_pixel_position[0][0], blue_pixel_position[1][0])\n    while col < input_grid.shape[1] - 1 and row > 0:\n        input_grid[row - 1, col + 1] = blue\n        row, col = (row - 1, col + 1)\n    return input_grid", "prompt": null, "subfunctions": [], "parent": "main"}, "copy_blue_pixel_left_up": {"code": "def copy_blue_pixel_left_up(input_grid: np.ndarray) -> np.ndarray:\n    blue_pixel_position = np.where(input_grid == blue)\n    row, col = (blue_pixel_position[0][0], blue_pixel_position[1][0])\n    while col > 0:\n        input_grid[row - 1, col - 1] = blue\n        row, col = (row - 1, col - 1)\n    return input_grid", "prompt": null, "subfunctions": [], "parent": "main"}, "main": {"code": "def main(input_grid: np.ndarray) -> np.ndarray:\n    flag = \"Is blue pixel reach the top\"(input_grid)\n    while not flag:\n        copy_blue_pixel_right_up(input_grid)\n        copy_blue_pixel_left_up(input_grid)\n        flag = \"Is blue pixel reach the top\"(input_grid)\n    return input_grid", "prompt": null, "subfunctions": ["is_blue_pixel_reached_top", "copy_blue_pixel_right_up", "copy_blue_pixel_left_up"], "parent": null}}, "entry": "main"}