{"funs": {"find_non_black_rows": {"code": "def find_non_black_rows(input_grid: np.ndarray) -> List[int]:\n    rows_index = np.where(np.any(input_grid != black, axis=1))[0]\n    return rows_index.tolist()", "prompt": "find the rows that contain grid other than black and output the number list", "subfunctions": [], "parent": "main"}, "deep_copy": {"code": "def deep_copy(input_grid: np.ndarray) -> np.ndarray:\n    return np.copy(input_grid)", "prompt": "deep copy of input_grid", "subfunctions": [], "parent": "main"}, "update_rightmost_column": {"code": "def update_rightmost_column(input_grid: np.ndarray, output_grid: np.ndarray) -> np.ndarray:\n    non_black_rows = np.where(input_grid[:, -1] != black)[0]\n    output_grid[non_black_rows, -1] = input_grid[non_black_rows, -1]\n    return output_grid", "prompt": "for each grid of rightmost column of the input_gird, if the color is not black, change the color of the grid with the same location in the output_grid to this color", "subfunctions": [], "parent": "main"}, "main": {"code": "def main(input_grid: np.ndarray) -> np.ndarray:\n    rows_index = \"find the rows that contain grid other than black and output the number list\"(input_grid)\n    mod_rows_index = rows_index[:-1]\n    output_grid = \"deep copy of input_grid\"(input_grid)\n    output_grid[mod_rows_index, 1:] = input_grid[mod_rows_index, :-1]\n    output_grid = \"for each grid of rightmost column of the input_gird, if the color is not black, change the color of the grid with the same location in the output_grid to this color\"(input_grid, output_grid)\n    return output_grid", "prompt": null, "subfunctions": ["find_non_black_rows", "deep_copy", "update_rightmost_column"], "parent": null}}, "entry": "main"}