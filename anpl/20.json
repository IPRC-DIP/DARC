{"funs": {"find_major_color": {"code": "def find_major_color(input_grid: np.ndarray) -> int:\n    \"\"\"\n    Given an input grid, this function finds the major color in the grid.\n\n    Args:\n    input_grid: A numpy array representing the input grid.\n\n    Returns:\n    An integer representing the major color in the grid.\n    \"\"\"\n    color_counts = np.bincount(input_grid.flatten())\n    major_color = np.argmax(color_counts)\n    return major_color", "prompt": "find the major color in the input", "subfunctions": [], "parent": "main"}, "find_vertical_line_num": {"code": "def find_vertical_line_num(input_grid: np.ndarray, major_color: int) -> int:\n    \"\"\"\n    Given an input grid and the major color, this function finds the number of grids in the first row that are not of major color.\n\n    Args:\n    input_grid: A numpy array representing the input grid.\n    major_color: An integer representing the major color in the grid.\n\n    Returns:\n    An integer representing the number of grids in the first row that are not of major color.\n    \"\"\"\n    first_row = input_grid[0]\n    return len(first_row) - np.count_nonzero(first_row == major_color)", "prompt": "check the first row of input_grid, the number of grids that are not of major color, is the vertical line number", "subfunctions": [], "parent": "main"}, "find_horizontal_line_num": {"code": "def find_horizontal_line_num(input_grid: np.ndarray, major_color: int) -> int:\n    \"\"\"\n    Given an input grid and the major color, this function finds the number of grids in the first column that are not of major color.\n\n    Args:\n    input_grid: A numpy array representing the input grid.\n    major_color: An integer representing the major color in the grid.\n\n    Returns:\n    An integer representing the number of grids in the first column that are not of major color.\n    \"\"\"\n    first_column = input_grid[:, 0]\n    return len(first_column) - np.count_nonzero(first_column == major_color)", "prompt": "check the first column of the input_grid, the number of grids that are not of major color, is the horizontal line number", "subfunctions": [], "parent": "main"}, "generate_output_grid": {"code": "def generate_output_grid(major_color: int, vertical_line_num: int, horizontal_line_num: int) -> np.ndarray:\n    \"\"\"\n    Given the major color, number of grids in the first row that are not of major color, and number of grids in the first column that are not of major color,\n    this function generates an output grid of size (horizontal_line_num + 1) x (vertical_line_num + 1) where all grids are of major color.\n\n    Args:\n    major_color: An integer representing the major color in the grid.\n    vertical_line_num: An integer representing the number of grids in the first row that are not of major color.\n    horizontal_line_num: An integer representing the number of grids in the first column that are not of major color.\n\n    Returns:\n    A numpy array representing the output grid.\n    \"\"\"\n    output = np.full((horizontal_line_num + 1, vertical_line_num + 1), major_color)\n    return output", "prompt": "output width is vertical_line_num plus 1, output height is horizontal_line_num + 1. output is of major color.", "subfunctions": [], "parent": "main"}, "main": {"code": "def main(input_grid: np.ndarray) -> np.ndarray:\n    major_color = \"find the major color in the input\"(input_grid)\n    vertical_line_num = \"check the first row of input_grid, the number of grids that are not of major color, is the vertical line number\"(input_grid, major_color)\n    horizontal_line_num = \"check the first column of the input_grid, the number of grids that are not of major color, is the horizontal line number\"(input_grid, major_color)\n    output = \"output width is vertical_line_num plus 1, output height is horizontal_line_num + 1. output is of major color.\"(major_color, vertical_line_num, horizontal_line_num)\n    return output", "prompt": null, "subfunctions": ["find_major_color", "find_vertical_line_num", "find_horizontal_line_num", "generate_output_grid"], "parent": null}}, "entry": "main"}