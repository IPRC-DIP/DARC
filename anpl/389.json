{"funs": {"find_gray_pixels": {"code": "def find_gray_pixels(input_grid: np.ndarray) -> List[Tuple[int, int]]:\n    \"\"\"\n    Given an input grid, this function returns a list of all gray pixels in the grid.\n    \"\"\"\n    gray_pixels = np.where(input_grid == grey)\n    return list(zip(gray_pixels[0], gray_pixels[1]))", "prompt": "Given an input grid, this function returns a list of all gray pixels in the grid.", "subfunctions": [], "parent": "symmetric_grid"}, "find_symmetric_pixel": {"code": "def find_symmetric_pixel(input_grid: np.ndarray, x: int, y: int) -> Tuple[int, int]:\n    \"\"\"\n    Given an input grid and a pixel (x,y), this function finds the red pixel (x2,y2) with the absolute distance closest to\n    the pixel among all the red pixels. The symmetric pixel with respect to (x2,y2) is returned.\n    \"\"\"\n    min_dist = float('inf')\n    red_pixels = np.where(input_grid == red)\n    for i in range(len(red_pixels[0])):\n        dist = abs(x - red_pixels[0][i]) + abs(y - red_pixels[1][i])\n        if dist < min_dist:\n            min_dist = dist\n            x2, y2 = (red_pixels[0][i], red_pixels[1][i])\n    x_symmetric = 2 * x2 - x\n    y_symmetric = 2 * y2 - y\n    return (x_symmetric, y_symmetric)", "prompt": "Given an input grid and a pixel (x,y), this function finds the red pixel (x2,y2) with the absolute distance closest to\nthe pixel among all the red pixels. The symmetric pixel with respect to (x2,y2) is returned.", "subfunctions": [], "parent": "symmetric_grid"}, "symmetric_grid": {"code": "def symmetric_grid(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Given an input grid, this function returns a new grid where all gray pixels are replaced with their symmetric pixels\n    with respect to the closest red pixel.\n    \"\"\"\n    ans_grid = np.copy(input_grid)\n    gray_pixels = \"Given an input grid, this function returns a list of all gray pixels in the grid.\"(input_grid)\n    for x, y in gray_pixels:\n        x_symmetric, y_symmetric = \"Given an input grid and a pixel (x,y), this function finds the red pixel (x2,y2) with the absolute distance closest to\nthe pixel among all the red pixels. The symmetric pixel with respect to (x2,y2) is returned.\"(input_grid, x, y)\n        ans_grid[x_symmetric, y_symmetric] = input_grid[x, y]\n        ans_grid[x, y] = black\n    return ans_grid", "prompt": "Given an input grid, this function returns a new grid where all gray pixels are replaced with their symmetric pixels\nwith respect to the closest red pixel.", "subfunctions": ["find_gray_pixels", "find_symmetric_pixel"], "parent": "main"}, "main": {"code": "def main(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    In the input, you should see a n*m grid with multiple color pixels.\n    \"\"\"\n    ans_grid = \"Given an input grid, this function returns a new grid where all gray pixels are replaced with their symmetric pixels\nwith respect to the closest red pixel.\"(input_grid)\n    return ans_grid", "prompt": "In the input, you should see a n*m grid with multiple color pixels.", "subfunctions": ["symmetric_grid"], "parent": null}}, "entry": "main"}