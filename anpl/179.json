{"funs": {"divide_into_4": {"code": "def divide_into_4(input_grid: np.ndarray) -> Tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]:\n    a = input_grid[:4, :4]\n    b = input_grid[:4, 4:]\n    c = input_grid[4:, :4]\n    d = input_grid[4:, 4:]\n    return (a, b, c, d)", "prompt": "The input_grid is an 8x8 matrix, divide it into 4 4x4 matrices and return", "subfunctions": [], "parent": "main"}, "build_black_matrix": {"code": "def build_black_matrix() -> np.ndarray:\n    return np.full((4, 4), black)", "prompt": "Build a 4x4 matrix of black", "subfunctions": [], "parent": "main"}, "replace_color": {"code": "def replace_color(out: np.ndarray, a: np.ndarray) -> np.ndarray:\n    out[:4, :4][a[:4, :4] == yellow] = yellow\n    return out", "prompt": "Replace the color of the corresponding position pixels in out(within the 4x4 range) with yellow pixels color in a", "subfunctions": [], "parent": "main"}, "replace_color_with_maroon": {"code": "def replace_color_with_maroon(out: np.ndarray, d: np.ndarray) -> np.ndarray:\n    out[:4, :4][d[:4, :4] == maroon] = maroon\n    return out", "prompt": "Replace the color of the corresponding position pixels in out(within the 4x4 range) with maroon pixels color in d", "subfunctions": [], "parent": "main"}, "replace_color_with_pink": {"code": "def replace_color_with_pink(out: np.ndarray, c: np.ndarray) -> np.ndarray:\n    out[:4, :4][c[:4, :4] == pink] = pink\n    return out", "prompt": "Replace the color of the corresponding position pixels in out(within the 4x4 range) with pink pixels color in c", "subfunctions": [], "parent": "main"}, "replace_color_with_grey_4x4": {"code": "def replace_color_with_grey_4x4(out: np.ndarray, b: np.ndarray) -> np.array:\n    out[:4, :4][b[:4, :4] != black] = grey\n    return out", "prompt": "There are two 4x4 matrices, replace the color of corresponding positon pixels in out(within the 4x4 range) with grey pixels in b", "subfunctions": [], "parent": "replace_color_with_grey"}, "replace_color_with_grey": {"code": "def replace_color_with_grey(out: np.ndarray, b: np.ndarray) -> np.array:\n    out = \"There are two 4x4 matrices, replace the color of corresponding positon pixels in out(within the 4x4 range) with grey pixels in b\"(out, b)\n    return out", "prompt": null, "subfunctions": ["replace_color_with_grey_4x4"], "parent": "main"}, "main": {"code": "def main(input_grid: np.ndarray) -> np.ndarray:\n    a, b, c, d = \"The input_grid is an 8x8 matrix, divide it into 4 4x4 matrices and return\"(input_grid)\n    out = \"Build a 4x4 matrix of black\"()\n    out = \"Replace the color of the corresponding position pixels in out(within the 4x4 range) with yellow pixels color in a\"(out, a)\n    out = \"Replace the color of the corresponding position pixels in out(within the 4x4 range) with maroon pixels color in d\"(out, d)\n    out = \"Replace the color of the corresponding position pixels in out(within the 4x4 range) with pink pixels color in c\"(out, c)\n    out = replace_color_with_grey(out, b)\n    return out", "prompt": null, "subfunctions": ["divide_into_4", "build_black_matrix", "replace_color", "replace_color_with_maroon", "replace_color_with_pink", "replace_color_with_grey"], "parent": null}}, "entry": "main"}