{"funs": {"get_start_location": {"code": "def get_start_location() -> Tuple[int, int]:\n    return (0, 0)", "prompt": "get the location of top left pixel as a start point", "subfunctions": [], "parent": "main"}, "get_right_direction": {"code": "def get_right_direction() -> Tuple[int, int]:\n    return (0, 1)", "prompt": "direction to the right", "subfunctions": [], "parent": "main"}, "check_green_in_next_two_pixels": {"code": "def check_green_in_next_two_pixels(grid: np.ndarray, loc: Tuple[int, int], dir: Tuple[int, int]) -> bool:\n    row, col = loc\n    next_row, next_col = (row + dir[0], col + dir[1])\n    if not (0 <= next_row < grid.shape[0] and 0 <= next_col < grid.shape[1]):\n        return False\n    if grid[next_row][next_col] == green:\n        return True\n    else:\n        next_row, next_col = (next_row + dir[0], next_col + dir[1])\n        if not (0 <= next_row < grid.shape[0] and 0 <= next_col < grid.shape[1]):\n            return False\n        if grid[next_row][next_col] == green:\n            return True\n    return False", "prompt": null, "subfunctions": [], "parent": "main"}, "is_next_pixel_valid": {"code": "def is_next_pixel_valid(grid: np.ndarray, loc: Tuple[int, int], dir: Tuple[int, int]) -> bool:\n    row, col = loc\n    next_row, next_col = (row + dir[0], col + dir[1])\n    if not (0 <= next_row < grid.shape[0] and 0 <= next_col < grid.shape[1]):\n        return True\n    if grid[next_row][next_col] == green:\n        return True\n    else:\n        next_row, next_col = (next_row + dir[0], next_col + dir[1])\n        if not (0 <= next_row < grid.shape[0] and 0 <= next_col < grid.shape[1]):\n            return False\n        if grid[next_row][next_col] == green:\n            return True\n    return False", "prompt": null, "subfunctions": [], "parent": "follow_direction_if_not_green"}, "change_pixel_to_green_and_get_next_loc": {"code": "def change_pixel_to_green_and_get_next_loc(grid: np.ndarray, loc: Tuple[int, int], dir: Tuple[int, int]) -> Tuple[np.ndarray, Tuple[int, int]]:\n    row, col = loc\n    grid[row][col] = green\n    next_row, next_col = (row + dir[0], col + dir[1])\n    return (grid, (next_row, next_col))", "prompt": "change the pixel to green and get the location of next pixel follow the dir", "subfunctions": [], "parent": "follow_direction_if_not_green"}, "rotate_direction_clockwise": {"code": "def rotate_direction_clockwise(dir: Tuple[int, int]) -> Tuple[int, int]:\n    return (dir[1], -dir[0])", "prompt": null, "subfunctions": [], "parent": "main"}, "follow_direction_if_not_green": {"code": "def follow_direction_if_not_green(grid: np.ndarray, loc: Tuple[int, int], dir: Tuple[int, int]) -> Tuple[np.ndarray, Tuple[int, int], Tuple[int, int]]:\n    while not is_next_pixel_valid(grid, loc, dir):\n        grid, loc = \"change the pixel to green and get the location of next pixel follow the dir\"(grid, loc, dir)\n    return (grid, loc, dir)", "prompt": "follow the dir from the loc, if next pixel is not green", "subfunctions": ["is_next_pixel_valid", "change_pixel_to_green_and_get_next_loc"], "parent": "main"}, "change_pixel_to_green": {"code": "def change_pixel_to_green(grid: np.ndarray, loc: Tuple[int, int]) -> np.ndarray:\n    row, col = loc\n    grid[row][col] = green\n    return grid", "prompt": "change pixel at loc to green", "subfunctions": [], "parent": "main"}, "main": {"code": "def main(input_grid: np.ndarray) -> np.ndarray:\n    loc = \"get the location of top left pixel as a start point\"()\n    dir = \"direction to the right\"()\n    out_grid = input_grid\n    while True:\n        if check_green_in_next_two_pixels(out_grid, loc, dir):\n            break\n        else:\n            while not is_next_pixel_valid(out_grid, loc, dir):\n                out_grid, loc = \"change the pixel to green and get the location of next pixel follow the dir\"(out_grid, loc, dir)\n            dir = rotate_direction_clockwise(dir)\n    if \"follow the dir from the loc, if next pixel is not green\"(out_grid, loc, dir):\n        out_grid = \"change pixel at loc to green\"(out_grid, loc)\n    return out_grid", "prompt": null, "subfunctions": ["get_start_location", "get_right_direction", "check_green_in_next_two_pixels", "is_next_pixel_valid", "change_pixel_to_green_and_get_next_loc", "rotate_direction_clockwise", "follow_direction_if_not_green", "change_pixel_to_green"], "parent": null}}, "entry": "main"}