{"funs": {"find_least_common_color": {"code": "def find_least_common_color(input_grid: np.ndarray) -> int:\n    \"\"\"\n    This function takes an input grid and returns the least common color in the grid.\n    \n    Args:\n    input_grid: A numpy array representing the input grid.\n    \n    Returns:\n    An integer representing the least common color in the grid.\n    \"\"\"\n    unique, counts = np.unique(input_grid, return_counts=True)\n    color_counts = dict(zip(unique, counts))\n    least_common_color = min(color_counts, key=color_counts.get)\n    return least_common_color", "prompt": "find the least common color in the grid", "subfunctions": [], "parent": "main"}, "find_sub_grid_with_color": {"code": "def find_sub_grid_with_color(input_grid: np.ndarray, color: int) -> np.ndarray:\n    \"\"\"\n    This function takes an input grid and a color and returns a sub grid that contains the corresponding color in the grid.\n    \n    Args:\n    input_grid: A numpy array representing the input grid.\n    color: An integer representing the color to be searched in the grid.\n    \n    Returns:\n    A numpy array representing the sub grid that contains the corresponding color in the grid.\n    \"\"\"\n    sub_grid = np.where(input_grid == color, color, -1)\n    sub_grid = sub_grid[sub_grid != -1]\n    sub_grid = sub_grid.reshape(int(len(sub_grid) ** 0.5), int(len(sub_grid) ** 0.5))\n    return sub_grid", "prompt": "find the sub grid that contains the corresponding color in the grid", "subfunctions": [], "parent": "main"}, "main": {"code": "def main(input_grid: np.ndarray) -> np.ndarray:\n    color = \"find the least common color in the grid\"(input_grid)\n    sub_grid = \"find the sub grid that contains the corresponding color in the grid\"(input_grid, color)\n    return sub_grid", "prompt": null, "subfunctions": ["find_least_common_color", "find_sub_grid_with_color"], "parent": null}}, "entry": "main"}