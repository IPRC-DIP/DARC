{"funs": {"all_adjacent_black": {"code": "def all_adjacent_black(input_grid: np.ndarray, i: int, j: int) -> bool:\n    \"\"\"\n    Checks if all eight adjacent points of the given point in input_grid are black.\n\n    Args:\n    input_grid: A numpy array representing the input grid.\n    i: An integer representing the row index of the point.\n    j: An integer representing the column index of the point.\n\n    Returns:\n    A boolean value indicating if all eight adjacent points of the given point in input_grid are black.\n    \"\"\"\n    rows, cols = input_grid.shape\n    adjacent_points = [(i + di, j + dj) for di in [-1, 0, 1] for dj in [-1, 0, 1] if di != 0 or dj != 0]\n    for x, y in adjacent_points:\n        if x >= 0 and x < rows and (y >= 0) and (y < cols) and (input_grid[x][y] != black):\n            return False\n    return True", "prompt": "all eight adjacent points of this point in input_grid are black", "subfunctions": [], "parent": "main"}, "color_to_black": {"code": "def color_to_black(input_grid: np.ndarray, i: int, j: int) -> np.ndarray:\n    \"\"\"\n    Colors the given point in input_grid to black.\n\n    Args:\n    input_grid: A numpy array representing the input grid.\n    i: An integer representing the row index of the point.\n    j: An integer representing the column index of the point.\n\n    Returns:\n    A numpy array with the given point colored black.\n    \"\"\"\n    input_grid[i][j] = black\n    return input_grid", "prompt": "color this point to black", "subfunctions": [], "parent": "main"}, "main": {"code": "def main(input_grid: np.ndarray) -> np.ndarray:\n    for i in range(input_grid.shape[0]):\n        for j in range(input_grid.shape[1]):\n            if \"all eight adjacent points of this point in input_grid are black\"(input_grid, i, j):\n                input_grid = \"color this point to black\"(input_grid, i, j)\n    return input_grid", "prompt": null, "subfunctions": ["all_adjacent_black", "color_to_black"], "parent": null}}, "entry": "main"}