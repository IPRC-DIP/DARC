{"funs": {"get_blue_positions": {"code": "def get_blue_positions(input_grid: np.ndarray) -> List[Tuple[int, int]]:\n    positions = []\n    for i in range(input_grid.shape[0]):\n        for j in range(input_grid.shape[1]):\n            if input_grid[i][j] == blue:\n                positions.append((i, j))\n    return positions", "prompt": "get all positions which is colored as blue", "subfunctions": [], "parent": "main"}, "get_adjacent_black_positions": {"code": "def get_adjacent_black_positions(input_grid: np.ndarray, position: Tuple[int, int]) -> List[Tuple[int, int]]:\n    adjacent_positions = []\n    row, col = position\n    if row > 0 and input_grid[row - 1][col] == black:\n        adjacent_positions.append((row - 1, col))\n    if row < input_grid.shape[0] - 1 and input_grid[row + 1][col] == black:\n        adjacent_positions.append((row + 1, col))\n    if col > 0 and input_grid[row][col - 1] == black:\n        adjacent_positions.append((row, col - 1))\n    if col < input_grid.shape[1] - 1 and input_grid[row][col + 1] == black:\n        adjacent_positions.append((row, col + 1))\n    return adjacent_positions", "prompt": "turn positions that is four connected to the input position, and its color is black", "subfunctions": [], "parent": "main"}, "color_all_blue": {"code": "def color_all_blue(input_grid: np.ndarray, positions: List[Tuple[int, int]]) -> np.ndarray:\n    for position in positions:\n        input_grid[position] = blue\n    return input_grid", "prompt": "color every position in the second input of the grid as blue", "subfunctions": [], "parent": "main"}, "main": {"code": "def main(input_grid):\n    positions = \"get all positions which is colored as blue\"(input_grid)\n    output = np.copy(input_grid)\n    while len(positions) > 0:\n        position = positions.pop()\n        adjacent = \"turn positions that is four connected to the input position, and its color is black\"(output, position)\n        positions += adjacent\n        output = \"color every position in the second input of the grid as blue\"(output, adjacent)\n    return output", "prompt": null, "subfunctions": ["get_blue_positions", "get_adjacent_black_positions", "color_all_blue"], "parent": null}}, "entry": "main"}