{"funs": {"find_grey_pixels": {"code": "def find_grey_pixels(input_grid: np.ndarray) -> List[Tuple[int, int]]:\n    \"\"\"\n    Given an input grid, returns a list of tuples representing the indices of all grey pixels in the grid.\n    \n    Parameters:\n    input_grid (np.ndarray): A numpy array representing the input grid.\n    \n    Returns:\n    List[Tuple[int, int]]: A list of tuples representing the indices of all grey pixels in the grid.\n    \"\"\"\n    grey_pixels = []\n    for i in range(input_grid.shape[0]):\n        for j in range(input_grid.shape[1]):\n            if input_grid[i][j] == grey:\n                grey_pixels.append((i, j))\n    return grey_pixels", "prompt": "find_grey_pixels", "subfunctions": [], "parent": "main"}, "find_red_pixels": {"code": "def find_red_pixels(input_grid: np.ndarray) -> List[Tuple[int, int]]:\n    \"\"\"\n    Given an input grid, returns a list of tuples representing the indices of all red pixels in the grid.\n    \n    Parameters:\n    input_grid (np.ndarray): A numpy array representing the input grid.\n    \n    Returns:\n    List[Tuple[int, int]]: A list of tuples representing the indices of all red pixels in the grid.\n    \"\"\"\n    red_pixels = []\n    for i in range(input_grid.shape[0]):\n        for j in range(input_grid.shape[1]):\n            if input_grid[i][j] == red:\n                red_pixels.append((i, j))\n    return red_pixels", "prompt": "find_red_pixels", "subfunctions": [], "parent": "main"}, "move_grey_pixel_to_nearest_red_pixel": {"code": "def move_grey_pixel_to_nearest_red_pixel(input_grid: np.ndarray, grey_pixels: List[Tuple[int, int]], red_pixels: List[Tuple[int, int]]) -> np.ndarray:\n    \"\"\"                                                                                                                                                                   \n    Given an input grid, a list of grey pixels and a list of red pixels, this function moves each grey pixel to its nearest red pixel until they touch each other.        \n                                                                                                                                                                          \n    Args:                                                                                                                                                                 \n    - input_grid: a numpy ndarray representing the input grid                                                                                                             \n    - grey_pixels: a list of tuples containing the indices of all grey pixels in the grid.                                                                                \n    - red_pixels: a list of tuples containing the indices of all red pixels in the grid.                                                                                  \n                                                                                                                                                                          \n    Returns:                                                                                                                                                              \n    - A numpy ndarray representing the output grid.                                                                                                                       \n    \"\"\"\n    output_grid = input_grid.copy()\n    for grey_pixel in grey_pixels:\n        min_distance = float('inf')\n        nearest_red_pixel = None\n        for red_pixel in red_pixels:\n            distance = np.sqrt((grey_pixel[0] - red_pixel[0]) ** 2 + (grey_pixel[1] - red_pixel[1]) ** 2)\n            if distance < min_distance:\n                min_distance = distance\n                nearest_red_pixel = red_pixel\n        output_grid[grey_pixel[0]][grey_pixel[1]] = black\n        if nearest_red_pixel[0] == grey_pixel[0]:\n            if grey_pixel[1] < nearest_red_pixel[1]:\n                output_grid[nearest_red_pixel[0]][nearest_red_pixel[1] - 1] = grey\n            else:\n                output_grid[nearest_red_pixel[0]][nearest_red_pixel[1] + 1] = grey\n        elif nearest_red_pixel[1] == grey_pixel[1]:\n            if grey_pixel[0] < nearest_red_pixel[0]:\n                output_grid[nearest_red_pixel[0] - 1][nearest_red_pixel[1]] = grey\n            else:\n                output_grid[nearest_red_pixel[0] + 1][nearest_red_pixel[1]] = grey\n        elif grey_pixel[0] < nearest_red_pixel[0] and grey_pixel[1] < nearest_red_pixel[1]:\n            output_grid[nearest_red_pixel[0] - 1][nearest_red_pixel[1] - 1] = grey\n        elif grey_pixel[0] < nearest_red_pixel[0] and grey_pixel[1] > nearest_red_pixel[1]:\n            output_grid[nearest_red_pixel[0] - 1][nearest_red_pixel[1] + 1] = grey\n        elif grey_pixel[0] > nearest_red_pixel[0] and grey_pixel[1] < nearest_red_pixel[1]:\n            output_grid[nearest_red_pixel[0] + 1][nearest_red_pixel[1] - 1] = grey\n        elif grey_pixel[0] > nearest_red_pixel[0] and grey_pixel[1] > nearest_red_pixel[1]:\n            output_grid[nearest_red_pixel[0] + 1][nearest_red_pixel[1] + 1] = grey\n    return output_grid", "prompt": "Given an input grid, a list of grey pixels and a list of red pixels, this function moves each grey pixel to its nearest red pixel until they touch each other.        \n                                                                                                                                                                      \nArgs:                                                                                                                                                                 \n- input_grid: a numpy ndarray representing the input grid                                                                                                             \n- grey_pixels: a list of tuples containing the indices of all grey pixels in the grid.                                                                                \n- red_pixels: a list of tuples containing the indices of all red pixels in the grid.                                                                                  \n                                                                                                                                                                      \nReturns:                                                                                                                                                              \n- A numpy ndarray representing the output grid.                                                                                                                       ", "subfunctions": [], "parent": "main"}, "main": {"code": "def main(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"                                                                                                                                                                   \n    in the input grid, you can see grey pixels and red pixels.                                                                                                            \n    the output grid is the same size as the input grid.                                                                                                                   \n    to make the output, you should move each grey pixel to its nearest red pixels until they touch each other.\n    if the grey pixel and its nearest red pixel are on the same row or column, you should move vertically or horizontally\n    if the grey pixel and its nearest red pixel are on the same diagonal, you should move diagonal                                            \n    \"\"\"\n    output_grid = input_grid.copy()\n    grey_pixels = \"find_grey_pixels\"(input_grid)\n    red_pixels = \"find_red_pixels\"(input_grid)\n    output_grid = \"Given an input grid, a list of grey pixels and a list of red pixels, this function moves each grey pixel to its nearest red pixel until they touch each other.        \n                                                                                                                                                                      \nArgs:                                                                                                                                                                 \n- input_grid: a numpy ndarray representing the input grid                                                                                                             \n- grey_pixels: a list of tuples containing the indices of all grey pixels in the grid.                                                                                \n- red_pixels: a list of tuples containing the indices of all red pixels in the grid.                                                                                  \n                                                                                                                                                                      \nReturns:                                                                                                                                                              \n- A numpy ndarray representing the output grid.                                                                                                                       \"(input_grid, grey_pixels, red_pixels)\n    return output_grid", "prompt": "in the input grid, you can see grey pixels and red pixels.                                                                                                            \nthe output grid is the same size as the input grid.                                                                                                                   \nto make the output, you should move each grey pixel to its nearest red pixels until they touch each other.\nif the grey pixel and its nearest red pixel are on the same row or column, you should move vertically or horizontally\nif the grey pixel and its nearest red pixel are on the same diagonal, you should move diagonal                                            ", "subfunctions": ["find_grey_pixels", "find_red_pixels", "move_grey_pixel_to_nearest_red_pixel"], "parent": null}}, "entry": "main"}