{"funs": {"find_boundaries": {"code": "def find_boundaries(input_grid: np.ndarray) -> Tuple[int, int, int, int]:\n    \"\"\"\n    Given an input grid, this function returns the upper, lower, left and right boundaries of the non-black pixels.\n\n    Args:\n    input_grid: A numpy array representing the input grid.\n\n    Returns:\n    A tuple containing the upper, lower, left and right boundaries of the non-black pixels.\n    \"\"\"\n    rows, cols = input_grid.shape\n    upper = rows\n    lower = 0\n    left = cols\n    right = 0\n    for i in range(rows):\n        for j in range(cols):\n            if input_grid[i][j] != black:\n                upper = min(upper, i)\n                lower = max(lower, i)\n                left = min(left, j)\n                right = max(right, j)\n    return (upper, lower, left, right)", "prompt": "Find the upper, lower, left, right boundaries of the non-black pixels", "subfunctions": [], "parent": "main"}, "turn_black_to_red": {"code": "def turn_black_to_red(upper: int, lower: int, left: int, right: int, input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Given an input grid, this function turns all black pixels in the given range into red.\n\n    Args:\n    upper: An integer representing the upper boundary of the range.\n    lower: An integer representing the lower boundary of the range.\n    left: An integer representing the left boundary of the range.\n    right: An integer representing the right boundary of the range.\n    input_grid: A numpy array representing the input grid.\n\n    Returns:\n    A numpy array representing the output grid with all black pixels in the given range turned into red.\n    \"\"\"\n    output_grid = np.copy(input_grid)\n    for i in range(upper, lower + 1):\n        for j in range(left, right + 1):\n            if input_grid[i][j] == black:\n                output_grid[i][j] = red\n    return output_grid", "prompt": "Turn all black pixels in this upper, lower, left, right range into red", "subfunctions": [], "parent": "main"}, "main": {"code": "def main(input_grid: np.ndarray) -> np.ndarray:\n    upper, lower, left, right = \"Find the upper, lower, left, right boundaries of the non-black pixels\"(input_grid)\n    output_grid = \"Turn all black pixels in this upper, lower, left, right range into red\"(upper, lower, left, right, input_grid)\n    return output_grid", "prompt": null, "subfunctions": ["find_boundaries", "turn_black_to_red"], "parent": null}}, "entry": "main"}