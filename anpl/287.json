{"funs": {"identity": {"code": "def identity(input_grid: np.ndarray) -> np.ndarray:\n    return input_grid", "prompt": "same as input grid", "subfunctions": [], "parent": "main"}, "find_penultimate_positions": {"code": "def find_penultimate_positions(input_grid: np.ndarray) -> Tuple[Tuple[int, int], Tuple[int, int]]:\n    penultimate_line = input_grid[-2]\n    first_pos = (len(penultimate_line) - 1, 0)\n    last_pos = (len(penultimate_line) - 1, len(penultimate_line) - 1)\n    for i in range(len(penultimate_line)):\n        if penultimate_line[i] != black:\n            first_pos = (len(penultimate_line) - 2, i)\n            break\n    for i in range(len(penultimate_line) - 1, -1, -1):\n        if penultimate_line[i] != black:\n            last_pos = (len(penultimate_line) - 2, i)\n            break\n    return (first_pos, last_pos)", "prompt": "find the frist and last non black element in Penultimate line of input grid, return their positions", "subfunctions": [], "parent": "main"}, "find_element": {"code": "def find_element(input_grid: np.ndarray, position: Tuple[int, int]) -> int:\n    return input_grid[position[0] + 1][position[1]]", "prompt": "find the element under the input position in input grid", "subfunctions": [], "parent": "set_element_to_color_of_first_element_of_last_line"}, "set_line_upper_left": {"code": "def set_line_upper_left(input_grid: np.ndarray, position: Tuple[int, int], color: int) -> np.ndarray:\n    for i in range(position[1], -1, -1):\n        if input_grid[position[0]][i] != color:\n            input_grid[position[0] - position[1] + i][i] = color\n        else:\n            break\n    return input_grid", "prompt": "set the line in upper-left direction of input position in input grid to input color. do not set the position in input position to the input color", "subfunctions": [], "parent": "main"}, "set_line_upper_right": {"code": "def set_line_upper_right(input_grid: np.ndarray, position: Tuple[int, int], color: int) -> np.ndarray:\n    for i in range(position[1], len(input_grid)):\n        if input_grid[position[0]][i] != color:\n            input_grid[position[0] - (i - position[1])][i] = color\n        else:\n            break\n    return input_grid", "prompt": "set the line in upper-right direction of input position in input grid to input color. do not set the position in input position to the input color", "subfunctions": [], "parent": "main"}, "set_element_to_color_of_first_element_of_last_line": {"code": "def set_element_to_color_of_first_element_of_last_line(input_grid: np.ndarray, positions: Tuple[Tuple[int, int], Tuple[int, int]]) -> np.ndarray:\n    color = \"find the element under the input position in input grid\"(input_grid, positions[0])\n    for i in range(positions[0][0], positions[1][0] + 1):\n        for j in range(positions[0][1], positions[1][1] + 1):\n            if input_grid[i][j] == color:\n                input_grid[i][j] = input_grid[-1][0]\n    return input_grid", "prompt": "set the element in input positions of input grid to color of first element of last line in input grid", "subfunctions": ["find_element"], "parent": "main"}, "main": {"code": "def main(input_grid: np.ndarray) -> np.ndarray:\n    output_grid = \"same as input grid\"(input_grid)\n    position_first, position_last = \"find the frist and last non black element in Penultimate line of input grid, return their positions\"(input_grid)\n    color = \"find the element under the input position in input grid\"(input_grid, position_first)\n    output_grid = \"set the line in upper-left direction of input position in input grid to input color. do not set the position in input position to the input color\"(output_grid, position_first, color)\n    output_grid = \"set the line in upper-right direction of input position in input grid to input color. do not set the position in input position to the input color\"(output_grid, position_last, color)\n    output_grid = \"set the element in input positions of input grid to color of first element of last line in input grid\"(output_grid, (position_first, position_last))\n    return output_grid", "prompt": null, "subfunctions": ["identity", "find_penultimate_positions", "find_element", "set_line_upper_left", "set_line_upper_right", "set_element_to_color_of_first_element_of_last_line"], "parent": null}}, "entry": "main"}