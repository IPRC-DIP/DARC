{"funs": {"find_red_matrix_size": {"code": "def find_red_matrix_size(grid: np.ndarray) -> Tuple[int, int]:\n    red_indices = np.where(grid == red)\n    rows = np.unique(red_indices[0]).size\n    columns = np.unique(red_indices[1]).size\n    return (rows, columns)", "prompt": " Find the number of rows and columns of the red squares matrix ", "subfunctions": [], "parent": "main"}, "find_yellow_matrix_size": {"code": "def find_yellow_matrix_size(grid: np.ndarray) -> Tuple[int, int]:\n    yellow_indices = np.where(grid == yellow)\n    rows = np.unique(yellow_indices[0]).size\n    columns = np.unique(yellow_indices[1]).size\n    return (rows, columns)", "prompt": " Find the number of rows and columns of the yellow squares matrix ", "subfunctions": [], "parent": "main"}, "find_blue_matrix_size": {"code": "def find_blue_matrix_size(grid: np.ndarray) -> Tuple[int, int]:\n    blue_indices = np.where(grid == blue)\n    rows = np.unique(blue_indices[0]).size\n    columns = np.unique(blue_indices[1]).size\n    return (rows, columns)", "prompt": " Find the number of rows and columns of the blue squares matrix ", "subfunctions": [], "parent": "main"}, "move_red_squares_up": {"code": "def move_red_squares_up(grid: np.ndarray, num_rows: int) -> np.ndarray:\n    red_indices = np.where(grid == red)\n    red_rows = red_indices[0]\n    red_columns = red_indices[1]\n    for i in range(len(red_rows)):\n        if red_rows[i] - num_rows >= 0:\n            grid[red_rows[i]][red_columns[i]] = 0\n            grid[red_rows[i] - num_rows][red_columns[i]] = red\n    return grid", "prompt": " Move up the red squares matrix as a whole by the number of the input", "subfunctions": [], "parent": "main"}, "move_yellow_matrix_up": {"code": "def move_yellow_matrix_up(grid: np.ndarray, num_rows: int) -> np.ndarray:\n    yellow_indices = np.where(grid == yellow)\n    yellow_rows = yellow_indices[0]\n    yellow_columns = yellow_indices[1]\n    min_row = np.min(yellow_rows)\n    max_row = np.max(yellow_rows)\n    if min_row - num_rows >= 0:\n        for i in range(len(yellow_rows)):\n            grid[yellow_rows[i]][yellow_columns[i]] = 0\n            grid[yellow_rows[i] - num_rows][yellow_columns[i]] = yellow\n    else:\n        for i in range(len(yellow_rows)):\n            grid[yellow_rows[i]][yellow_columns[i]] = 0\n            grid[yellow_rows[i] + max_row - min_row + 1][yellow_columns[i]] = yellow\n    return grid", "prompt": " Move up the yellow squares matrix as a whole by the number of the input", "subfunctions": [], "parent": "main"}, "move_blue_matrix_up": {"code": "def move_blue_matrix_up(grid: np.ndarray, num_rows: int) -> np.ndarray:\n    blue_indices = np.where(grid == blue)\n    blue_rows = blue_indices[0]\n    blue_columns = blue_indices[1]\n    min_row = np.min(blue_rows)\n    max_row = np.max(blue_rows)\n    if min_row - num_rows >= 0:\n        for i in range(len(blue_rows)):\n            grid[blue_rows[i]][blue_columns[i]] = 0\n            grid[blue_rows[i] - num_rows][blue_columns[i]] = blue\n    else:\n        for i in range(len(blue_rows)):\n            grid[blue_rows[i]][blue_columns[i]] = 0\n            grid[blue_rows[i] + max_row - min_row + 1][blue_columns[i]] = blue\n    return grid", "prompt": " Move up the blue squares matrix as a whole by the number of the input", "subfunctions": [], "parent": "main"}, "turn_gray_squares_to_black": {"code": "def turn_gray_squares_to_black(grid: np.ndarray) -> np.ndarray:\n    gray_indices = np.where(grid == grey)\n    gray_rows = gray_indices[0]\n    gray_columns = gray_indices[1]\n    for i in range(len(gray_rows)):\n        grid[gray_rows[i]][gray_columns[i]] = black\n    return grid", "prompt": " Turn all gray squares to black", "subfunctions": [], "parent": "main"}, "main": {"code": "def main(input_grid: np.ndarray) -> np.ndarray:\n    output_grid = np.copy(input_grid)\n    red_row, red_column = \" Find the number of rows and columns of the red squares matrix \"(output_grid)\n    yellow_row, yellow_column = \" Find the number of rows and columns of the yellow squares matrix \"(output_grid)\n    blue_row, blue_column = \" Find the number of rows and columns of the blue squares matrix \"(output_grid)\n    output_grid = \" Move up the red squares matrix as a whole by the number of the input\"(output_grid, red_row)\n    output_grid = \" Move up the yellow squares matrix as a whole by the number of the input\"(output_grid, yellow_row)\n    output_grid = \" Move up the blue squares matrix as a whole by the number of the input\"(output_grid, blue_row)\n    output_grid = \" Turn all gray squares to black\"(output_grid)\n    return output_grid", "prompt": null, "subfunctions": ["find_red_matrix_size", "find_yellow_matrix_size", "find_blue_matrix_size", "move_red_squares_up", "move_yellow_matrix_up", "move_blue_matrix_up", "turn_gray_squares_to_black"], "parent": null}}, "entry": "main"}