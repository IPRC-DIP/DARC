{"funs": {"find_middle_point": {"code": "def find_middle_point(input_grid: np.ndarray) -> Tuple[int, int]:\n    \"\"\"\n    Given a 2D numpy array, find the middle point of two blue pixels in the grid.\n    \n    Args:\n    input_grid: A 2D numpy array representing the input grid.\n    \n    Returns:\n    A tuple of two integers representing the middle point of two blue pixels in the grid.\n    \"\"\"\n    rows, cols = input_grid.shape\n    blue_pixels = []\n    for i in range(rows):\n        for j in range(cols):\n            if input_grid[i][j] == blue:\n                blue_pixels.append((i, j))\n    (x1, y1), (x2, y2) = blue_pixels\n    x = (x1 + x2) // 2\n    y = (y1 + y2) // 2\n    return (x, y)", "prompt": "find the middle point of two blue pixels in the grid", "subfunctions": [], "parent": "main"}, "draw_green_cross": {"code": "def draw_green_cross(input_grid: np.ndarray, x: int, y: int) -> np.ndarray:\n    \"\"\"\n    Given a 2D numpy array, draw a green cross of length 3 centered on (x,y).\n    \n    Args:\n    input_grid: A 2D numpy array representing the input grid.\n    x: An integer representing the x-coordinate of the center of the cross.\n    y: An integer representing the y-coordinate of the center of the cross.\n    \n    Returns:\n    A 2D numpy array representing the output grid with the green cross drawn on it.\n    \"\"\"\n    output_grid = input_grid.copy()\n    output_grid[x, y - 1:y + 2] = green\n    output_grid[x - 1:x + 2, y] = green\n    return output_grid", "prompt": "draw a grenn cross of length 3 centered on (x,y)", "subfunctions": [], "parent": "main"}, "main": {"code": "def main(input_grid: np.ndarray) -> np.ndarray:\n    x, y = \"find the middle point of two blue pixels in the grid\"(input_grid)\n    output_grid = \"draw a grenn cross of length 3 centered on (x,y)\"(input_grid, x, y)\n    return output_grid", "prompt": null, "subfunctions": ["find_middle_point", "draw_green_cross"], "parent": null}}, "entry": "main"}