{"funs": {"count_non_black_pixels": {"code": "def count_non_black_pixels(input_grid: np.ndarray) -> int:\n    return np.count_nonzero(input_grid != black)", "prompt": "count the number of non_black_pixels in the input_grid", "subfunctions": [], "parent": "main"}, "main": {"code": "def main(input_grid: np.ndarray) -> np.ndarray:\n    num_non_black = \"count the number of non_black_pixels in the input_grid\"(input_grid)\n    output_grid = np.zeros_like(input_grid)\n    if num_non_black <= 3:\n        output_grid[0, :num_non_black] = red\n    else:\n        output_grid[0, :] = red\n        output_grid[1, 1] = red\n    return output_grid", "prompt": null, "subfunctions": ["count_non_black_pixels"], "parent": null}}, "entry": "main"}