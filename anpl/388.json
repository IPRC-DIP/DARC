{"funs": {"get_color": {"code": "def get_color(input_grid: np.ndarray) -> int:\n    colors, counts = np.unique(input_grid, return_counts=True)\n    color_counts = dict(zip(colors, counts))\n    color_counts.pop(grey, None)\n    return max(color_counts, key=color_counts.get)", "prompt": "Get the color of the input_grid (except for grey)", "subfunctions": [], "parent": "main"}, "find_special_color_pixels": {"code": "def find_special_color_pixels(special_color: int, input_grid: np.ndarray) -> List[Tuple[int, int]]:\n    special_color_pixels = []\n    for i in range(input_grid.shape[0]):\n        for j in range(input_grid.shape[1]):\n            if input_grid[i][j] == special_color:\n                special_color_pixels.append((i, j))\n    return special_color_pixels", "prompt": "Find all the special color pixles from the input_grid", "subfunctions": [], "parent": "main"}, "change_grey_to_color": {"code": "def change_grey_to_color(input_grid: np.ndarray, color: int) -> np.ndarray:\n    output_grid = input_grid.copy()\n    output_grid[output_grid == grey] = color\n    return output_grid", "prompt": "Change the output_grid's grey pixel to color", "subfunctions": [], "parent": "main"}, "change_color_pixels_to_black": {"code": "def change_color_pixels_to_black(input_grid: np.ndarray, color_pixels: List[Tuple[int, int]]) -> np.ndarray:\n    output_grid = input_grid.copy()\n    for pixel in color_pixels:\n        output_grid[pixel] = black\n    return output_grid", "prompt": "Change the output_grid's color_pixels to black", "subfunctions": [], "parent": "main"}, "main": {"code": "def main(input_grid: np.ndarray) -> np.ndarray:\n    special_color = \"Get the color of the input_grid (except for grey)\"(input_grid)\n    color_pixels = \"Find all the special color pixles from the input_grid\"(special_color, input_grid)\n    output_grid = input_grid.copy()\n    output_grid = \"Change the output_grid's grey pixel to color\"(output_grid, special_color)\n    output_grid = \"Change the output_grid's color_pixels to black\"(output_grid, color_pixels)\n    return output_grid", "prompt": null, "subfunctions": ["get_color", "find_special_color_pixels", "change_grey_to_color", "change_color_pixels_to_black"], "parent": null}}, "entry": "main"}