{"funs": {"fill_between_equal": {"code": "def fill_between_equal(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Given a 2D numpy array, this function iterates through each row, and if the row has two equal non-zero elements,\n    sets the values between them to all equal to this equal value.\n\n    Args:\n    input_grid: A 2D numpy array of integers.\n\n    Returns:\n    A 2D numpy array of integers with the values between equal non-zero elements in each row set to the same value.\n    \"\"\"\n    for row in input_grid:\n        non_zero_indices = np.nonzero(row)[0]\n        for i in range(len(non_zero_indices) - 1):\n            if row[non_zero_indices[i]] == row[non_zero_indices[i + 1]]:\n                row[non_zero_indices[i] + 1:non_zero_indices[i + 1]] = row[non_zero_indices[i]]\n    return input_grid", "prompt": "Iterate through each row, and if the row has two equal non-zero elements, set the values between them to all equal to this equal value", "subfunctions": [], "parent": "main"}, "fill_between_equal_columns": {"code": "def fill_between_equal_columns(input_grid: np.ndarray) -> np.ndarray:\n    for col in input_grid.T:\n        non_zero_indices = np.nonzero(col)[0]\n        for i in range(len(non_zero_indices) - 1):\n            for i in range(1, len(col[non_zero_indices])):\n                if col[non_zero_indices[0]] == col[non_zero_indices[i]]:\n                    col[non_zero_indices[0] + 1:non_zero_indices[i]] = col[non_zero_indices[0]]\n    return input_grid", "prompt": null, "subfunctions": [], "parent": "main"}, "main": {"code": "def main(input_grid: np.ndarray) -> np.ndarray:\n    output = \"Iterate through each row, and if the row has two equal non-zero elements, set the values between them to all equal to this equal value\"(input_grid)\n    output = fill_between_equal_columns(input_grid)\n    return output", "prompt": null, "subfunctions": ["fill_between_equal", "fill_between_equal_columns"], "parent": null}}, "entry": "main"}