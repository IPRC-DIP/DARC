{"funs": {"find_color": {"code": "def find_color(grid: np.ndarray) -> int:\n    \"\"\"\n    Given a grid, this function finds the color of the line in the grid.\n    \n    Args:\n    1. grid: np.ndarray - A numpy array representing the input grid.\n    \n    Returns:\n    An integer representing the color of the line.\n    \"\"\"\n    for color in range(10):\n        if color != black:\n            for i in range(grid.shape[0]):\n                row = grid[i, :]\n                col = grid[:, i]\n                if np.all(row == color) or np.all(col == color):\n                    return color\n    return black", "prompt": "for all not black color, if any line or column is all in it, return the color", "subfunctions": [], "parent": "main"}, "find_pixels_in_color": {"code": "def find_pixels_in_color(grid: np.ndarray, color: int) -> List[Tuple[int, int]]:\n    \"\"\"\n    Given a grid and a color, this function returns a list of tuples representing the indices of all pixels in the grid\n    that have the given color.\n    \n    Args:\n    1. grid: np.ndarray - A numpy array representing the input grid.\n    2. color: int - An integer representing the color to search for.\n    \n    Returns:\n    A list of tuples representing the indices of all pixels in the grid that have the given color.\n    \"\"\"\n    pixels = []\n    for i in range(grid.shape[0]):\n        for j in range(grid.shape[1]):\n            if grid[i][j] == color:\n                pixels.append((i, j))\n    return pixels", "prompt": "find all pixels in the color", "subfunctions": [], "parent": "color_between_same_color_pixels"}, "color_pixels_between_same_color_pixels": {"code": "def color_pixels_between_same_color_pixels(grid: np.ndarray, pixels: List[Tuple[int, int]], color: int) -> np.ndarray:\n    \"\"\"\n    Given a grid, a list of pixels and a color, this function turns all black pixels between any two pixels in the list\n    that are in the same row or column into the given color.\n    \n    Args:\n    1. grid: np.ndarray - A numpy array representing the input grid.\n    2. pixels: List[Tuple[int, int]] - A list of tuples representing the indices of pixels.\n    3. color: int - An integer representing the color to turn the pixels into.\n    \n    Returns:\n    A numpy array representing the updated grid.\n    \"\"\"\n    for i in range(len(pixels)):\n        for j in range(i + 1, len(pixels)):\n            if pixels[i][0] == pixels[j][0]:\n                for k in range(min(pixels[i][1], pixels[j][1]) + 1, max(pixels[i][1], pixels[j][1])):\n                    if grid[pixels[i][0]][k] == black:\n                        grid[pixels[i][0]][k] = color\n            elif pixels[i][1] == pixels[j][1]:\n                for k in range(min(pixels[i][0], pixels[j][0]) + 1, max(pixels[i][0], pixels[j][0])):\n                    if grid[k][pixels[i][1]] == black:\n                        grid[k][pixels[i][1]] = color\n    return grid", "prompt": "For any 2 pixels in p, if they are in same row or column, turn all black pixels between them in to this color", "subfunctions": [], "parent": "color_between_same_color_pixels"}, "color_between_same_color_pixels": {"code": "def color_between_same_color_pixels(grid: np.ndarray, line_color: int) -> np.ndarray:\n    for color in range(10):\n        if color != black and color != line_color:\n            p = \"find all pixels in the color\"(grid, color)\n            grid = \"For any 2 pixels in p, if they are in same row or column, turn all black pixels between them in to this color\"(grid, p, color)\n    return grid", "prompt": null, "subfunctions": ["find_pixels_in_color", "color_pixels_between_same_color_pixels"], "parent": "main"}, "main": {"code": "def main(input_grid: np.ndarray) -> np.ndarray:\n    line = \"for all not black color, if any line or column is all in it, return the color\"(input_grid)\n    out = color_between_same_color_pixels(input_grid, line)\n    return out", "prompt": null, "subfunctions": ["find_color", "color_between_same_color_pixels"], "parent": null}}, "entry": "main"}