{"funs": {"find_first_last_non_black_pixel": {"code": "def find_first_last_non_black_pixel(input_grid: np.ndarray) -> Tuple[int, int, int, int]:\n    \"\"\"\n    From left to right, top to bottom, traverse the entire grid, find the first non-black pixel (x1, y1), \n    the last non-black pixel (x2, y2), return (x1, y1, x2, y2)\n    \"\"\"\n    n = input_grid.shape[0]\n    x1, y1, x2, y2 = (n, n, -1, -1)\n    for i in range(n):\n        for j in range(n):\n            if input_grid[i, j] != black:\n                x1 = min(x1, i)\n                y1 = min(y1, j)\n                x2 = max(x2, i)\n                y2 = max(y2, j)\n    return (x1, y1, x2, y2)", "prompt": "From left to right, top to bottom, traverse the entire grid, find the first non-black pixel (x1, y1), the last non-black pixel (x2, y2), return (x1, y1, x2, y2)", "subfunctions": [], "parent": "main"}, "extract_subgrid": {"code": "def extract_subgrid(input_grid: np.ndarray, x1: int, y1: int, x2: int, y2: int) -> np.ndarray:\n    \"\"\"\n    Extract the subgrid with (x1+1, y1+1) as the upper left corner and (x2-1, y2-1) as the lower right corner, and return the grid\n    \"\"\"\n    return input_grid[x1 + 1:x2, y1 + 1:y2]", "prompt": "Extract the subgrid with (x1+1, y1+1) as the upper left corner and (x2-1, y2-1) as the lower right corner, and return the grid", "subfunctions": [], "parent": "main"}, "change_non_black_pixels_to_color": {"code": "def change_non_black_pixels_to_color(grid: np.ndarray, color: int) -> np.ndarray:\n    \"\"\"\n    Change all non-black pixels in grid to color\n    \"\"\"\n    mask = grid != black\n    grid[mask] = color\n    return grid", "prompt": "Change all non-black pixels in ans_grid to color", "subfunctions": [], "parent": "main"}, "main": {"code": "def main(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    In the input, you should see a n*n grid with multiple color pixels.\n    \"\"\"\n    x1, y1, x2, y2 = \"From left to right, top to bottom, traverse the entire grid, find the first non-black pixel (x1, y1), the last non-black pixel (x2, y2), return (x1, y1, x2, y2)\"(input_grid)\n    ans_grid = \"Extract the subgrid with (x1+1, y1+1) as the upper left corner and (x2-1, y2-1) as the lower right corner, and return the grid\"(input_grid, x1, y1, x2, y2)\n    color = input_grid[x1, y1]\n    ans_grid = \"Change all non-black pixels in ans_grid to color\"(ans_grid, color)\n    return ans_grid", "prompt": "In the input, you should see a n*n grid with multiple color pixels.", "subfunctions": ["find_first_last_non_black_pixel", "extract_subgrid", "change_non_black_pixels_to_color"], "parent": null}}, "entry": "main"}