{"funs": {"get_height_width": {"code": "def get_height_width(input_grid: np.ndarray) -> Tuple[int, int]:\n    h, w = input_grid.shape\n    return (h, w)", "prompt": "Get the height and width of the input image matrix", "subfunctions": [], "parent": "main"}, "get_distance_between_blue_pixels": {"code": "def get_distance_between_blue_pixels(input_grid: np.ndarray) -> int:\n    d = 0\n    blue_found = False\n    for i in range(input_grid.shape[1]):\n        if input_grid[1][i] == blue:\n            if blue_found:\n                break\n            blue_found = True\n        elif blue_found:\n            d += 1\n    return d", "prompt": "Traverse the second row of the image matrix and record the distance between the first and second blue pixels as d.", "subfunctions": [], "parent": "main"}, "get_square_region": {"code": "def get_square_region(input_grid: np.ndarray, d: int, i: int, j: int) -> np.ndarray:\n    return input_grid[i + 1:i + d + 1, j + 1:j + d + 1]", "prompt": "Get the d*d square region of input_grid with (i+1,j+1) as the top left corner and (i+d,j+d) as the bottom right corner", "subfunctions": [], "parent": "get_pattern_grid"}, "no_black_pixel": {"code": "def no_black_pixel(pattern_grid: np.ndarray) -> bool:\n    return not np.any(pattern_grid == black)", "prompt": "Check whether there exists any black pixel in pattern_grid. If not, return true", "subfunctions": [], "parent": "get_pattern_grid"}, "get_pattern_grid": {"code": "def get_pattern_grid(input_grid: np.ndarray, d: int) -> np.ndarray:\n    for i in range(0, input_grid.shape[0], d + 1):\n        for j in range(0, input_grid.shape[1], d + 1):\n            pattern_grid = \"Get the d*d square region of input_grid with (i+1,j+1) as the top left corner and (i+d,j+d) as the bottom right corner\"(input_grid, d, i, j)\n            if \"Check whether there exists any black pixel in pattern_grid. If not, return true\"(pattern_grid):\n                return pattern_grid", "prompt": null, "subfunctions": ["get_square_region", "no_black_pixel"], "parent": "main"}, "set_row_col_to_blue": {"code": "def set_row_col_to_blue(input_grid: np.ndarray, i: int, j: int) -> np.ndarray:\n    input_grid[i, :] = blue\n    input_grid[:, j] = blue\n    return input_grid", "prompt": "Set all the pixels in the same row and column as pixel (i,j) to blue.", "subfunctions": [], "parent": "get_output_grid"}, "replace_square_region_with_pattern": {"code": "def replace_square_region_with_pattern(input_grid: np.ndarray, pattern_grid: np.ndarray, i: int, j: int) -> np.ndarray:\n    d = pattern_grid.shape[0]\n    input_grid[i + 1:i + d + 1, j + 1:j + d + 1] = pattern_grid\n    return input_grid", "prompt": "Replace the d*d square region with pattern_grid, with (i+1,j+1) as the top left corner and (i+d,j+d) as the bottom right corner.", "subfunctions": [], "parent": "get_output_grid"}, "get_output_grid": {"code": "def get_output_grid(input_grid: np.ndarray, pattern_grid: np.ndarray, d: int) -> np.ndarray:\n    for i in range(0, input_grid.shape[0], d + 1):\n        for j in range(0, input_grid.shape[1], d + 1):\n            input_grid = \"Set all the pixels in the same row and column as pixel (i,j) to blue.\"(input_grid, i, j)\n            input_grid = \"Replace the d*d square region with pattern_grid, with (i+1,j+1) as the top left corner and (i+d,j+d) as the bottom right corner.\"(input_grid, pattern_grid, i, j)\n    return input_grid", "prompt": null, "subfunctions": ["set_row_col_to_blue", "replace_square_region_with_pattern"], "parent": "main"}, "main": {"code": "def main(input_grid: np.ndarray) -> np.ndarray:\n    h, w = \"Get the height and width of the input image matrix\"(input_grid)\n    d = \"Traverse the second row of the image matrix and record the distance between the first and second blue pixels as d.\"(input_grid)\n    pattern_grid = get_pattern_grid(input_grid, d)\n    output_grid = get_output_grid(input_grid, pattern_grid, d)\n    return output_grid", "prompt": null, "subfunctions": ["get_height_width", "get_distance_between_blue_pixels", "get_pattern_grid", "get_output_grid"], "parent": null}}, "entry": "main"}