{"funs": {"count_color_types": {"code": "def count_color_types(input_grid: np.ndarray) -> int:\n    \"\"\"\n    This function takes in a numpy array representing a grid of pixels with different colors.\n    It counts the number of unique colors present in the grid and returns the count.\n    \"\"\"\n    return len(np.unique(input_grid))", "prompt": "Count the color types in input_grid,return the number of color kind", "subfunctions": [], "parent": "main"}, "generate_new_grid": {"code": "def generate_new_grid(cnt: int) -> np.ndarray:\n    \"\"\"\n    This function takes in a count of unique colors present in the input grid.\n    It generates a new 3*3 grid with black pixels and modifies it based on the count of unique colors.\n    If cnt is one, it makes the top 3 squares gray.\n    If cnt is two, it makes a diagonal line from top left to bottom right gray, again 3 pixels.\n    If cnt is three, it makes a diagonal line from top right to bottom left gray, again 3 pixels.\n    It returns the modified grid.\n    \"\"\"\n    new_grid = np.zeros((3, 3))\n    if cnt == 1:\n        new_grid[:3, :] = grey\n    elif cnt == 2:\n        new_grid[0, 0] = grey\n        new_grid[1, 1] = grey\n        new_grid[2, 2] = grey\n    elif cnt == 3:\n        new_grid[0, 2] = grey\n        new_grid[1, 1] = grey\n        new_grid[2, 0] = grey\n    return new_grid", "prompt": "generate a new 3*3 black grid. If cnt is one, make the top 3 squares gray. If cnt is 2, make a diagonal line from top left to bottom right gray, again 3 pixels. If cnt is 3, make a diagonal line from top right to bottom left gray, again 3 pixels.", "subfunctions": [], "parent": "main"}, "main": {"code": "def main(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    In the input, you should see a n*n grid with multiple color pixels.\n    \"\"\"\n    cnt = \"Count the color types in input_grid,return the number of color kind\"(input_grid)\n    ans_grid = \"generate a new 3*3 black grid. If cnt is one, make the top 3 squares gray. If cnt is 2, make a diagonal line from top left to bottom right gray, again 3 pixels. If cnt is 3, make a diagonal line from top right to bottom left gray, again 3 pixels.\"(cnt)\n    return ans_grid", "prompt": "In the input, you should see a n*n grid with multiple color pixels.", "subfunctions": ["count_color_types", "generate_new_grid"], "parent": null}}, "entry": "main"}