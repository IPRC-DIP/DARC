{"funs": {"find_non_black_columns": {"code": "def find_non_black_columns(grid: np.ndarray) -> List[int]:\n    non_black_columns = []\n    for i in range(grid.shape[1]):\n        if not np.all(grid[:, i] == black):\n            non_black_columns.append(i)\n    return non_black_columns", "prompt": "find columns index where there is a not black squares", "subfunctions": [], "parent": "main"}, "replace_black_with_teal_in_index_column": {"code": "def replace_black_with_teal_in_index_column(index: List[int], grid: np.ndarray) -> np.ndarray:\n    for i in index:\n        for j in range(grid.shape[0]):\n            if grid[j][i] == black:\n                grid[j][i] = teal\n    return grid", "prompt": "replace the black squares with teal in the index column", "subfunctions": [], "parent": "main"}, "main": {"code": "def main(input_grid: np.ndarray) -> np.ndarray:\n    output_grid = np.concatenate((input_grid, input_grid), axis=0)\n    output_grid = np.concatenate((output_grid, output_grid), axis=1)\n    index = \"find columns index where there is a not black squares\"(output_grid)\n    output_grid = \"replace the black squares with teal in the index column\"(index, output_grid)\n    return output_grid", "prompt": null, "subfunctions": ["find_non_black_columns", "replace_black_with_teal_in_index_column"], "parent": null}}, "entry": "main"}