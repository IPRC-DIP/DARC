{"funs": {"find_teal_point": {"code": "def find_teal_point(input_grid: np.ndarray) -> Tuple[int, int]:\n    \"\"\"\n    Given a 2D numpy array, returns the coordinates of the first occurrence of the value \"teal\".\n    \"\"\"\n    for i in range(input_grid.shape[0]):\n        for j in range(input_grid.shape[1]):\n            if input_grid[i][j] == teal:\n                return (i, j)\n    raise ValueError('Teal point not found in input grid.')", "prompt": "find the teal point", "subfunctions": [], "parent": "main"}, "_check_boundary": {"code": "def _check_boundary(input_grid: np.ndarray, current_point: Tuple[int, int]) -> bool:\n    \"\"\"\n    Given a 2D numpy array and a tuple of coordinates, returns True if the coordinates are within the boundaries of the array.\n    \"\"\"\n    rows, cols = input_grid.shape\n    row, col = current_point\n    return 0 <= row < rows and 0 <= col < cols", "prompt": "current point Not exceeding the boundary", "subfunctions": [], "parent": "main"}, "draw_upper_points_grey": {"code": "def draw_upper_points_grey(input_grid: np.ndarray, current_point: Tuple[int, int]) -> np.ndarray:\n    \"\"\"\n    Given a 2D numpy array and a tuple of coordinates, draws the two upper points of the current point to grey.\n    \"\"\"\n    row, col = current_point\n    if row > 0:\n        input_grid[row - 1][col] = grey\n    if row > 1:\n        input_grid[row - 2][col] = grey\n    return input_grid", "prompt": "draw its two upper points to grey", "subfunctions": [], "parent": "main"}, "move_up_two_points": {"code": "def move_up_two_points(input_grid: np.ndarray, current_point: Tuple[int, int]) -> Tuple[int, int]:\n    \"\"\"\n    Given a 2D numpy array and a tuple of coordinates, returns the coordinates of the point two rows above the current point.\n    \"\"\"\n    row, col = current_point\n    return (row - 2, col)", "prompt": "point move up two points", "subfunctions": [], "parent": "main"}, "draw_right_points_grey": {"code": "def draw_right_points_grey(input_grid: np.ndarray, current_point: Tuple[int, int]) -> np.ndarray:\n    \"\"\"\n    Given a 2D numpy array and a tuple of coordinates, draws the two right adjacent points of the current point to grey.\n    \"\"\"\n    row, col = current_point\n    if col < input_grid.shape[1] - 1:\n        input_grid[row][col + 1] = grey\n    if col < input_grid.shape[1] - 2:\n        input_grid[row][col + 2] = grey\n    return input_grid", "prompt": "draw its two right adjacent points to grey", "subfunctions": [], "parent": "main"}, "move_right_two_points": {"code": "def move_right_two_points(input_grid: np.ndarray, current_point: Tuple[int, int]) -> Tuple[int, int]:\n    \"\"\"\n    Given a 2D numpy array and a tuple of coordinates, returns the coordinates of the point two columns to the right of the current point.\n    \"\"\"\n    row, col = current_point\n    return (row, col + 2)", "prompt": "point move right two points", "subfunctions": [], "parent": "main"}, "draw_lower_points_grey": {"code": "def draw_lower_points_grey(input_grid: np.ndarray, current_point: Tuple[int, int]) -> np.ndarray:\n    \"\"\"\n    Given a 2D numpy array and a tuple of coordinates, draws the two lower adjacent points of the current point to grey.\n    \"\"\"\n    row, col = current_point\n    if row < input_grid.shape[0] - 1:\n        input_grid[row + 1][col] = grey\n    if row < input_grid.shape[0] - 2:\n        input_grid[row + 2][col] = grey\n    return input_grid", "prompt": "draw its two lower points to grey", "subfunctions": [], "parent": "main"}, "move_down_two_points": {"code": "def move_down_two_points(input_grid: np.ndarray, current_point: Tuple[int, int]) -> Tuple[int, int]:\n    \"\"\"\n    Given a 2D numpy array and a tuple of coordinates, returns the coordinates of the point two rows below the current point.\n    \"\"\"\n    row, col = current_point\n    return (row + 2, col)", "prompt": "point move down two points", "subfunctions": [], "parent": "main"}, "draw_left_points_grey": {"code": "def draw_left_points_grey(input_grid: np.ndarray, current_point: Tuple[int, int]) -> np.ndarray:\n    \"\"\"\n    Given a 2D numpy array and a tuple of coordinates, draws the two left adjacent points of the current point to grey.\n    \"\"\"\n    row, col = current_point\n    if col > 0:\n        input_grid[row][col - 1] = grey\n    if col > 1:\n        input_grid[row][col - 2] = grey\n    return input_grid", "prompt": "you get a grid and a point. you should change the two left point whcih are in same row as the input point to grey.before draw these point, you should check if they is with in boundry", "subfunctions": [], "parent": "main"}, "move_left_two_points": {"code": "def move_left_two_points(input_grid: np.ndarray, current_point: Tuple[int, int]) -> Tuple[int, int]:\n    \"\"\"\n    Given a 2D numpy array and a tuple of coordinates, returns the coordinates of the point two columns to the left of the current point.\n    \"\"\"\n    row, col = current_point\n    return (row, col - 2)", "prompt": "point move left two points", "subfunctions": [], "parent": "main"}, "main": {"code": "def main(input_grid: np.ndarray) -> np.ndarray:\n    teal_point = \"find the teal point\"(input_grid)\n    current_point = teal_point\n    while \"current point Not exceeding the boundary\"(input_grid, current_point):\n        input_grid = \"draw its two upper points to grey\"(input_grid, current_point)\n        current_point = \"point move up two points\"(input_grid, current_point)\n        if \"current point Not exceeding the boundary\"(input_grid, current_point) == False:\n            break\n        input_grid = \"draw its two right adjacent points to grey\"(input_grid, current_point)\n        current_point = \"point move right two points\"(input_grid, current_point)\n    current_point = teal_point\n    while \"current point Not exceeding the boundary\"(input_grid, current_point):\n        input_grid = \"draw its two lower points to grey\"(input_grid, current_point)\n        current_point = \"point move down two points\"(input_grid, current_point)\n        if \"current point Not exceeding the boundary\"(input_grid, current_point) == False:\n            break\n        input_grid = \"you get a grid and a point. you should change the two left point whcih are in same row as the input point to grey.before draw these point, you should check if they is with in boundry\"(input_grid, current_point)\n        current_point = \"point move left two points\"(input_grid, current_point)\n    return input_grid", "prompt": null, "subfunctions": ["find_teal_point", "_check_boundary", "draw_upper_points_grey", "move_up_two_points", "draw_right_points_grey", "move_right_two_points", "draw_lower_points_grey", "move_down_two_points", "draw_left_points_grey", "move_left_two_points"], "parent": null}}, "entry": "main"}