{"funs": {"count_grey_per_column": {"code": "def count_grey_per_column(input_grid: np.ndarray) -> List[int]:\n    return np.count_nonzero(input_grid == grey, axis=0)", "prompt": "count the number of grey for every columb in input", "subfunctions": [], "parent": "main"}, "sort_grey_num": {"code": "def sort_grey_num(grey_num: List[int]) -> List[int]:\n    return np.argsort(grey_num)[::-1]", "prompt": "sort the grey_num from big to small and save its index", "subfunctions": [], "parent": "main"}, "paint_grey_point": {"code": "def paint_grey_point(input_grid: np.ndarray, col: int, color: int) -> np.ndarray:\n    \"\"\"\n    Paints all grey points in the specified column of the input grid to the specified color.\n\n    Args:\n    - input_grid: A numpy array representing the input grid.\n    - col: An integer representing the index of the column to be painted.\n    - color: An integer representing the color to which the grey points in the specified column should be painted.\n\n    Returns:\n    - A numpy array representing the updated input grid with the grey points in the specified column painted to the specified color.\n    \"\"\"\n    input_grid[input_grid[:, col] == grey, col] = color\n    return input_grid", "prompt": "you get the grid, col and color.you should paint all grey point in this col to this color.", "subfunctions": [], "parent": "main"}, "main": {"code": "def main(input_grid: np.ndarray) -> np.ndarray:\n    grey_num = \"count the number of grey for every columb in input\"(input_grid)\n    sorted_list = \"sort the grey_num from big to small and save its index\"(grey_num)\n    color_list = [blue, red, green, yellow]\n    for i in range(4):\n        output = \"you get the grid, col and color.you should paint all grey point in this col to this color.\"(input_grid, sorted_list[i], color_list[i])\n    return output", "prompt": null, "subfunctions": ["count_grey_per_column", "sort_grey_num", "paint_grey_point"], "parent": null}}, "entry": "main"}