{"funs": {"count_yellow_in_first_column": {"code": "def count_yellow_in_first_column(input: np.ndarray) -> int:\n    \"\"\"\n    Counts the number of yellow positions in the first column of the input numpy array.\n    \n    Args:\n    input: A numpy array representing the input image.\n    \n    Returns:\n    An integer representing the number of yellow positions in the first column.\n    \"\"\"\n    return np.count_nonzero(input[:, 0] == yellow)", "prompt": "count the yellow positions in the first column", "subfunctions": [], "parent": "separate_input"}, "count_yellow_in_first_row": {"code": "def count_yellow_in_first_row(input: np.ndarray) -> int:\n    \"\"\"\n    Counts the number of yellow positions in the first row of the input numpy array.\n    \n    Args:\n    input: A numpy array representing the input image.\n    \n    Returns:\n    An integer representing the number of yellow positions in the first row.\n    \"\"\"\n    return np.count_nonzero(input[0, :] == yellow)", "prompt": "count the yellow positions in the first row", "subfunctions": [], "parent": "separate_input"}, "remove_yellow_rows_and_columns": {"code": "def remove_yellow_rows_and_columns(input: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Removes all yellow rows and columns from the input numpy array.\n    \n    Args:\n    input: A numpy array representing the input image.\n    \n    Returns:\n    A numpy array representing the output image with yellow rows and columns removed.\n    \"\"\"\n    return input[~np.all(input == yellow, axis=1)][:, ~np.all(input == yellow, axis=0)]", "prompt": "remove all yellow rows and columns", "subfunctions": [], "parent": "separate_input"}, "separate_input_into_parts": {"code": "def separate_input_into_parts(input: np.ndarray, x: int, y: int) -> List[np.ndarray]:\n    \"\"\"\n    Separates the input numpy array into x * y parts.\n    \n    Args:\n    input: A numpy array representing the input image.\n    x: An integer representing the number of parts in the horizontal direction.\n    y: An integer representing the number of parts in the vertical direction.\n    \n    Returns:\n    A list of numpy arrays representing the separated input.\n    \"\"\"\n    height, width = input.shape\n    part_height, part_width = (height // y, width // x)\n    parts = []\n    for i in range(y):\n        for j in range(x):\n            part = input[i * part_height:(i + 1) * part_height, j * part_width:(j + 1) * part_width]\n            parts.append(part)\n    return parts", "prompt": "separate the input into x*y parts", "subfunctions": [], "parent": "separate_input"}, "separate_input": {"code": "def separate_input(input):\n    x = \"count the yellow positions in the first column\"(input)\n    y = \"count the yellow positions in the first row\"(input)\n    input = \"remove all yellow rows and columns\"(input)\n    inputs = \"separate the input into x*y parts\"(input, y + 1, x + 1)\n    return inputs", "prompt": null, "subfunctions": ["count_yellow_in_first_column", "count_yellow_in_first_row", "remove_yellow_rows_and_columns", "separate_input_into_parts"], "parent": "main"}, "find_different_color": {"code": "def find_different_color(inputs: List[np.ndarray]) -> np.ndarray:\n    \"\"\"\n    Finds the numpy array in the list of inputs that has different colors than the others.\n    \n    Args:\n    inputs: A list of numpy arrays representing the separated input.\n    \n    Returns:\n    A numpy array representing the pattern with different colors.\n    \"\"\"\n    for i in range(len(inputs)):\n        if np.unique(inputs[i]).size > 1:\n            return inputs[i]\n    return None", "prompt": "find the one which has different colors", "subfunctions": [], "parent": "main"}, "repeat_pattern_and_add_dividing_lines": {"code": "def repeat_pattern_and_add_dividing_lines(pattern: np.ndarray, a: int, b: int) -> np.ndarray:\n    \"\"\"\n    Repeats the pattern in a * b, and adds yellow dividing lines.\n    \n    Args:\n    pattern: A numpy array representing the pattern to be repeated.\n    a: An integer representing the number of times the pattern should be repeated in the vertical direction.\n    b: An integer representing the number of times the pattern should be repeated in the horizontal direction.\n    \n    Returns:\n    A numpy array representing the output image with repeated pattern and yellow dividing lines.\n    \"\"\"\n    repeated_pattern = np.tile(pattern, (a, b))\n    i, j = pattern.shape\n    for k in range(1, a):\n        repeated_pattern = np.insert(repeated_pattern, k * i + k - 1, yellow, axis=0)\n    for k in range(1, b):\n        repeated_pattern = np.insert(repeated_pattern, k * j + k - 1, yellow, axis=1)\n    return repeated_pattern", "prompt": "repeat the pattern in a * b, and add yellow dividing lines", "subfunctions": [], "parent": "main"}, "main": {"code": "def main(input):\n    inputs = separate_input(input)\n    pattern = \"find the one which has different colors\"(inputs)\n    i_s, js = input.shape\n    i, j = pattern.shape\n    a = i_s // i\n    b = js // j\n    output = \"repeat the pattern in a * b, and add yellow dividing lines\"(pattern, a, b)\n    return output", "prompt": null, "subfunctions": ["separate_input", "find_different_color", "repeat_pattern_and_add_dividing_lines"], "parent": null}}, "entry": "main"}