{"funs": {"find_yellow_line_index": {"code": "def find_yellow_line_index(input_grid: np.ndarray) -> int:\n    \"\"\"\n    This function takes in a numpy array of shape (n,m) and returns the index of the first row that contains a yellow pixel.\n    \"\"\"\n    for i in range(input_grid.shape[0]):\n        if yellow in input_grid[i]:\n            return i\n    return -1", "prompt": "Find a yellow line and return the index of the line", "subfunctions": [], "parent": "main"}, "color_pixels": {"code": "def color_pixels(input_grid: np.ndarray, mindex: int, ngrid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Traverse all pixels in the inputgrid whose line number is less than mindex, if the value of the pixel is black and t\n    \"\"\"\n    for i in range(mindex):\n        for j in range(input_grid.shape[1]):\n            if input_grid[i][j] == black and input_grid[min(i + mindex + 1, input_grid.shape[0] - 1)][j] == black:\n                ngrid[i][j] = black\n            else:\n                ngrid[i][j] = green\n    return ngrid", "prompt": "Traverse all pixels in the inputgrid whose line number is less than mindex, if the value of the pixel is black and t", "subfunctions": [], "parent": "main"}, "main": {"code": "def main(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    In the input, you should see a n*m grid with multiple color pixels.\n    \"\"\"\n    mindex = \"Find a yellow line and return the index of the line\"(input_grid)\n    ngrid = np.zeros((input_grid.shape[0] // 2, input_grid.shape[1]))\n    ans_grid = \"Traverse all pixels in the inputgrid whose line number is less than mindex, if the value of the pixel is black and t\"(input_grid, mindex, ngrid)\n    return ans_grid", "prompt": "In the input, you should see a n*m grid with multiple color pixels.", "subfunctions": ["find_yellow_line_index", "color_pixels"], "parent": null}}, "entry": "main"}