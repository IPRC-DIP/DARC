{"funs": {"count_colors": {"code": "def count_colors(grid: np.ndarray) -> int:\n    return len(np.unique(grid))", "prompt": "Count the how many colors in the grid", "subfunctions": [], "parent": "main"}, "select_square": {"code": "def select_square(grid: np.ndarray, len: int) -> np.ndarray:\n    return grid[:len, 1:len + 1]", "prompt": "from the second column,the left-top len*len square", "subfunctions": [], "parent": "main"}, "fill_grid_with_pattern": {"code": "def fill_grid_with_pattern(output_grid: np.ndarray, pattern: np.ndarray) -> np.ndarray:\n    out = np.tile(pattern, (output_grid.shape[0] // pattern.shape[0], output_grid.shape[1] // pattern.shape[1]))\n    return out", "prompt": null, "subfunctions": [], "parent": "main"}, "fill_first_two_rows": {"code": "def fill_first_two_rows(grid: np.ndarray) -> np.ndarray:\n    pattern = grid[:2, :]\n    out = np.tile(pattern, (grid.shape[0] // pattern.shape[0], 1))\n    return out", "prompt": null, "subfunctions": [], "parent": "main"}, "main": {"code": "def main(input_grid: np.ndarray) -> np.ndarray:\n    output_grid = np.zeros_like(input_grid)\n    color_num = \"Count the how many colors in the grid\"(input_grid)\n    len = color_num - 1\n    pattern = \"from the second column,the left-top len*len square\"(input_grid, len)\n    grid1 = fill_grid_with_pattern(output_grid, pattern)\n    output_grid = fill_first_two_rows(grid1)\n    return output_grid", "prompt": null, "subfunctions": ["count_colors", "select_square", "fill_grid_with_pattern", "fill_first_two_rows"], "parent": null}}, "entry": "main"}