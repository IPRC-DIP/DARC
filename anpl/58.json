{"funs": {"find_positions_without_grey_neighbors": {"code": "def find_positions_without_grey_neighbors(input: np.ndarray) -> List[Tuple[int, int]]:\n    \"\"\"\n    This function takes a 2-dimensional numpy array as input and returns a list of positions where there is no grey color\n    in its 3x3 neighborhood.\n\n    Args:\n    - input: a 2-dimensional numpy array representing the input image\n\n    Returns:\n    - A list of tuples representing the positions where there is no grey color in its 3x3 neighborhood.\n    \"\"\"\n    positions = []\n    for i in range(1, input.shape[0] - 1):\n        for j in range(1, input.shape[1] - 1):\n            if np.all(input[i - 1:i + 2, j - 1:j + 2] != grey):\n                positions.append((i, j))\n    return positions", "prompt": "traverse the input which is a 2-dim numpy array, return positions which satisfies that there is no grey in its 3*3 neighbor", "subfunctions": [], "parent": "main"}, "count_yellow_neighbors": {"code": "def count_yellow_neighbors(input: np.ndarray, centers: List[Tuple[int, int]]) -> np.ndarray:\n    \"\"\"\n    This function takes a 2-dimensional numpy array and a list of positions as input and counts the number of yellow pixels\n    in the 3x3 neighborhood of each position in the input list.\n\n    Args:\n    - input: a 2-dimensional numpy array representing the input image\n    - centers: a list of tuples representing the positions to be evaluated\n\n    Returns:\n    - A numpy array representing the number of yellow pixels in the 3x3 neighborhood of each position in the input list.\n    \"\"\"\n    scores = np.zeros(len(centers))\n    for i, position in enumerate(centers):\n        scores[i] = np.sum(input[position[0] - 1:position[0] + 2, position[1] - 1:position[1] + 2] == yellow)\n    return scores", "prompt": "for each position in the centers, count the yellow position in its 3*3 neighbor", "subfunctions": [], "parent": "main"}, "get_max_score_center": {"code": "def get_max_score_center(centers: List[Tuple[int, int]], scores: np.ndarray) -> Tuple[List[Tuple[int, int]], List[Tuple[int, int]]]:\n    \"\"\"\n    This function takes a list of positions and a numpy array of scores as input and returns two lists of positions:\n    - A list of positions with the maximum score\n    - A list of positions with a score less than the maximum score\n\n    Args:\n    - centers: a list of tuples representing the positions to be evaluated\n    - scores: a numpy array representing the number of yellow pixels in the 3x3 neighborhood of each position in the input list.\n\n    Returns:\n    - A tuple of two lists of tuples representing the positions with the maximum score and the positions with a score less than the maximum score.\n    \"\"\"\n    max_score = np.max(scores)\n    max_centers = [centers[i] for i in range(len(centers)) if scores[i] == max_score]\n    other_centers = [centers[i] for i in range(len(centers)) if scores[i] < max_score]\n    return (max_centers, other_centers)", "prompt": "return all the centers with the max scores and other centers", "subfunctions": [], "parent": "main"}, "make_neighbors_yellow": {"code": "def make_neighbors_yellow(input: np.ndarray, positions: List[Tuple[int, int]]) -> np.ndarray:\n    \"\"\"\n    This function takes a 2-dimensional numpy array and a list of positions as input and makes the 3x3 neighborhood of each\n    position in the input list yellow.\n\n    Args:\n    - input: a 2-dimensional numpy array representing the input image\n    - positions: a list of tuples representing the positions to be evaluated\n\n    Returns:\n    - A numpy array with the 3x3 neighborhood of each position in the input list set to yellow.\n    \"\"\"\n    for position in positions:\n        input[position[0] - 1:position[0] + 2, position[1] - 1:position[1] + 2] = yellow\n    return input", "prompt": "for each position in the position list, make its 3*3 neighbor yellow", "subfunctions": [], "parent": "main"}, "make_neighbors_black": {"code": "def make_neighbors_black(input: np.ndarray, positions: List[Tuple[int, int]]) -> np.ndarray:\n    \"\"\"\n    This function takes a 2-dimensional numpy array and a list of positions as input and makes the 3x3 neighborhood of each\n    position in the input list black.\n\n    Args:\n    - input: a 2-dimensional numpy array representing the input image\n    - positions: a list of tuples representing the positions to be evaluated\n\n    Returns:\n    - A numpy array with the 3x3 neighborhood of each position in the input list set to black.\n    \"\"\"\n    for position in positions:\n        input[position[0] - 1:position[0] + 2, position[1] - 1:position[1] + 2] = black\n    return input", "prompt": "for each position in the position list, make its 3*3 neighbor black", "subfunctions": [], "parent": "main"}, "main": {"code": "def main(input):\n    centers = \"traverse the input which is a 2-dim numpy array, return positions which satisfies that there is no grey in its 3*3 neighbor\"(input)\n    scores = \"for each position in the centers, count the yellow position in its 3*3 neighbor\"(input, centers)\n    center_yellow, center_black = \"return all the centers with the max scores and other centers\"(centers, scores)\n    output = \"for each position in the position list, make its 3*3 neighbor yellow\"(input, center_yellow)\n    output = \"for each position in the position list, make its 3*3 neighbor black\"(output, center_black)\n    return output", "prompt": null, "subfunctions": ["find_positions_without_grey_neighbors", "count_yellow_neighbors", "get_max_score_center", "make_neighbors_yellow", "make_neighbors_black"], "parent": null}}, "entry": "main"}