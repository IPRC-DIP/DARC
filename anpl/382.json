{"funs": {"find_out_in_colors": {"code": "def find_out_in_colors(input_grid: np.ndarray, color1: int, color2: int) -> Tuple[int, int]:\n    if np.min(np.where(input_grid == color1)[1]) < np.min(np.where(input_grid == color2)[1]):\n        return (color1, color2)\n    else:\n        return (color2, color1)", "prompt": "refer the color has min x coordinate to out_color, the other is in_color", "subfunctions": [], "parent": "main"}, "find_in_color_points": {"code": "def find_in_color_points(input_grid: np.ndarray, in_color: int, out_color: int) -> List[Tuple[int, int]]:\n    in_color_points = []\n    for i in range(1, input_grid.shape[0] - 1):\n        for j in range(1, input_grid.shape[1] - 1):\n            if input_grid[i][j] == in_color:\n                neighbors = (input_grid[i - 1][j], input_grid[i + 1][j], input_grid[i][j - 1], input_grid[i][j + 1])\n                if neighbors.count(out_color) == 3 and neighbors.count(in_color) == 1:\n                    in_color_points.append((i, j))\n    return in_color_points", "prompt": null, "subfunctions": [], "parent": "main"}, "color_column": {"code": "def color_column(input_grid: np.ndarray, in_color: int, out_color: int, j: int) -> None:\n    for i in range(0, input_grid.shape[0]):\n        if input_grid[i][j] == in_color:\n            input_grid[i][j] = out_color\n        elif input_grid[i][j] == black:\n            input_grid[i][j] = in_color", "prompt": null, "subfunctions": [], "parent": "main"}, "color_row": {"code": "def color_row(input_grid: np.ndarray, in_color: int, out_color: int, i: int) -> None:\n    for j in range(0, input_grid.shape[1]):\n        if input_grid[i][j] == in_color:\n            input_grid[i][j] = out_color\n        elif input_grid[i][j] == black:\n            input_grid[i][j] = in_color", "prompt": null, "subfunctions": [], "parent": "main"}, "main": {"code": "def main(input_grid: np.ndarray) -> np.ndarray:\n    color1 = np.unique(input_grid)[1]\n    color2 = np.unique(input_grid)[2]\n    out_color, in_color = \"refer the color has min x coordinate to out_color, the other is in_color\"(input_grid, color1, color2)\n    points = find_in_color_points(input_grid, in_color, out_color)\n    for point in points:\n        i, j = point\n        if input_grid[i - 1][j] == in_color or input_grid[i + 1][j] == in_color:\n            color_column(input_grid, in_color, out_color, j)\n        if input_grid[i][j + 1] == in_color or input_grid[i][j - 1] == in_color:\n            color_row(input_grid, in_color, out_color, i)\n    return input_grid", "prompt": null, "subfunctions": ["find_out_in_colors", "find_in_color_points", "color_column", "color_row"], "parent": null}}, "entry": "main"}