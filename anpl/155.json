{"funs": {"find_largest_yellow_rectangles": {"code": "def find_largest_yellow_rectangles(input: np.ndarray) -> List[Tuple[int, int, int, int]]:\n    \"\"\"\n    This function takes a 2-dimensional numpy array as input and returns a list of tuples, where each tuple represents a\n    yellow rectangle in the input. The tuple contains the coordinates of the top-left corner of the rectangle and its\n    width and height. If there are multiple rectangles with the same largest size, all of them should be included in the\n    output list.\n    \"\"\"\n    rectangles = []\n    for i in range(input.shape[0]):\n        for j in range(input.shape[1]):\n            if input[i][j] == yellow:\n                width = 1\n                height = 1\n                while i + height < input.shape[0] and input[i + height][j] == yellow:\n                    height += 1\n                while j + width < input.shape[1] and input[i][j + width] == yellow:\n                    width += 1\n                rectangles.append((i, j, width, height))\n    max_size = max([w * h for _, _, w, h in rectangles])\n    return [(i, j, w, h) for i, j, w, h in rectangles if w * h == max_size]", "prompt": "find all the largest yellow rectangles in the input, which is a 2-dim numpy array.", "subfunctions": [], "parent": "main"}, "black_rectangle": {"code": "def black_rectangle(input: np.ndarray, rectangle: Tuple[int, int, int, int]) -> np.ndarray:\n    \"\"\"\n    This function takes a 2-dimensional numpy array as input and a tuple representing a rectangle in the input.\n    It colors the inside of the rectangle with black color and returns the modified numpy array.\n    \"\"\"\n    x, y, w, h = rectangle\n    for i in range(x, x + h):\n        for j in range(y, y + w):\n            input[i][j] = black\n    return input", "prompt": "black the rectangle given", "subfunctions": [], "parent": "main"}, "get_max_min_area_rectangles": {"code": "def get_max_min_area_rectangles(rectangles: List[Tuple[int, int, int, int]]) -> Tuple[Tuple[int, int, int, int], Tuple[int, int, int, int]]:\n    \"\"\"\n    This function takes a list of tuples, where each tuple represents a yellow rectangle in the input. The tuple contains\n    the coordinates of the top-left corner of the rectangle and its width and height. It returns a tuple of two tuples,\n    where the first tuple represents the rectangle with the maximum area and the second tuple represents the rectangle\n    with the minimum area.\n    \"\"\"\n    max_area = 0\n    min_area = float('inf')\n    max_rectangle = None\n    min_rectangle = None\n    for rectangle in rectangles:\n        area = rectangle[2] * rectangle[3]\n        if area > max_area:\n            max_area = area\n            max_rectangle = rectangle\n        if area < min_area:\n            min_area = area\n            min_rectangle = rectangle\n    return (max_rectangle, min_rectangle)", "prompt": "return the max area rectangle and the min area rectangle, given the list of rectangles", "subfunctions": [], "parent": "main"}, "color_inside": {"code": "def color_inside(input: np.ndarray, rectangle: Tuple[int, int, int, int], color: int) -> np.ndarray:\n    \"\"\"\n    This function takes a 2-dimensional numpy array as input, a tuple representing a rectangle in the input, and a color.\n    It colors the inside of the rectangle with the given color and returns the modified numpy array.\n    \"\"\"\n    x, y, w, h = rectangle\n    for i in range(x + 1, x + h - 1):\n        for j in range(y + 1, y + w - 1):\n            input[i][j] = color\n    return input", "prompt": "color the inside of the rectangle with the color given, do not change the outside circle of the rectangle", "subfunctions": [], "parent": "main"}, "main": {"code": "def main(input):\n    rectangles1 = \"find all the largest yellow rectangles in the input, which is a 2-dim numpy array.\"(input)\n    output = np.copy(input)\n    output = \"black the rectangle given\"(output, rectangles1[0])\n    rectangles2 = \"find all the largest yellow rectangles in the input, which is a 2-dim numpy array.\"(output)\n    max_rectangle, min_rectangle = \"return the max area rectangle and the min area rectangle, given the list of rectangles\"([rectangles1[0], rectangles2[0]])\n    output = np.copy(input)\n    output = \"color the inside of the rectangle with the color given, do not change the outside circle of the rectangle\"(output, max_rectangle, red)\n    output = \"color the inside of the rectangle with the color given, do not change the outside circle of the rectangle\"(output, min_rectangle, blue)\n    return output", "prompt": null, "subfunctions": ["find_largest_yellow_rectangles", "black_rectangle", "get_max_min_area_rectangles", "color_inside"], "parent": null}}, "entry": "main"}