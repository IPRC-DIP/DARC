{"funs": {"find_yellow_pixels": {"code": "def find_yellow_pixels(input_grid: np.ndarray) -> List[Tuple[int, int]]:\n    \"\"\"\n    Given an input grid, returns a list of tuples representing the location of all pixels which are yellow.\n    \n    Args:\n    input_grid: A numpy array representing the input grid.\n    \n    Returns:\n    A list of tuples representing the location of all pixels which are yellow.\n    \"\"\"\n    yellow_pixels = []\n    for i in range(input_grid.shape[0]):\n        for j in range(input_grid.shape[1]):\n            if input_grid[i][j] == yellow:\n                yellow_pixels.append((i, j))\n    return yellow_pixels", "prompt": "find the location of all pixels which are yellow", "subfunctions": [], "parent": "replace_yellow_pixels"}, "find_symmetric_pixel_color": {"code": "def find_symmetric_pixel_color(input_grid: np.ndarray, loc: Tuple[int, int]) -> int:\n    \"\"\"\n    Given an input grid and a location, returns the color of the pixel which is symmetric above and below with the given location.\n    \n    Args:\n    input_grid: A numpy array representing the input grid.\n    loc: A tuple representing the location of the pixel.\n    \n    Returns:\n    An integer representing the color of the pixel which is symmetric above and below with the given location.\n    \"\"\"\n    row, col = loc\n    symmetric_row = input_grid.shape[0] - 1 - row\n    return input_grid[symmetric_row][col]", "prompt": "find the color of pixel which is symmetric above and below with loc in the grid", "subfunctions": [], "parent": "replace_yellow_pixels"}, "_hole2": {"code": "def _hole2(input_grid: np.ndarray, loc: Tuple[int, int]) -> int:\n    row, col = loc\n    symmetric_col = input_grid.shape[1] - 1 - col\n    return input_grid[row][symmetric_col]", "prompt": null, "subfunctions": [], "parent": "replace_yellow_pixels"}, "change_pixel_color": {"code": "def change_pixel_color(output_grid: np.ndarray, loc: Tuple[int, int], color: int) -> np.ndarray:\n    \"\"\"\n    Given an output grid, a location and a color, changes the color of the pixel at the given location to the given color.\n    \n    Args:\n    output_grid: A numpy array representing the output grid.\n    loc: A tuple representing the location of the pixel.\n    color: An integer representing the new color of the pixel.\n    \n    Returns:\n    A numpy array representing the output grid with the color of the pixel at the given location changed to the given color.\n    \"\"\"\n    row, col = loc\n    output_grid[row][col] = color\n    return output_grid", "prompt": "change pixel to the color", "subfunctions": [], "parent": "main"}, "replace_yellow_pixels": {"code": "def replace_yellow_pixels(input_grid: np.ndarray) -> np.ndarray:\n    locs = \"find the location of all pixels which are yellow\"(input_grid)\n    output_grid = input_grid\n    for loc in locs:\n        color = \"find the color of pixel which is symmetric above and below with loc in the grid\"(input_grid, loc)\n        if color is yellow:\n            color = _hole2(input_grid, loc)\n        output_grid = \"change pixel to the color\"(output_grid, loc, color)\n    return output_grid", "prompt": "find the color of pixel which is symmetric left and right with loc in the grid", "subfunctions": ["find_yellow_pixels", "find_symmetric_pixel_color", "_hole2", "change_pixel_color"], "parent": "main"}, "main": {"code": "def main(input_grid: np.ndarray) -> np.ndarray:\n    locs = \"find the location of all pixels which are yellow\"(input_grid)\n    output_grid = input_grid\n    for loc in locs:\n        color = \"find the color of pixel which is symmetric above and below with loc in the grid\"(input_grid, loc)\n        if color is yellow:\n            color = \"find the color of pixel which is symmetric left and right with loc in the grid\"(input_grid, loc)\n        output_grid = \"change pixel to the color\"(output_grid, loc, color)\n    return output_grid", "prompt": null, "subfunctions": ["find_yellow_pixels", "find_symmetric_pixel_color", "replace_yellow_pixels", "change_pixel_color"], "parent": null}}, "entry": "main"}