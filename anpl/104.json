{"funs": {"find_blue_points": {"code": "def find_blue_points(input_grid: np.ndarray) -> Tuple[int, int, int, int]:\n    \"\"\"\n    This function takes in a numpy array as input_grid and returns the minimum and maximum x and y coordinates of all the blue points in the grid.\n\n    Args:\n    input_grid: A numpy array of shape (n, m) containing integers from 0 to 9 representing different colors.\n\n    Returns:\n    A tuple of four integers (minx, miny, maxx, maxy) representing the minimum and maximum x and y coordinates of all the blue points in the grid.\n    \"\"\"\n    blue_points = np.where(input_grid == blue)\n    minx, miny = np.min(blue_points, axis=1)\n    maxx, maxy = np.max(blue_points, axis=1)\n    return (minx, miny, maxx, maxy)", "prompt": "find all blue points in the grid, return its min x,min y, max x, max y coordinate", "subfunctions": [], "parent": "main"}, "color_edge_black_points_red": {"code": "def color_edge_black_points_red(input_grid: np.ndarray, minx: int, miny: int, maxx: int, maxy: int) -> np.ndarray:\n    for i in range(minx, maxx + 1):\n        if input_grid[i][miny] == black:\n            input_grid[i][miny] = red\n        if input_grid[i][maxy] == black:\n            input_grid[i][maxy] = red\n    for j in range(miny, maxy + 1):\n        if input_grid[minx][j] == black:\n            input_grid[minx][j] = red\n        if input_grid[maxx][j] == black:\n            input_grid[maxx][j] = red\n    return input_grid", "prompt": null, "subfunctions": [], "parent": "main"}, "find_blue_points_within_area": {"code": "def find_blue_points_within_area(input_grid: np.ndarray, minx: int, miny: int, maxx: int, maxy: int) -> Tuple[int, int]:\n    \"\"\"\n    This function takes in a numpy array as input_grid and the minimum and maximum x and y coordinates of an area and returns the coordinates of the blue point within that area.\n\n    Args:\n    input_grid: A numpy array of shape (n, m) containing integers from 0 to 9 representing different colors.\n    minx: An integer representing the minimum x coordinate of the area.\n    miny: An integer representing the minimum y coordinate of the area.\n    maxx: An integer representing the maximum x coordinate of the area.\n    maxy: An integer representing the maximum y coordinate of the area.\n\n    Returns:\n    A tuple of two integers (x, y) representing the coordinates of the blue point within the area.\n    \"\"\"\n    blue_points = np.where(input_grid[minx + 1:maxx, miny + 1:maxy] == blue)\n    if blue_points[0].size == 0:\n        return (-1, -1)\n    x, y = (blue_points[0][0] + minx + 1, blue_points[1][0] + miny + 1)\n    return (x, y)", "prompt": "find blue points within the area [minx:maxx,miny:maxy] (not including the edge), return its coordinate", "subfunctions": [], "parent": "main"}, "color_black_points_red_in_row_or_column_with_more_than_two_blue_points": {"code": "def color_black_points_red_in_row_or_column_with_more_than_two_blue_points(input_grid: np.ndarray, x: int, y: int, minx: int, miny: int, maxx: int, maxy: int):\n    row = input_grid[minx + 1:maxx, y]\n    col = input_grid[x, miny + 1:maxy]\n    if np.count_nonzero(row == blue) >= 2:\n        input_grid[minx + 1:maxx, y][input_grid[minx + 1:maxx, y] == black] = red\n    elif np.count_nonzero(col == blue) >= 2:\n        input_grid[x, miny + 1:maxy][input_grid[x, miny + 1:maxy] == black] = red\n    return input_grid", "prompt": null, "subfunctions": [], "parent": "main"}, "main": {"code": "def main(input_grid: np.ndarray) -> np.ndarray:\n    minx, miny, maxx, maxy = \"find all blue points in the grid, return its min x,min y, max x, max y coordinate\"(input_grid)\n    grid1 = color_edge_black_points_red(input_grid, minx, miny, maxx, maxy)\n    x, y = \"find blue points within the area [minx:maxx,miny:maxy] (not including the edge), return its coordinate\"(grid1, minx, miny, maxx, maxy)\n    output_grid = color_black_points_red_in_row_or_column_with_more_than_two_blue_points(grid1, x, y, minx, miny, maxx, maxy)\n    return output_grid", "prompt": null, "subfunctions": ["find_blue_points", "color_edge_black_points_red", "find_blue_points_within_area", "color_black_points_red_in_row_or_column_with_more_than_two_blue_points"], "parent": null}}, "entry": "main"}