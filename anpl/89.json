{"funs": {"find_biggest_black_square": {"code": "def find_biggest_black_square(grid: np.ndarray) -> Tuple[int, int, int]:\n    \"\"\"\n    Given a grid, find the biggest square that can be created with only black boxes.\n    Returns a tuple containing the row index, column index, and size of the biggest square.\n    \"\"\"\n    rows, cols = grid.shape\n    max_size = 0\n    max_row, max_col = (0, 0)\n    for i in range(rows):\n        for j in range(cols):\n            if grid[i][j] == black:\n                size = 1\n                extend = True\n                while extend and i + size < rows and (j + size < cols):\n                    for k in range(j, j + size + 1):\n                        if grid[i + size][k] != black:\n                            extend = False\n                            break\n                    for k in range(i, i + size + 1):\n                        if grid[k][j + size] != black:\n                            extend = False\n                            break\n                    if extend:\n                        size += 1\n                if size > max_size:\n                    max_size = size\n                    max_row, max_col = (i, j)\n    return (max_row, max_col, max_size)", "prompt": "find the biggest black square", "subfunctions": [], "parent": "main"}, "color_square_to_pink": {"code": "def color_square_to_pink(grid: np.ndarray, square: Tuple[int, int, int]) -> np.ndarray:\n    \"\"\"\n    Given a grid and a tuple containing the row index, column index, and size of a square,\n    color the square area in the grid pink instead of black.\n    Returns the updated grid.\n    \"\"\"\n    row, col, size = square\n    for i in range(row, row + size):\n        for j in range(col, col + size):\n            grid[i][j] = pink\n    return grid", "prompt": "color square to pink", "subfunctions": [], "parent": "main"}, "main": {"code": "def main(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    find in the input the biggest square or rectangle that can be created with only black boxes. Then make that box area in the output pink instead of black.\n    \"\"\"\n    output_grid = np.copy(input_grid)\n    biggest_black_square = \"find the biggest black square\"(output_grid)\n    output_grid = \"color square to pink\"(output_grid, biggest_black_square)\n    return output_grid", "prompt": "find in the input the biggest square or rectangle that can be created with only black boxes. Then make that box area in the output pink instead of black.", "subfunctions": ["find_biggest_black_square", "color_square_to_pink"], "parent": null}}, "entry": "main"}