{"funs": {"extract_3x3_matrix": {"code": "def extract_3x3_matrix(input_grid: np.ndarray) -> np.ndarray:\n    return input_grid[:3, :3]", "prompt": "Extract a 3*3 matrix from the image matrix with (0,0) as the upper left corner and (2,2) as the lower right corner", "subfunctions": [], "parent": "main"}, "rotate_grid_90": {"code": "def rotate_grid_90(input_grid: np.ndarray) -> np.ndarray:\n    return np.rot90(input_grid, k=-1)", "prompt": "Rotate grid clockwise by 90 degrees", "subfunctions": [], "parent": "main"}, "cover_pattern": {"code": "def cover_pattern(input_grid: np.ndarray, pattern_grid1: np.ndarray, pattern_grid2: np.ndarray) -> np.ndarray:\n    input_grid[0:3, 4:7] = pattern_grid1\n    input_grid[0:3, 8:11] = pattern_grid2\n    return input_grid", "prompt": "Cover the 3*3 matrix in the image matrix with (0,4) as the upper left corner and (2,6) as the lower right corner with pattern_grid1, and cover the 3*3 matrix in the image matrix with (0,8) as the upper left corner and (2,10) as the lower right corner with pattern_grid2", "subfunctions": [], "parent": "main"}, "main": {"code": "def main(input_grid: np.ndarray) -> np.ndarray:\n    pattern_grid = \"Extract a 3*3 matrix from the image matrix with (0,0) as the upper left corner and (2,2) as the lower right corner\"(input_grid)\n    pattern_grid1 = \"Rotate grid clockwise by 90 degrees\"(pattern_grid)\n    pattern_grid2 = \"Rotate grid clockwise by 90 degrees\"(pattern_grid1)\n    output_grid = \"Cover the 3*3 matrix in the image matrix with (0,4) as the upper left corner and (2,6) as the lower right corner with pattern_grid1, and cover the 3*3 matrix in the image matrix with (0,8) as the upper left corner and (2,10) as the lower right corner with pattern_grid2\"(input_grid, pattern_grid1, pattern_grid2)\n    return output_grid", "prompt": null, "subfunctions": ["extract_3x3_matrix", "rotate_grid_90", "cover_pattern"], "parent": null}}, "entry": "main"}