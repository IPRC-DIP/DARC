{"funs": {"replace_black_with_blue_below_maroon": {"code": "def replace_black_with_blue_below_maroon(input_grid: np.ndarray) -> np.ndarray:\n    out = np.copy(input_grid)\n    for j in range(out.shape[1]):\n        if maroon in out[:, j]:\n            maroon_row = np.where(out[:, j] == maroon)[0][0]\n            out[maroon_row + 1:, j][out[maroon_row + 1:, j] == black] = blue\n    return out", "prompt": "For each column, if there are maroon pixels, replace all black pixels below maroon pixels with blue", "subfunctions": [], "parent": "main"}, "get_width": {"code": "def get_width(grid: np.ndarray) -> int:\n    return grid.shape[1]", "prompt": "Return the width", "subfunctions": [], "parent": "main"}, "has_maroon_and_no_green_below_maroon": {"code": "def has_maroon_and_no_green_below_maroon(input_grid: np.ndarray, j: int) -> bool:\n    if maroon in input_grid[:, j]:\n        maroon_row = np.where(input_grid[:, j] == maroon)[0][0]\n        if green not in input_grid[maroon_row + 1:, j]:\n            return True\n    return False", "prompt": "Return whether there are maroon pixels and no green pixels below the maroon pixels in column j", "subfunctions": [], "parent": "main"}, "get_maroon_rows": {"code": "def get_maroon_rows(input_grid: np.ndarray, j: int) -> Tuple[int, int]:\n    maroon_rows = np.where(input_grid[:, j] == maroon)[0]\n    return (maroon_rows[0], maroon_rows[-1])", "prompt": "Return the minimun row and maximun row of maroon pixels in column j", "subfunctions": [], "parent": "main"}, "replace_with_green": {"code": "def replace_with_green(input_grid: np.ndarray, r1: int, r2: int, j: int, gap: int) -> np.ndarray:\n    out = np.copy(input_grid)\n    out[r1 - gap:r2 + gap + 1, j - gap:j + gap + r2 - r1 + 1][out[r1 - gap:r2 + gap + 1, j - gap:j + gap + r2 - r1 + 1] != maroon] = green\n    return out", "prompt": "Replace the black and blue pixels of the matrix from row r1-gap to row r2+gap, and from column j-gap to column j+gap+r2-r1 with green", "subfunctions": [], "parent": "main"}, "main": {"code": "def main(input_grid: np.ndarray) -> np.ndarray:\n    out = \"For each column, if there are maroon pixels, replace all black pixels below maroon pixels with blue\"(input_grid)\n    w = \"Return the width\"(out)\n    for j in range(w):\n        flag = \"Return whether there are maroon pixels and no green pixels below the maroon pixels in column j\"(out, j)\n        if flag:\n            r1, r2 = \"Return the minimun row and maximun row of maroon pixels in column j\"(out, j)\n            gap = (r2 - r1 + 1) // 2\n            out = \"Replace the black and blue pixels of the matrix from row r1-gap to row r2+gap, and from column j-gap to column j+gap+r2-r1 with green\"(out, r1, r2, j, gap)\n    return out", "prompt": null, "subfunctions": ["replace_black_with_blue_below_maroon", "get_width", "has_maroon_and_no_green_below_maroon", "get_maroon_rows", "replace_with_green"], "parent": null}}, "entry": "main"}