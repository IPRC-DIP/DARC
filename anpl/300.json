{"funs": {"count_non_black_pixels": {"code": "def count_non_black_pixels(input_grid: np.ndarray) -> List[int]:\n    \"\"\"\n    Counts the number of non-black pixels of each color in the input grid.\n\n    Args:\n    input_grid: A numpy array representing the input grid.\n\n    Returns:\n    A list of integers representing the count of non-black pixels of each color.\n    \"\"\"\n    color_counts = [0] * 10\n    for i in range(input_grid.shape[0]):\n        for j in range(input_grid.shape[1]):\n            if input_grid[i][j] != black:\n                color_counts[input_grid[i][j]] += 1\n    sorted_color = sorted(range(len(color_counts)), key=lambda k: color_counts[k], reverse=True)\n    return sorted_color", "prompt": "count the number of the non-black color of the pixels in input_grid", "subfunctions": [], "parent": "main"}, "put_pixels_right_to_left_at_row": {"code": "def put_pixels_right_to_left_at_row(color: int, row: int, number: int, output_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Puts the given number of pixels of the given color from right to left at the given row in the output grid.\n\n    Args:\n    color: An integer representing the color of the pixels to be put.\n    row: An integer representing the row at which the pixels are to be put.\n    number: An integer representing the number of pixels to be put.\n    output_grid: A numpy array representing the output grid.\n\n    Returns:\n    A numpy array representing the updated output grid.\n    \"\"\"\n    for i in range(number):\n        output_grid[row][output_grid.shape[1] - 1 - i] = color\n    return output_grid", "prompt": "put the number pixels of the color from right to left at the row in output_grid", "subfunctions": [], "parent": "main"}, "main": {"code": "def main(input_grid: np.ndarray) -> np.ndarray:\n    sorted_color = \"count the number of the non-black color of the pixels in input_grid\"(input_grid)\n    output_grid = np.zeros_like(input_grid)\n    for i in range(len(sorted_color)):\n        color = sorted_color[i]\n        row = output_grid.shape[0] - 1 - i\n        number = output_grid.shape[1] - i\n        output_grid = \"put the number pixels of the color from right to left at the row in output_grid\"(color, row, number, output_grid)\n    return output_grid", "prompt": null, "subfunctions": ["count_non_black_pixels", "put_pixels_right_to_left_at_row"], "parent": null}}, "entry": "main"}