{"funs": {"get_non_black_pixels": {"code": "def get_non_black_pixels(input_grid: np.ndarray) -> List[Tuple[int, int]]:\n    non_black_pixels = []\n    for i in range(input_grid.shape[0]):\n        for j in range(input_grid.shape[1]):\n            if input_grid[i][j] != black and (i == 0 or j == 0):\n                non_black_pixels.append((i, j))\n    return non_black_pixels", "prompt": "get the location of all the pixels which are not black in the first row or in the first coloum", "subfunctions": [], "parent": "main"}, "get_pixel_color": {"code": "def get_pixel_color(grid: np.ndarray, loc: Tuple[int, int]) -> int:\n    return grid[loc[0]][loc[1]]", "prompt": "get the color of pixel", "subfunctions": [], "parent": "main"}, "change_pixels_in_bottom_right_direction": {"code": "def change_pixels_in_bottom_right_direction(grid: np.ndarray, loc: Tuple[int, int], color: int) -> np.ndarray:\n    i, j = loc\n    colour = color\n    while i < grid.shape[0] and j < grid.shape[1]:\n        if grid[i][j] != black:\n            grid[i][j] = colour\n        colour = yellow if colour != yellow else color\n        i += 1\n        j += 1\n    return grid", "prompt": null, "subfunctions": [], "parent": "main"}, "main": {"code": "def main(input_grid: np.ndarray) -> np.ndarray:\n    output_grid = input_grid\n    locs = \"get the location of all the pixels which are not black in the first row or in the first coloum\"(input_grid)\n    color = \"get the color of pixel\"(input_grid, locs[0])\n    for loc in locs:\n        output_grid = change_pixels_in_bottom_right_direction(output_grid, loc, color)\n    return output_grid", "prompt": null, "subfunctions": ["get_non_black_pixels", "get_pixel_color", "change_pixels_in_bottom_right_direction"], "parent": null}}, "entry": "main"}