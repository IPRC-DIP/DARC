{"funs": {"divide_into_2_matrices": {"code": "def divide_into_2_matrices(input_grid: np.ndarray) -> Tuple[np.ndarray, np.ndarray]:\n    m1 = input_grid[:3, :]\n    m2 = input_grid[3:, :]\n    return (m1, m2)", "prompt": "The input_grid is a 6x3 matrix, divide it into 2 3x3 matrices and return", "subfunctions": [], "parent": "main"}, "build_black_matrix": {"code": "def build_black_matrix() -> np.ndarray:\n    return np.full((3, 3), black)", "prompt": "Build a 3x3 matrix of black", "subfunctions": [], "parent": "main"}, "replace_black_pixels_with_red": {"code": "def replace_black_pixels_with_red(out: np.ndarray, m1: np.ndarray, m2: np.ndarray) -> np.ndarray:\n    for i in range(3):\n        for j in range(3):\n            if m1[i][j] == black and m2[i][j] == black:\n                out[i][j] = red\n    return out", "prompt": "for each pixel in out, if the corresponding pixels in m1 and m2 are both black, replace it with red", "subfunctions": [], "parent": "main"}, "main": {"code": "def main(input_grid: np.ndarray) -> np.ndarray:\n    m1, m2 = \"The input_grid is a 6x3 matrix, divide it into 2 3x3 matrices and return\"(input_grid)\n    out = \"Build a 3x3 matrix of black\"()\n    out = \"for each pixel in out, if the corresponding pixels in m1 and m2 are both black, replace it with red\"(out, m1, m2)\n    return out", "prompt": null, "subfunctions": ["divide_into_2_matrices", "build_black_matrix", "replace_black_pixels_with_red"], "parent": null}}, "entry": "main"}