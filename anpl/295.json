{"funs": {"get_corners": {"code": "def get_corners(input_grid: np.ndarray) -> List[np.ndarray]:\n    corners = []\n    corners.append(input_grid[:2, :2])\n    corners.append(input_grid[:2, -2:])\n    corners.append(input_grid[-2:, :2])\n    corners.append(input_grid[-2:, -2:])\n    return corners", "prompt": "get the four corners's 2x2 grid in the input_grid", "subfunctions": [], "parent": "main"}, "get_non_black_pixels_indices": {"code": "def get_non_black_pixels_indices(grid: np.ndarray) -> List[Tuple[int, int]]:\n    non_black_pixels = []\n    for i in range(grid.shape[0]):\n        for j in range(grid.shape[1]):\n            if grid[i, j] != black:\n                non_black_pixels.append((i, j))\n    return non_black_pixels", "prompt": "get the non_black_pixels' indices in corners[i]", "subfunctions": [], "parent": "main"}, "main": {"code": "def main(input_grid: np.ndarray) -> np.ndarray:\n    corners = \"get the four corners's 2x2 grid in the input_grid\"(input_grid)\n    output_grid = np.zeros([3, 3], dtype=np.int32)\n    for i in range(len(corners)):\n        non_black_pixels = \"get the non_black_pixels' indices in corners[i]\"(corners[i])\n        color = corners[i][non_black_pixels[0][0], non_black_pixels[0][1]]\n        for p in non_black_pixels:\n            x, y = p\n            output_grid[i // 2:2 + i // 2, i % 2:2 + i % 2][x, y] = color\n    return output_grid", "prompt": null, "subfunctions": ["get_corners", "get_non_black_pixels_indices"], "parent": null}}, "entry": "main"}