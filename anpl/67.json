{"funs": {"get_unique_color": {"code": "def get_unique_color(grid: np.ndarray) -> int:\n    \"\"\"\n    Given a 2D numpy array, find the color that appears only once in the array.\n\n    Args:\n    - grid: 2D numpy array of integers representing colors\n\n    Returns:\n    - unique_color: integer representing the color that appears only once in the array\n    \"\"\"\n    colors, counts = np.unique(grid, return_counts=True)\n    unique_color = colors[np.where(counts == 1)][0]\n    return unique_color", "prompt": "return the color that only appears once", "subfunctions": [], "parent": "main"}, "replace_pixels_except_b_with_black": {"code": "def replace_pixels_except_b_with_black(b: int, grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Given a 2D numpy array and an integer representing a color, replace all pixels except for the given color with black.\n\n    Args:\n    - b: integer representing the color to keep\n    - grid: 2D numpy array of integers representing colors\n\n    Returns:\n    - out: 2D numpy array with all pixels except for the given color replaced with black\n    \"\"\"\n    out = np.where(grid == b, b, black)\n    return out", "prompt": "replace all pixels except for b with black", "subfunctions": [], "parent": "main"}, "replace_pixels_around_b_with_red": {"code": "def replace_pixels_around_b_with_red(b: int, grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Given a 2D numpy array and an integer representing a color, replace the 8 pixels around the given color with red.\n\n    Args:\n    - b: integer representing the color to target\n    - grid: 2D numpy array of integers representing colors\n\n    Returns:\n    - out: 2D numpy array with the 8 pixels around the target color replaced with red\n    \"\"\"\n    height, width = grid.shape\n    out = np.copy(grid)\n    for i in range(height):\n        for j in range(width):\n            if grid[i][j] == b:\n                if i - 1 >= 0 and j - 1 >= 0:\n                    out[i - 1][j - 1] = red\n                if i - 1 >= 0:\n                    out[i - 1][j] = red\n                if i - 1 >= 0 and j + 1 < width:\n                    out[i - 1][j + 1] = red\n                if j - 1 >= 0:\n                    out[i][j - 1] = red\n                if j + 1 < width:\n                    out[i][j + 1] = red\n                if i + 1 < height and j - 1 >= 0:\n                    out[i + 1][j - 1] = red\n                if i + 1 < height:\n                    out[i + 1][j] = red\n                if i + 1 < height and j + 1 < width:\n                    out[i + 1][j + 1] = red\n    return out", "prompt": "replace the 8 pixels around b with red", "subfunctions": [], "parent": "main"}, "main": {"code": "def main(input_grid: np.ndarray) -> np.ndarray:\n    b = \"return the color that only appears once\"(input_grid)\n    out = \"replace all pixels except for b with black\"(b, input_grid)\n    out = \"replace the 8 pixels around b with red\"(b, out)\n    return out", "prompt": null, "subfunctions": ["get_unique_color", "replace_pixels_except_b_with_black", "replace_pixels_around_b_with_red"], "parent": null}}, "entry": "main"}