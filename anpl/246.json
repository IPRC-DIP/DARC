{"funs": {"get_colors": {"code": "def get_colors(input_grid: np.ndarray) -> List[int]:\n    return list(set(input_grid.flatten()))[1:]", "prompt": "get all color in input grid except black", "subfunctions": [], "parent": "main"}, "count_colors": {"code": "def count_colors(input_grid: np.ndarray, color_list: List[int]) -> List[int]:\n    color_num_list = []\n    for color in color_list:\n        color_num_list.append(np.count_nonzero(input_grid == color))\n    return color_num_list", "prompt": "count the number of Corresponding color in input_grid", "subfunctions": [], "parent": "main"}, "find_leftmost_position": {"code": "def find_leftmost_position(input_grid: np.ndarray, color_list: List[int]) -> List[int]:\n    leftmost_positions = []\n    for color in color_list:\n        for col in range(input_grid.shape[1]):\n            if color in input_grid[:, col]:\n                leftmost_positions.append(col)\n                break\n    return leftmost_positions", "prompt": "you get a input grid and a color list. you should find the leftmost cols in input grid for every color", "subfunctions": [], "parent": "main"}, "compare_colors": {"code": "def compare_colors(color_list: List[int], color_num_list: List[int]) -> Tuple[List[int], List[int]]:\n    max_color_list = []\n    max_color_num_list = []\n    max_color_num = max(color_num_list)\n    for i in range(len(color_list)):\n        if color_num_list[i] == max_color_num:\n            max_color_list.append(color_list[i])\n            max_color_num_list.append(color_num_list[i])\n    return (max_color_list, max_color_num_list)", "prompt": "compare the number of these colors to come up with the most numerous and equal colors", "subfunctions": [], "parent": "main"}, "sort_colors_by_position": {"code": "def sort_colors_by_position(color_list: List[int], color_position_list: List[int]) -> List[int]:\n    return [color for _, color in sorted(zip(color_position_list, color_list))]", "prompt": "sort the color list by the order of leftmost_position from small to big", "subfunctions": [], "parent": "main"}, "paint_columns": {"code": "def paint_columns(sorted_color_list: List[int], max_color_num_list: List[int]) -> np.ndarray:\n    output = np.zeros((max(max_color_num_list), len(sorted_color_list)))\n    for i, color in enumerate(sorted_color_list):\n        output[:max_color_num_list[i], i] = color\n    return output", "prompt": "paint one col per sorted_color, the number of row is the number of this color point", "subfunctions": [], "parent": "main"}, "main": {"code": "def main(input_grid: np.ndarray) -> np.ndarray:\n    color_list = \"get all color in input grid except black\"(input_grid)\n    color_num_list = \"count the number of Corresponding color in input_grid\"(input_grid, color_list)\n    color_position_list = \"you get a input grid and a color list. you should find the leftmost cols in input grid for every color\"(input_grid, color_list)\n    max_color_list, max_color_num_list = \"compare the number of these colors to come up with the most numerous and equal colors\"(color_list, color_num_list)\n    sorted_color_list = \"sort the color list by the order of leftmost_position from small to big\"(max_color_list, color_position_list)\n    output = \"paint one col per sorted_color, the number of row is the number of this color point\"(sorted_color_list, max_color_num_list)\n    return output", "prompt": null, "subfunctions": ["get_colors", "count_colors", "find_leftmost_position", "compare_colors", "sort_colors_by_position", "paint_columns"], "parent": null}}, "entry": "main"}