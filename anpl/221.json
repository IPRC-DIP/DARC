{"funs": {"find_rectangles": {"code": "def find_rectangles(input: np.ndarray) -> List[Tuple[int, int, int, int]]:\n    rectangles = []\n    rows, cols = input.shape\n    visited = np.zeros(input.shape, dtype=bool)\n    for i in range(rows):\n        for j in range(cols):\n            if input[i, j] != black and (not visited[i, j]):\n                color = input[i, j]\n                width = 1\n                height = 1\n                visited[i, j] = True\n                for k in range(j + 1, cols):\n                    if input[i, k] == color and (not visited[i, k]):\n                        width += 1\n                        visited[i, k] = True\n                    else:\n                        break\n                for k in range(i + 1, rows):\n                    if all(input[k, j:j + width] == color) and (not any(visited[k, j:j + width])):\n                        height += 1\n                        visited[k, j:j + width] = True\n                    else:\n                        break\n                rectangles.append((i, j, width, height))\n    return rectangles", "prompt": "find all the rectangles in the input. all the positions in one rectangle are the same color. note that black is not rectangle", "subfunctions": [], "parent": "main"}, "find_max_rectangle": {"code": "def find_max_rectangle(rectangles: List[Tuple[int, int, int, int]]) -> Tuple[int, int, int, int]:\n    max_area = 0\n    max_rectangle = None\n    for rectangle in rectangles:\n        i, j, width, height = rectangle\n        area = width * height\n        if area > max_area:\n            max_area = area\n            max_rectangle = rectangle\n    return max_rectangle", "prompt": "return the max rectangle according to the area", "subfunctions": [], "parent": "main"}, "main": {"code": "def main(input):\n    rectangles = \"find all the rectangles in the input. all the positions in one rectangle are the same color. note that black is not rectangle\"(input)\n    max_rectangle = \"return the max rectangle according to the area\"(rectangles)\n    output = np.zeros(input.shape, dtype=np.int32)\n    i, j, width, height = max_rectangle\n    output[i:i + height, j:j + width] = input[i:i + height, j:j + width]\n    return output", "prompt": null, "subfunctions": ["find_rectangles", "find_max_rectangle"], "parent": null}}, "entry": "main"}