{"funs": {"all_positions_same_color": {"code": "def all_positions_same_color(input: np.ndarray) -> bool:\n    \"\"\"\n    This function takes in a numpy array representing a grid of integers.\n    It returns True if all positions in the input are the same color, False otherwise.\n    \"\"\"\n    return (input == input[0, 0]).all()", "prompt": "all positions in the input is the same color", "subfunctions": [], "parent": "find_and_sort_colors"}, "find_top_left_position": {"code": "def find_top_left_position(input: np.ndarray, color: int) -> Tuple[int, int]:\n    \"\"\"\n    This function takes in a numpy array representing a grid of integers and a color.\n    It returns the most top left position with a different color than the given color.\n    \"\"\"\n    for i in range(len(input)):\n        for j in range(len(input[0])):\n            if input[i][j] != color:\n                return (i, j)\n    return (-1, -1)", "prompt": "find the most top left position with different color", "subfunctions": [], "parent": "find_and_sort_colors"}, "find_bottom_right_position": {"code": "def find_bottom_right_position(input: np.ndarray, color: int) -> Tuple[int, int]:\n    \"\"\"\n    This function takes in a numpy array representing a grid of integers and a color.\n    It returns the most bottom right position with a different color than the given color.\n    \"\"\"\n    for i in range(len(input) - 1, -1, -1):\n        for j in range(len(input[0]) - 1, -1, -1):\n            if input[i][j] != color:\n                return (i, j)\n    return (-1, -1)", "prompt": "find the most bottom right position with different color", "subfunctions": [], "parent": "find_and_sort_colors"}, "find_and_sort_colors": {"code": "def find_and_sort_colors(input):\n    color = []\n    while True:\n        color.append(input[0, 0])\n        if \"all positions in the input is the same color\"(input):\n            break\n        position_1 = \"find the most top left position with different color\"(input, color[-1])\n        position_2 = \"find the most bottom right position with different color\"(input, color[-1])\n        input = input[position_1[0]:position_2[0], position_1[1]:position_2[1]]\n    return color", "prompt": null, "subfunctions": ["all_positions_same_color", "find_top_left_position", "find_bottom_right_position"], "parent": "main"}, "color_output": {"code": "def color_output(output: np.ndarray, colors: List[int]) -> np.ndarray:\n    \"\"\"\n    This function takes in a numpy array representing an output grid and a list of colors.\n    It colors the output in a spiral pattern, starting from the outside and moving inwards, changing one circle at a time.\n    \"\"\"\n    color_index = 0\n    row_start = col_start = 0\n    row_end = col_end = output.shape[0] - 1\n    while row_start <= row_end and col_start <= col_end:\n        for j in range(col_start, col_end + 1):\n            output[row_start][j] = colors[color_index]\n        row_start += 1\n        for i in range(row_start, row_end + 1):\n            output[i][col_end] = colors[color_index]\n        col_end -= 1\n        if row_start <= row_end:\n            for j in range(col_end, col_start - 1, -1):\n                output[row_end][j] = colors[color_index]\n            row_end -= 1\n        if col_start <= col_end:\n            for i in range(row_end, row_start - 1, -1):\n                output[i][col_start] = colors[color_index]\n            col_start += 1\n        color_index += 1\n    return output", "prompt": "color the output according to the colors given, notice that you should color the output from outside to inside and every time you color, only change one circle", "subfunctions": [], "parent": "main"}, "main": {"code": "def main(input_grid):\n    exist_colors = find_and_sort_colors(input_grid)\n    number_colors = len(exist_colors)\n    output = np.zeros((2 * number_colors - 1, 2 * number_colors - 1), dtype=np.int32)\n    output = \"color the output according to the colors given, notice that you should color the output from outside to inside and every time you color, only change one circle\"(output, exist_colors)\n    return output", "prompt": null, "subfunctions": ["find_and_sort_colors", "color_output"], "parent": null}}, "entry": "main"}