{"funs": {"find_smallest_row": {"code": "def find_smallest_row(input_grid: np.ndarray) -> int:\n    for i in range(input_grid.shape[0]):\n        if not np.all(input_grid[i] == black):\n            return i\n    return input_grid.shape[0]", "prompt": " finf the smallest numbers of row of not-black point in input_grid", "subfunctions": [], "parent": "main"}, "find_smallest_col": {"code": "def find_smallest_col(input_grid: np.ndarray) -> int:\n    for i in range(input_grid.shape[1]):\n        if not np.all(input_grid[:, i] == black):\n            return i\n    return input_grid.shape[1]", "prompt": "you get a 10*10 grid with different color. You should find all non-black point and get the smallest number of col", "subfunctions": [], "parent": "main"}, "cut_six_by_six": {"code": "def cut_six_by_six(input_grid: np.ndarray, row: int, col: int) -> np.ndarray:\n    return input_grid[row:row + 6, col:col + 6]", "prompt": "cut a 6*6 grid form input_grid in (row,col)", "subfunctions": [], "parent": "main"}, "cut_three_by_three": {"code": "def cut_three_by_three(inner_grid: np.ndarray) -> np.ndarray:\n    return inner_grid[:3, :3]", "prompt": "cut a 3*3 grid from top-left in inner_grid", "subfunctions": [], "parent": "main"}, "main": {"code": "def main(input_grid: np.ndarray) -> np.ndarray:\n    smallest_row = \" finf the smallest numbers of row of not-black point in input_grid\"(input_grid)\n    smallest_col = \"you get a 10*10 grid with different color. You should find all non-black point and get the smallest number of col\"(input_grid)\n    inner_grid = \"cut a 6*6 grid form input_grid in (row,col)\"(input_grid, smallest_row, smallest_col)\n    output = \"cut a 3*3 grid from top-left in inner_grid\"(inner_grid)\n    return output", "prompt": null, "subfunctions": ["find_smallest_row", "find_smallest_col", "cut_six_by_six", "cut_three_by_three"], "parent": null}}, "entry": "main"}