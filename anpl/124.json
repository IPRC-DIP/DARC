{"funs": {"update_pixels": {"code": "def update_pixels(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    This function updates the color of pixels in the input grid based on the given conditions.\n    \n    Args:\n    input_grid: A numpy array representing the input grid with multiple color pixels.\n    \n    Returns:\n    A numpy array representing the updated grid after applying the given conditions.\n    \"\"\"\n    n = input_grid.shape[0]\n    ans_grid = input_grid.copy()\n    for i in range(n):\n        for j in range(n):\n            if ans_grid[i][j] == teal:\n                count = 0\n                if i > 0 and ans_grid[i - 1][j] == pink:\n                    count += 1\n                if i < n - 1 and ans_grid[i + 1][j] == pink:\n                    count += 1\n                if j > 0 and ans_grid[i][j - 1] == pink:\n                    count += 1\n                if j < n - 1 and ans_grid[i][j + 1] == pink:\n                    count += 1\n                if count >= 2:\n                    ans_grid[i][j] = yellow\n                elif count == 1:\n                    ans_grid[i][j] = green\n    return ans_grid", "prompt": "Go through all the pixels,The current pixel is in the boundary, only consider the pixel within the boundary. if a pixel is teal and one of the four surrounding pixels is pink, change the pixel to green. If a pixel is teal and two or more of the four pixels around it are pink, change the pixel to yellow", "subfunctions": [], "parent": "main"}, "update_teal_pixels": {"code": "def update_teal_pixels(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    This function updates the color of teal pixels in the input grid based on the given conditions.\n\n    Args:\n    input_grid: A numpy array representing the input grid with multiple color pixels.\n\n    Returns:\n    A numpy array representing the updated grid after applying the given conditions.\n    \"\"\"\n    n = input_grid.shape[0]\n    ans_grid = input_grid.copy()\n    for i in range(n):\n        for j in range(n):\n            if ans_grid[i][j] == teal:\n                count_green = 0\n                count_pink = 0\n                for x in range(i - 1, i + 2):\n                    for y in range(j - 1, j + 2):\n                        if x < 0 or x >= n or y < 0 or (y >= n):\n                            continue\n                        if ans_grid[x][y] == green:\n                            count_green += 1\n                        elif ans_grid[x][y] == pink:\n                            count_pink += 1\n                if count_green >= 2 and count_pink >= 1:\n                    ans_grid[i][j] = green\n    return ans_grid", "prompt": "This function updates the color of teal pixels in the input grid based on the given conditions.\n\nArgs:\ninput_grid: A numpy array representing the input grid with multiple color pixels.\n\nReturns:\nA numpy array representing the updated grid after applying the given conditions.", "subfunctions": [], "parent": "main"}, "main": {"code": "def main(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    In the input, you should see a n*n grid with multiple color pixels.\n    \"\"\"\n    ans_grid = \"Go through all the pixels,The current pixel is in the boundary, only consider the pixel within the boundary. if a pixel is teal and one of the four surrounding pixels is pink, change the pixel to green. If a pixel is teal and two or more of the four pixels around it are pink, change the pixel to yellow\"(input_grid)\n    ans_grid = \"This function updates the color of teal pixels in the input grid based on the given conditions.\n\nArgs:\ninput_grid: A numpy array representing the input grid with multiple color pixels.\n\nReturns:\nA numpy array representing the updated grid after applying the given conditions.\"(ans_grid)\n    return ans_grid", "prompt": "In the input, you should see a n*n grid with multiple color pixels.", "subfunctions": ["update_pixels", "update_teal_pixels"], "parent": null}}, "entry": "main"}