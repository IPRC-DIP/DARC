{"funs": {"is_blue_pixel_reached_top": {"code": "def is_blue_pixel_reached_top(input_grid: np.ndarray) -> bool:\n    return blue in input_grid[0]", "prompt": "Is blue pixel reach the top", "subfunctions": [], "parent": "main"}, "copy_blue_pixel_right_up": {"code": "def copy_blue_pixel_right_up(input_grid: np.ndarray, i: int, j: int) -> Tuple[int, int]:\n    while i > 0 and j < input_grid.shape[1] - 1:\n        if input_grid[i][j] == blue:\n            input_grid[i - 1][j + 1] = blue\n        j += 1\n        i -= 1\n    return (i, j)", "prompt": null, "subfunctions": [], "parent": "main"}, "copy_blue_pixel_left_up": {"code": "def copy_blue_pixel_left_up(input_grid: np.ndarray, i: int, j: int) -> Tuple[int, int]:\n    while i > 0 and j > 0:\n        if input_grid[i][j] == blue:\n            input_grid[i - 1][j - 1] = blue\n        j -= 1\n        i -= 1\n    return (i, j)", "prompt": null, "subfunctions": [], "parent": "main"}, "change_black_to_teal": {"code": "def change_black_to_teal(input_grid: np.ndarray) -> None:\n    input_grid[input_grid == black] = teal", "prompt": "color black points to teal", "subfunctions": [], "parent": "main"}, "main": {"code": "def main(input_grid: np.ndarray) -> np.ndarray:\n    flag = \"Is blue pixel reach the top\"(input_grid)\n    i, j = (input_grid.shape[0] - 1, 0)\n    while not flag:\n        i, j = copy_blue_pixel_right_up(input_grid, i, j)\n        i, j = copy_blue_pixel_left_up(input_grid, i, j)\n        flag = \"Is blue pixel reach the top\"(input_grid)\n    \"color black points to teal\"(input_grid)\n    return input_grid", "prompt": null, "subfunctions": ["is_blue_pixel_reached_top", "copy_blue_pixel_right_up", "copy_blue_pixel_left_up", "change_black_to_teal"], "parent": null}}, "entry": "main"}