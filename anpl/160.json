{"funs": {"find_least_color": {"code": "def find_least_color(input_grid: np.ndarray) -> int:\n    \"\"\"\n    Given a 2D numpy array, returns the least occurring color in the array.\n    \n    Parameters:\n    input_grid (np.ndarray): A 2D numpy array representing the input grid.\n    \n    Returns:\n    int: An integer representing the least occurring color in the array.\n    \"\"\"\n    colors, counts = np.unique(input_grid, return_counts=True)\n    least_color = colors[np.argmin(counts)]\n    return least_color", "prompt": " Find the least color ", "subfunctions": [], "parent": "main"}, "find_rows_with_color_in_first_column": {"code": "def find_rows_with_color_in_first_column(input_grid: np.ndarray, color: int) -> List[int]:\n    \"\"\"\n    Given a 2D numpy array and a color, returns a list of rows where the color is present in the first column.\n    \n    Parameters:\n    input_grid (np.ndarray): A 2D numpy array representing the input grid.\n    color (int): An integer representing the color to search for.\n    \n    Returns:\n    List[int]: A list of integers representing the rows where the color is present in the first column.\n    \"\"\"\n    rows_with_color = []\n    for i in range(input_grid.shape[0]):\n        if input_grid[i][0] == color:\n            rows_with_color.append(i)\n    return rows_with_color", "prompt": " In the first column, find the squares with the input color, and return a list to record the row where the squares are located ", "subfunctions": [], "parent": "main"}, "find_columns_with_color_in_first_row": {"code": "def find_columns_with_color_in_first_row(input_grid: np.ndarray, color: int) -> List[int]:\n    \"\"\"\n    Given a 2D numpy array and a color, returns a list of columns where the color is present in the first row.\n    \n    Parameters:\n    input_grid (np.ndarray): A 2D numpy array representing the input grid.\n    color (int): An integer representing the color to search for.\n    \n    Returns:\n    List[int]: A list of integers representing the columns where the color is present in the first row.\n    \"\"\"\n    columns_with_color = []\n    for i in range(input_grid.shape[1]):\n        if input_grid[0][i] == color:\n            columns_with_color.append(i)\n    return columns_with_color", "prompt": " In the first row, find the squares with the input color, and return a list to record the column where the squares are located ", "subfunctions": [], "parent": "main"}, "change_rows_to_color": {"code": "def change_rows_to_color(input_grid: np.ndarray, color: int, rows: List[int]) -> np.ndarray:\n    \"\"\"\n    Given a 2D numpy array, a color, and a list of rows, changes all the cells in the specified rows to the input color.\n    \n    Parameters:\n    input_grid (np.ndarray): A 2D numpy array representing the input grid.\n    color (int): An integer representing the color to change to.\n    rows (List[int]): A list of integers representing the rows to change.\n    \n    Returns:\n    np.ndarray: A 2D numpy array with the specified rows changed to the input color.\n    \"\"\"\n    for row in rows:\n        input_grid[row, :] = color\n    return input_grid", "prompt": " Change all rows in list1 to the input color ", "subfunctions": [], "parent": "main"}, "change_columns_to_color": {"code": "def change_columns_to_color(input_grid: np.ndarray, color: int, columns: List[int]) -> np.ndarray:\n    \"\"\"\n    Given a 2D numpy array, a color, and a list of columns, changes all the cells in the specified columns to the input color.\n    \n    Parameters:\n    input_grid (np.ndarray): A 2D numpy array representing the input grid.\n    color (int): An integer representing the color to change to.\n    columns (List[int]): A list of integers representing the columns to change.\n    \n    Returns:\n    np.ndarray: A 2D numpy array with the specified columns changed to the input color.\n    \"\"\"\n    for column in columns:\n        input_grid[:, column] = color\n    return input_grid", "prompt": " Change all columns in list2 to the input color ", "subfunctions": [], "parent": "main"}, "main": {"code": "def main(input_grid: np.ndarray) -> np.ndarray:\n    color = \" Find the least color \"(input_grid)\n    list1 = \" In the first column, find the squares with the input color, and return a list to record the row where the squares are located \"(input_grid, color)\n    list2 = \" In the first row, find the squares with the input color, and return a list to record the column where the squares are located \"(input_grid, color)\n    row = input_grid.shape[0]\n    column = input_grid.shape[1]\n    output_grid = np.zeros((row, column), dtype=int)\n    output_grid = \" Change all rows in list1 to the input color \"(output_grid, color, list1)\n    output_grid = \" Change all columns in list2 to the input color \"(output_grid, color, list2)\n    return output_grid", "prompt": null, "subfunctions": ["find_least_color", "find_rows_with_color_in_first_column", "find_columns_with_color_in_first_row", "change_rows_to_color", "change_columns_to_color"], "parent": null}}, "entry": "main"}