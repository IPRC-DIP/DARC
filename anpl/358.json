{"funs": {"find_most_frequent_color_in_row": {"code": "def find_most_frequent_color_in_row(grid: np.ndarray) -> List[int]:\n    \"\"\"\n    Find the color with the most occurrences in each row of the input grid.\n    :param grid: 2D numpy array representing the input grid\n    :return: List of integers representing the most frequent color in each row\n    \"\"\"\n    return [np.bincount(row).argmax() for row in grid]", "prompt": "find the color with the most occurrences in each row, return a list of int", "subfunctions": [], "parent": "main"}, "rotate_if_needed": {"code": "def rotate_if_needed(input_grid: np.ndarray, colors: List[int]) -> Tuple[bool, np.ndarray]:\n    \"\"\"\n    If the most frequent color in each row occurs less than 50% of the time, rotate the input grid by 90 degrees.\n    :param input_grid: 2D numpy array representing the input grid\n    :param colors: List of most frequent colors in each row\n    :return: Tuple of boolean indicating whether the grid was rotated and the rotated grid\n    \"\"\"\n    threshold = input_grid.shape[1] // 2\n    has_rotate = False\n    for i, row in enumerate(input_grid):\n        if np.count_nonzero(row == colors[i]) < threshold:\n            input_grid = np.rot90(input_grid)\n            has_rotate = True\n            break\n    return (has_rotate, input_grid)", "prompt": "if the most frequent color in each row occurs less than 50% of the time, rotate the input grid by 90 degrees.", "subfunctions": [], "parent": "main"}, "extend_column_to_grid": {"code": "def extend_column_to_grid(column: np.ndarray, n: int) -> np.ndarray:\n    \"\"\"\n    Extend a column to a grid with n columns.\n    :param column: 1D numpy array representing the column to be extended\n    :param n: integer representing the number of columns in the output grid\n    :return: 2D numpy array representing the output grid\n    \"\"\"\n    return np.tile(column, (n, 1)).T", "prompt": "extend a column to a grid with n", "subfunctions": [], "parent": "main"}, "rotate_270": {"code": "def rotate_270(grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Rotate the input grid by 270 degrees.\n    :param grid: 2D numpy array representing the input grid\n    :return: 2D numpy array representing the rotated grid\n    \"\"\"\n    return np.rot90(grid, k=3)", "prompt": "rotate the grid by 270", "subfunctions": [], "parent": "main"}, "main": {"code": "def main(input_grid: np.ndarray) -> np.ndarray:\n    colors = \"find the color with the most occurrences in each row, return a list of int\"(input_grid)\n    has_rotate, input_grid = \"if the most frequent color in each row occurs less than 50% of the time, rotate the input grid by 90 degrees.\"(input_grid, colors)\n    colors = \"find the color with the most occurrences in each row, return a list of int\"(input_grid)\n    output_grid = \"extend a column to a grid with n\"(np.array(colors), n=input_grid.shape[1])\n    if has_rotate:\n        output_grid = \"rotate the grid by 270\"(output_grid)\n    return output_grid", "prompt": null, "subfunctions": ["find_most_frequent_color_in_row", "rotate_if_needed", "extend_column_to_grid", "rotate_270"], "parent": null}}, "entry": "main"}