{"funs": {"count_colors": {"code": "def count_colors(input_grid: np.ndarray) -> int:\n    n = len(np.unique(input_grid)) - 1\n    return n", "prompt": "Determine the number of colors in the image matrix, labeled as n. Note that black is a background color and should not be counted", "subfunctions": [], "parent": "main"}, "create_black_image": {"code": "def create_black_image(n: int) -> np.ndarray:\n    return np.zeros((3 * n, 3 * n))", "prompt": "Create a black image matrix of size 3n*3n", "subfunctions": [], "parent": "main"}, "modify_pixel_color": {"code": "def modify_pixel_color(input_grid: np.ndarray, output_grid: np.ndarray, n: int) -> np.ndarray:\n    for i in range(len(output_grid)):\n        for j in range(len(output_grid[0])):\n            output_grid[i][j] = input_grid[int(i / n)][int(j / n)]\n    return output_grid", "prompt": "Traverse the output_grid image matrix and modify the color of each pixel. For a pixel at coordinate (i,j), the color value should be the same as the pixel color at position (int(i/n), int(j/n)) in input_grid.", "subfunctions": [], "parent": "main"}, "main": {"code": "def main(input_grid: np.ndarray) -> np.ndarray:\n    n = \"Determine the number of colors in the image matrix, labeled as n. Note that black is a background color and should not be counted\"(input_grid)\n    output_grid = \"Create a black image matrix of size 3n*3n\"(n)\n    output_grid = \"Traverse the output_grid image matrix and modify the color of each pixel. For a pixel at coordinate (i,j), the color value should be the same as the pixel color at position (int(i/n), int(j/n)) in input_grid.\"(input_grid, output_grid, n)\n    return output_grid", "prompt": null, "subfunctions": ["count_colors", "create_black_image", "modify_pixel_color"], "parent": null}}, "entry": "main"}