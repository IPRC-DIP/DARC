{"funs": {"find_color": {"code": "def find_color(input_grid: np.ndarray) -> int:\n    for i in range(1, input_grid.shape[0]):\n        for j in range(1, input_grid.shape[1]):\n            if input_grid[i][j] == black and input_grid[i - 1][j] != black and (input_grid[i][j - 1] != black):\n                return input_grid[i][j - 1]\n    return -1", "prompt": " Find a black square with a non-black square on its upper and left sides, and record the color of the non-black square ", "subfunctions": [], "parent": "main"}, "find_non_black_square_on_upper_right": {"code": "def find_non_black_square_on_upper_right(input_grid: np.ndarray) -> int:\n    for i in range(1, input_grid.shape[0]):\n        for j in range(1, input_grid.shape[1]):\n            if input_grid[i][j] == black and input_grid[i - 1][j] != black and (input_grid[i][j + 1] != black):\n                return input_grid[i][j + 1]\n    return -1", "prompt": null, "subfunctions": [], "parent": "main"}, "find_non_black_square_on_lower_left": {"code": "def find_non_black_square_on_lower_left(input_grid: np.ndarray) -> int:\n    for i in range(input_grid.shape[0] - 1):\n        for j in range(input_grid.shape[1] - 1):\n            if input_grid[i][j] == black and input_grid[i + 1][j] != black and (input_grid[i][j - 1] != black):\n                return input_grid[i][j - 1]\n    return -1", "prompt": null, "subfunctions": [], "parent": "main"}, "find_color_of_non_black_square_on_lower_right": {"code": "def find_color_of_non_black_square_on_lower_right(input_grid: np.ndarray) -> int:\n    for i in range(input_grid.shape[0] - 1):\n        for j in range(input_grid.shape[1] - 1):\n            if input_grid[i][j] == black and input_grid[i + 1][j] != black and (input_grid[i][j + 1] != black):\n                return input_grid[i + 1][j + 1]\n    return -1", "prompt": " Find a black square with a non-black square on its lower and right sides, and record the color of the non-black square ", "subfunctions": [], "parent": "main"}, "change_input_points_to_input_color": {"code": "def change_input_points_to_input_color(output_grid: np.ndarray, color: int, points: List[Tuple[int, int]]) -> np.ndarray:\n    for point in points:\n        output_grid[point[0]][point[1]] = color\n    return output_grid", "prompt": " Change the input points to the input color", "subfunctions": [], "parent": "main"}, "main": {"code": "def main(input_grid: np.ndarray) -> np.ndarray:\n    color1 = \" Find a black square with a non-black square on its upper and left sides, and record the color of the non-black square \"(input_grid)\n    color2 = find_non_black_square_on_upper_right(input_grid)\n    color3 = find_non_black_square_on_lower_left(input_grid)\n    color4 = \" Find a black square with a non-black square on its lower and right sides, and record the color of the non-black square \"(input_grid)\n    output_grid = np.zeros((4, 4), dtype=int)\n    output_grid = \" Change the input points to the input color\"(output_grid, color1, [(0, 0), (0, 1), (1, 0)])\n    output_grid = \" Change the input points to the input color\"(output_grid, color2, [(0, 2), (0, 3), (1, 3)])\n    output_grid = \" Change the input points to the input color\"(output_grid, color3, [(2, 0), (3, 0), (3, 1)])\n    output_grid = \" Change the input points to the input color\"(output_grid, color4, [(2, 3), (3, 2), (3, 3)])\n    return output_grid", "prompt": null, "subfunctions": ["find_color", "find_non_black_square_on_upper_right", "find_non_black_square_on_lower_left", "find_color_of_non_black_square_on_lower_right", "change_input_points_to_input_color"], "parent": null}}, "entry": "main"}