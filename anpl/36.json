{"funs": {"find_non_black_colors": {"code": "def find_non_black_colors(input_grid: np.ndarray) -> List[int]:\n    color_list = []\n    for row in input_grid:\n        for color in row:\n            if color != black and color not in color_list:\n                color_list.append(color)\n    return color_list", "prompt": "find the list of non-black color in the grid, ignore duplicates", "subfunctions": [], "parent": "main"}, "find_block_indices": {"code": "def find_block_indices(input_grid: np.ndarray, color: int) -> List[Tuple[int, int]]:\n    indices = []\n    for i in range(input_grid.shape[0]):\n        for j in range(input_grid.shape[1]):\n            if input_grid[i][j] == color:\n                indices.append((i, j))\n    return indices", "prompt": "find the list of index of 2 blocks with the corresponding color in the grid", "subfunctions": [], "parent": "main"}, "find_indexes_on_connection_line": {"code": "def find_indexes_on_connection_line(point1: Tuple[int, int], point2: Tuple[int, int]) -> List[Tuple[int, int]]:\n    x1, y1 = point1\n    x2, y2 = point2\n    dx = x2 - x1\n    dy = y2 - y1\n    if dx == 0 or dy == 0:\n        return []\n    slope = dy / dx\n    if abs(slope) != 1:\n        return []\n    x_step = 1 if dx > 0 else -1\n    y_step = 1 if dy > 0 else -1\n    x, y = (x1 + x_step, y1 + y_step)\n    indexes = []\n    while x != x2:\n        indexes.append((x, y))\n        x += x_step\n        y += y_step\n    return indexes", "prompt": "find the indexes of blocks on the connection line of 2 corresponding blocks, assuming the connection line is 45 degree with axis", "subfunctions": [], "parent": "connect_diagonal_blocks"}, "connect_diagonal_blocks": {"code": "def connect_diagonal_blocks(input_grid: np.ndarray, point_list: List[Tuple[int, int]], color: int) -> np.ndarray:\n    points = \"find the indexes of blocks on the connection line of 2 corresponding blocks, assuming the connection line is 45 degree with axis\"(point_list[0], point_list[1])\n    for point in points:\n        input_grid[point] = color\n    return input_grid", "prompt": null, "subfunctions": ["find_indexes_on_connection_line"], "parent": "main"}, "main": {"code": "def main(input_grid: np.ndarray) -> np.ndarray:\n    color_list = \"find the list of non-black color in the grid, ignore duplicates\"(input_grid)\n    output_grid = np.copy(input_grid)\n    for color in color_list:\n        point_list = \"find the list of index of 2 blocks with the corresponding color in the grid\"(input_grid, color)\n        output_grid = connect_diagonal_blocks(output_grid, point_list, color)\n    return output_grid", "prompt": null, "subfunctions": ["find_non_black_colors", "find_block_indices", "connect_diagonal_blocks"], "parent": null}}, "entry": "main"}