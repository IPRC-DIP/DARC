{"funs": {"flip_left_right": {"code": "def flip_left_right(input_grid: np.ndarray) -> np.ndarray:\n    return np.fliplr(input_grid)", "prompt": "flip the grid left and right", "subfunctions": [], "parent": "main"}, "concat_horizontally": {"code": "def concat_horizontally(input_grid: np.ndarray, mirrored_grid: np.ndarray) -> np.ndarray:\n    return np.concatenate((input_grid, mirrored_grid), axis=1)", "prompt": "concat the two grids horizontally", "subfunctions": [], "parent": "main"}, "flip_up_down": {"code": "def flip_up_down(input_grid: np.ndarray) -> np.ndarray:\n    return np.flipud(input_grid)", "prompt": "flip the grid up and down", "subfunctions": [], "parent": "main"}, "concat_vertically": {"code": "def concat_vertically(input_grid: np.ndarray, mirrored_grid: np.ndarray) -> np.ndarray:\n    return np.concatenate((input_grid, mirrored_grid), axis=0)", "prompt": "concat the two grids vertically", "subfunctions": [], "parent": "main"}, "main": {"code": "def main(input_grid: np.ndarray) -> np.ndarray:\n    mirrored_grid = \"flip the grid left and right\"(input_grid)\n    output_grid = \"concat the two grids horizontally\"(input_grid, mirrored_grid)\n    mirrored_output_grid = \"flip the grid up and down\"(output_grid)\n    output_grid = \"concat the two grids vertically\"(output_grid, mirrored_output_grid)\n    return output_grid", "prompt": null, "subfunctions": ["flip_left_right", "concat_horizontally", "flip_up_down", "concat_vertically"], "parent": null}}, "entry": "main"}