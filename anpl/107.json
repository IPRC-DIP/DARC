{"funs": {"count_colors": {"code": "def count_colors(input_grid: np.ndarray) -> int:\n    \"\"\"\n    Counts the total number of different colors (excluding black) in the input grid.\n\n    Args:\n    input_grid: A numpy array representing the input grid.\n\n    Returns:\n    An integer representing the total number of different colors (excluding black) in the input grid.\n    \"\"\"\n    unique_colors = set()\n    for row in input_grid:\n        for pixel in row:\n            if pixel != black:\n                unique_colors.add(pixel)\n    return len(unique_colors)", "prompt": "Traverse the image and count the total number of different colors (excluding black).", "subfunctions": [], "parent": "main"}, "fill_adjacent_pixels_with_color": {"code": "def fill_adjacent_pixels_with_color(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Traverse the input grid, and if a non-black colored pixel is encountered, fill the adjacent pixels with the same color.\n\n    Args:\n    input_grid: A numpy array representing the input grid.\n\n    Returns:\n    A numpy array representing the modified input grid.\n    \"\"\"\n    for i in range(1, input_grid.shape[0]):\n        for j in range(1, input_grid.shape[1]):\n            if input_grid[i][j] != black:\n                color = input_grid[i][j]\n                input_grid[i - 1][j] = color\n                input_grid[i][j - 1] = color\n                input_grid[i - 1][j - 1] = color\n    return input_grid", "prompt": "Traverse the image, and if a non-black colored pixel is encountered, perform the following operation: (assuming the current visited coordinate is (i,j)) get the color c of the current pixel and fill the pixels (i-1,j), (i,j-1), (i-1,j-1) with color c.", "subfunctions": [], "parent": "main"}, "enlarge_image": {"code": "def enlarge_image(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Enlarges the input grid proportionally to twice its original size (both width and height are doubled).\n\n    Args:\n    input_grid: A numpy array representing the input grid.\n\n    Returns:\n    A numpy array representing the enlarged input grid.\n    \"\"\"\n    return np.kron(input_grid, np.ones((2, 2), dtype=input_grid.dtype))", "prompt": "Enlarge the image proportionally to twice its original size (both width and height are doubled).", "subfunctions": [], "parent": "main"}, "main": {"code": "def main(input_grid: np.ndarray) -> np.ndarray:\n    n = \"Traverse the image and count the total number of different colors (excluding black).\"(input_grid)\n    input_grid = \"Traverse the image, and if a non-black colored pixel is encountered, perform the following operation: (assuming the current visited coordinate is (i,j)) get the color c of the current pixel and fill the pixels (i-1,j), (i,j-1), (i-1,j-1) with color c.\"(input_grid)\n    input_grid = \"Enlarge the image proportionally to twice its original size (both width and height are doubled).\"(input_grid)\n    return input_grid", "prompt": null, "subfunctions": ["count_colors", "fill_adjacent_pixels_with_color", "enlarge_image"], "parent": null}}, "entry": "main"}