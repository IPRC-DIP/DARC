{"funs": {"find_red_horizontal_line": {"code": "def find_red_horizontal_line(input_grid: np.ndarray) -> Tuple[int, int]:\n    \"\"\"\n    Finds the index and length of a red horizontal line in the input grid.\n\n    Args:\n    - input_grid: a 2D numpy array representing the input grid\n\n    Returns:\n    - a tuple of two integers representing the index and length of the red horizontal line\n    \"\"\"\n    red_line = np.where(input_grid == red)[0]\n    index = red_line[0]\n    length = len(red_line)\n    return (index, length)", "prompt": "the input is a 2D numpy array, find the index and length of red horizatal line in the grid, the line may not use all pixels in the same row.", "subfunctions": [], "parent": "main"}, "color_rows_above_red": {"code": "def color_rows_above_red(r: int, l: int, input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Colors the rows above the red horizontal line in green, with the length of line in the row next to r and above r\n    being 1 more than l, and the length in each row above being 1 more than the row below it.\n\n    Args:\n    - r: an integer representing the index of the red horizontal line\n    - l: an integer representing the length of the red horizontal line\n    - input_grid: a 2D numpy array representing the input grid\n\n    Returns:\n    - a 2D numpy array representing the updated grid\n    \"\"\"\n    for i in range(r - 1, -1, -1):\n        input_grid[i, :l + 1] = green\n        l += 1\n    return input_grid", "prompt": "color the rows above r in green, starting from r-1 to the top, the length in each row above should be 1 more than the row below it, return the grid, the length in a row means the first length pixels in the row", "subfunctions": [], "parent": "main"}, "color_rows_below_red": {"code": "def color_rows_below_red(r: int, l: int, input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Colors the rows below the red horizontal line in blue, with the length of line in the row next to r and below r\n    being 1 less than l, and the length in each row below being 1 less than the row above it. \n    Stops when the length equals to 0.\n\n    Args:\n    - r: an integer representing the index of the red horizontal line\n    - l: an integer representing the length of the red horizontal line\n    - input_grid: a 2D numpy array representing the input grid\n\n    Returns:\n    - a 2D numpy array representing the updated grid\n    \"\"\"\n    length = l - 1\n    for i in range(r + 1, input_grid.shape[0]):\n        if length == 0:\n            break\n        input_grid[i, :length] = blue\n        length -= 1\n    return input_grid", "prompt": "color the rows below r in blue, the length of line in the row next to r and below r should 1 less than l, then the length in each row below should be 1 less than the row above it, return the grid, the length in a row means the first length pixels in the row, stop if the length equals to 0", "subfunctions": [], "parent": "main"}, "main": {"code": "def main(input_grid: np.ndarray) -> np.ndarray:\n    r, l = \"the input is a 2D numpy array, find the index and length of red horizatal line in the grid, the line may not use all pixels in the same row.\"(input_grid)\n    above = \"color the rows above r in green, starting from r-1 to the top, the length in each row above should be 1 more than the row below it, return the grid, the length in a row means the first length pixels in the row\"(r, l, input_grid)\n    out = \"color the rows below r in blue, the length of line in the row next to r and below r should 1 less than l, then the length in each row below should be 1 less than the row above it, return the grid, the length in a row means the first length pixels in the row, stop if the length equals to 0\"(r, l, above)\n    return out", "prompt": null, "subfunctions": ["find_red_horizontal_line", "color_rows_above_red", "color_rows_below_red"], "parent": null}}, "entry": "main"}