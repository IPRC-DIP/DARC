{"funs": {"find_num_non_black_in_first_row": {"code": "def find_num_non_black_in_first_row(input_grid: np.ndarray) -> int:\n    return len(set(input_grid[0])) - 1", "prompt": "find the number of non-black colors in the first row", "subfunctions": [], "parent": "main"}, "rotate_if": {"code": "def rotate_if(grid: np.ndarray, num_non_black: int) -> np.ndarray:\n    \"\"\"\n    If the num_non_black is not 1, rotate the grid 90 degrees.\n    \n    Args:\n    - grid (np.ndarray): The input grid to be rotated.\n    - num_non_black (int): The number of non-black colors in the first row of the grid.\n    \n    Returns:\n    - np.ndarray: The rotated grid if num_non_black is not 1, otherwise the original grid.\n    \"\"\"\n    if num_non_black != 1:\n        return np.rot90(grid)\n    else:\n        return grid", "prompt": "if the num_non_black is not 1, rotate the grid 90 degrees", "subfunctions": [], "parent": "main"}, "find_all_black_pixels": {"code": "def find_all_black_pixels(input_grid: np.ndarray) -> List[Tuple[int, int]]:\n    black_pixels_coordinates = []\n    for i in range(input_grid.shape[0]):\n        for j in range(input_grid.shape[1]):\n            if input_grid[i][j] == black:\n                black_pixels_coordinates.append((i, j))\n    return black_pixels_coordinates", "prompt": "find all coordinates of all black pixels in input grid", "subfunctions": [], "parent": "main"}, "find_surrounding_colors": {"code": "def find_surrounding_colors(input_grid: np.ndarray, coordinate: Tuple[int, int]) -> List[int]:\n    i, j = coordinate\n    surrounding_colors = []\n    for x in range(i - 1, i + 2):\n        for y in range(j - 1, j + 2):\n            if x >= 0 and y >= 0 and (x < input_grid.shape[0]) and (y < input_grid.shape[1]) and ((x, y) != (i, j)):\n                surrounding_colors.append(input_grid[x][y])\n    return surrounding_colors", "prompt": "find all surrounding colors", "subfunctions": [], "parent": "main"}, "paint_same_color_pixels_black": {"code": "def paint_same_color_pixels_black(grid, coordinate, colors):\n    color = colors.pop()\n    col = grid[:, coordinate[1]]\n    col[col == color] = black", "prompt": null, "subfunctions": [], "parent": "main"}, "main": {"code": "def main(input_grid: np.ndarray) -> np.ndarray:\n    output_grid = input_grid.copy()\n    num_non_black = \"find the number of non-black colors in the first row\"(input_grid)\n    output_grid = \"if the num_non_black is not 1, rotate the grid 90 degrees\"(output_grid, num_non_black)\n    black_pixels_coordinates = \"find all coordinates of all black pixels in input grid\"(input_grid)\n    for coordinate in black_pixels_coordinates:\n        surrounding_colors = \"find all surrounding colors\"(input_grid, coordinate)\n        paint_same_color_pixels_black(output_grid, coordinate, surrounding_colors)\n    output_grid = \"if the num_non_black is not 1, rotate the grid 90 degrees\"(output_grid, num_non_black)\n    return output_grid", "prompt": null, "subfunctions": ["find_num_non_black_in_first_row", "rotate_if", "find_all_black_pixels", "find_surrounding_colors", "paint_same_color_pixels_black"], "parent": null}}, "entry": "main"}