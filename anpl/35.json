{"funs": {"find_min_element": {"code": "def find_min_element(input_grid: np.ndarray) -> int:\n    \"\"\"\n    This function finds the element with the minimum amount in the input grid.\n\n    Args:\n    input_grid: A numpy array representing the input grid.\n\n    Returns:\n    The element with the minimum amount in the input grid.\n    \"\"\"\n    unique_elements, counts = np.unique(input_grid, return_counts=True)\n    min_element = unique_elements[np.argmin(counts)]\n    return min_element", "prompt": "find the element of min amount in input grid", "subfunctions": [], "parent": "main"}, "collect_positions": {"code": "def collect_positions(input_grid: np.ndarray, element: int) -> List[Tuple[int, int]]:\n    positions = []\n    for i in range(input_grid.shape[0]):\n        for j in range(input_grid.shape[1]):\n            if input_grid[i][j] == element:\n                positions.append((i, j))\n    return positions", "prompt": "collect positions of input element in input grid", "subfunctions": [], "parent": "main"}, "find_block": {"code": "def find_block(input_grid: np.ndarray, positions: List[Tuple[int, int]]) -> np.ndarray:\n    min_pos = np.min(positions, axis=0)\n    max_pos = np.max(positions, axis=0)\n    block = input_grid[min_pos[0]:max_pos[0] + 1, min_pos[1]:max_pos[1] + 1]\n    return block", "prompt": "find block in input grid according to the max and min position in positions", "subfunctions": [], "parent": "main"}, "main": {"code": "def main(input_grid: np.ndarray) -> np.ndarray:\n    element = \"find the element of min amount in input grid\"(input_grid)\n    positions = \"collect positions of input element in input grid\"(input_grid, element)\n    block = \"find block in input grid according to the max and min position in positions\"(input_grid, positions)\n    return block", "prompt": null, "subfunctions": ["find_min_element", "collect_positions", "find_block"], "parent": null}}, "entry": "main"}