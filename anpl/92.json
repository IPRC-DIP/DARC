{"funs": {"move_yellow_pixels_right": {"code": "def move_yellow_pixels_right(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Traverse yellow pixel in the left 6 columns, move every yellow pixel to the right until touch the grey pixels.\n    \n    Args:\n    input_grid: A numpy array representing the input grid.\n    \n    Returns:\n    A numpy array representing the output grid with yellow pixels moved to the right.\n    \"\"\"\n    output_grid = input_grid.copy()\n    for i in range(output_grid.shape[0]):\n        for j in range(6):\n            if output_grid[i][j] == yellow:\n                k = j\n                while k < output_grid.shape[1] - 1 and output_grid[i][k + 1] != grey:\n                    k += 1\n                output_grid[i][j], output_grid[i][k] = (output_grid[i][k], output_grid[i][j])\n    return output_grid", "prompt": "Traverse yellow pixel in the left 6 colomns, move every yellow pixel to the right until touch the grey pixels", "subfunctions": [], "parent": "main"}, "turn_yellow_to_grey": {"code": "def turn_yellow_to_grey(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Traverse yellow pixel in the left 6 columns, turn every yellow pixel to grey.\n    \n    Args:\n    input_grid: A numpy array representing the input grid.\n    \n    Returns:\n    A numpy array representing the output grid with yellow pixels turned to grey.\n    \"\"\"\n    output_grid = input_grid.copy()\n    for i in range(output_grid.shape[0]):\n        for j in range(6):\n            if output_grid[i][j] == yellow:\n                output_grid[i][j] = grey\n    return output_grid", "prompt": "trun yellow pixels in the left 6 colomns to grey", "subfunctions": [], "parent": "main"}, "traverse_yellow_pixels": {"code": "def traverse_yellow_pixels(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Traverse yellow pixel in the whole input, turn it to grey first, and then move it to the left until touch the grey pixels.\n    \n    Args:\n    input_grid: A numpy array representing the input grid.\n    \n    Returns:\n    A numpy array representing the output grid with yellow pixels traversed and moved to the left.\n    \"\"\"\n    output_grid = input_grid.copy()\n    for i in range(output_grid.shape[0]):\n        for j in range(output_grid.shape[1]):\n            if output_grid[i][j] == yellow:\n                output_grid[i][j] = grey\n                k = j\n                while k > 0 and output_grid[i][k - 1] != grey:\n                    k -= 1\n                output_grid[i][j], output_grid[i][k] = (output_grid[i][k], output_grid[i][j])\n    return output_grid", "prompt": "Traverse yellow pixel in the whole input, turn it to grey first, ane then move it to the left until touch the grey pixels", "subfunctions": [], "parent": "main"}, "main": {"code": "def main(input_grid: np.ndarray) -> np.ndarray:\n    output_grid = \"Traverse yellow pixel in the left 6 colomns, move every yellow pixel to the right until touch the grey pixels\"(input_grid)\n    output_grid = \"trun yellow pixels in the left 6 colomns to grey\"(output_grid)\n    output_grid = \"Traverse yellow pixel in the whole input, turn it to grey first, ane then move it to the left until touch the grey pixels\"(output_grid)\n    return output_grid", "prompt": null, "subfunctions": ["move_yellow_pixels_right", "turn_yellow_to_grey", "traverse_yellow_pixels"], "parent": null}}, "entry": "main"}