{"funs": {"get_color_with_fewest_locations": {"code": "def get_color_with_fewest_locations(input: List[Tuple[int, int]]) -> int:\n    color_counts = [0] * 10\n    for i in input.reshape(-1):\n        color_counts[i] += 1\n    for i in range(len(color_counts)):\n        if color_counts[i] == 0:\n            color_counts[i] = 100000\n    return color_counts.index(min(color_counts))", "prompt": null, "subfunctions": [], "parent": "main"}, "get_positions_of_color": {"code": "def get_positions_of_color(input: List[List[int]], color: int) -> List[Tuple[int, int]]:\n    positions = []\n    for i in range(len(input)):\n        for j in range(len(input[0])):\n            if input[i][j] == color:\n                positions.append((i, j))\n    return positions", "prompt": "return all the positions which is the color, the input is a 2-dim array", "subfunctions": [], "parent": "main"}, "collect_neighborhoods": {"code": "def collect_neighborhoods(input: List[Tuple[int, int]], positions: List[Tuple[int, int]]) -> List[List[int]]:\n    neighborhoods = []\n    for x, y in positions:\n        neighborhood = []\n        if x > 0:\n            neighborhood.append(input[x - 1][y])\n        if x < len(input) - 1:\n            neighborhood.append(input[x + 1][y])\n        if y > 0:\n            neighborhood.append(input[x][y - 1])\n        if y < len(input[0]) - 1:\n            neighborhood.append(input[x][y + 1])\n        neighborhoods.append(neighborhood)\n    return neighborhoods", "prompt": "Collect the four neighborhoods to each location to a list", "subfunctions": [], "parent": "main"}, "get_most_common_color": {"code": "def get_most_common_color(color_list: List[List[int]]) -> int:\n    color_counts = [0] * 10\n    for neighborhood in color_list:\n        for color in neighborhood:\n            color_counts[color] += 1\n    return color_counts.index(max(color_counts))", "prompt": "the most color in the list", "subfunctions": [], "parent": "main"}, "main": {"code": "def main(input):\n    color = get_color_with_fewest_locations(input)\n    positions = \"return all the positions which is the color, the input is a 2-dim array\"(input, color)\n    color_list = \"Collect the four neighborhoods to each location to a list\"(input, positions)\n    output = \"the most color in the list\"(color_list)\n    return np.array([[output]], dtype=np.int32)", "prompt": null, "subfunctions": ["get_color_with_fewest_locations", "get_positions_of_color", "collect_neighborhoods", "get_most_common_color"], "parent": null}}, "entry": "main"}