{"funs": {"split_grid": {"code": "def split_grid(input_grid: np.ndarray) -> Tuple[np.ndarray, np.ndarray]:\n    sub1 = input_grid[:, :3]\n    sub2 = input_grid[:, 3:]\n    return (sub1, sub2)", "prompt": "split the 3x6 input_grid into two 3x3 grid", "subfunctions": [], "parent": "main"}, "create_sub1_grid": {"code": "def create_sub1_grid(input_grid: np.ndarray) -> np.ndarray:\n    sub1 = input_grid[:, :3]\n    return sub1", "prompt": "creat a grid same as sub1", "subfunctions": [], "parent": "main"}, "copy_non_black_pixels": {"code": "def copy_non_black_pixels(sub1: np.ndarray, sub2: np.ndarray, new: np.ndarray) -> np.ndarray:\n    mask = sub2 != black\n    new[mask] = sub2[mask]\n    return new", "prompt": "copy the not black pixels in sub2 to new at the same position", "subfunctions": [], "parent": "main"}, "turn_non_black_to_pink": {"code": "def turn_non_black_to_pink(copy: np.ndarray) -> np.ndarray:\n    copy[copy != black] = pink\n    return copy", "prompt": "turn all not black pixels in copy to pink", "subfunctions": [], "parent": "main"}, "main": {"code": "def main(input_grid: np.ndarray) -> np.ndarray:\n    sub1, sub2 = \"split the 3x6 input_grid into two 3x3 grid\"(input_grid)\n    new = \"creat a grid same as sub1\"(sub1)\n    copy = \"copy the not black pixels in sub2 to new at the same position\"(sub1, sub2, new)\n    out = \"turn all not black pixels in copy to pink\"(copy)\n    return out", "prompt": null, "subfunctions": ["split_grid", "create_sub1_grid", "copy_non_black_pixels", "turn_non_black_to_pink"], "parent": null}}, "entry": "main"}