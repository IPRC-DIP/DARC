{"funs": {"get_smallest_matrix": {"code": "def get_smallest_matrix(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Given an input grid, this function returns the smallest matrix containing all pixels that are not black, green, or teal.\n\n    Args:\n    input_grid: A numpy array representing the input grid.\n\n    Returns:\n    A numpy array representing the smallest matrix containing all pixels that are not black, green, or teal.\n    \"\"\"\n    m = np.where((input_grid != black) & (input_grid != green) & (input_grid != teal))\n    return input_grid[m[0].min():m[0].max() + 1, m[1].min():m[1].max() + 1]", "prompt": "Return the smallest matrix containing all pixels that are not black, green, or teal", "subfunctions": [], "parent": "main"}, "get_smallest_green_matrix": {"code": "def get_smallest_green_matrix(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Given an input grid, this function returns the smallest matrix containing all green pixels.\n\n    Args:\n    input_grid: A numpy array representing the input grid.\n\n    Returns:\n    A numpy array representing the smallest matrix containing all green pixels.\n    \"\"\"\n    m = np.where(input_grid == green)\n    return input_grid[m[0].min():m[0].max() + 1, m[1].min():m[1].max() + 1]", "prompt": "Return the smallest matrix containing all green pixels", "subfunctions": [], "parent": "main"}, "replace_green_pixels": {"code": "def replace_green_pixels(m: np.ndarray, n: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Given two input grids m and n, this function divides n into 4 submatrices. For each submatrix, it replaces all green pixels with the color of the corresponding pixel in m.\n\n    Args:\n    m: A numpy array representing the 2x2 matrix.\n    n: A numpy array representing the input grid.\n\n    Returns:\n    A numpy array representing the modified n grid.\n    \"\"\"\n    submatrices = np.split(n, 2)\n    for i in range(2):\n        submatrices[i] = np.split(submatrices[i], 2, axis=1)\n        for j in range(2):\n            submatrices[i][j][submatrices[i][j] == green] = m[i][j]\n        submatrices[i] = np.concatenate(submatrices[i], axis=1)\n    return np.concatenate(submatrices)", "prompt": "m is a 2x2 matrix. Devide matrix n into 4 submatrices. For each submatrix, replace all green pixels with the color of the corresponding pixel in m", "subfunctions": [], "parent": "main"}, "main": {"code": "def main(input_grid: np.ndarray) -> np.ndarray:\n    m = \"Return the smallest matrix containing all pixels that are not black, green, or teal\"(input_grid)\n    n = \"Return the smallest matrix containing all green pixels\"(input_grid)\n    out = \"m is a 2x2 matrix. Devide matrix n into 4 submatrices. For each submatrix, replace all green pixels with the color of the corresponding pixel in m\"(m, n)\n    return out", "prompt": null, "subfunctions": ["get_smallest_matrix", "get_smallest_green_matrix", "replace_green_pixels"], "parent": null}}, "entry": "main"}