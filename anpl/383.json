{"funs": {"find_smallest_rectangle": {"code": "def find_smallest_rectangle(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Given a 2D numpy array representing a grid of colored blocks, this function finds the smallest rectangle that can\n    contain all the yellow blocks in the grid.\n\n    Args:\n    - input_grid (np.ndarray): a 2D numpy array representing a grid of colored blocks, where each element is an integer\n                               representing a color\n\n    Returns:\n    - np.ndarray: a 2D numpy array representing the smallest rectangle that can contain all the yellow blocks in the grid,\n                  where each element is an integer representing a color\n    \"\"\"\n    yellow_indices = np.where(input_grid == yellow)\n    min_row, max_row = (np.min(yellow_indices[0]), np.max(yellow_indices[0]))\n    min_col, max_col = (np.min(yellow_indices[1]), np.max(yellow_indices[1]))\n    output = input_grid[min_row:max_row + 1, min_col:max_col + 1]\n    return output", "prompt": "find the smallest rectangle that can contain all the yellow blocks", "subfunctions": [], "parent": "main"}, "expand_blocks": {"code": "def expand_blocks(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Given a 2D numpy array representing a grid of colored blocks, this function expands each block in the grid to a\n    square of four blocks.\n\n    Args:\n    - input_grid (np.ndarray): a 2D numpy array representing a grid of colored blocks, where each element is an integer\n                               representing a color\n\n    Returns:\n    - np.ndarray: a 2D numpy array representing the expanded grid, where each element is an integer representing a color\n    \"\"\"\n    output = np.repeat(np.repeat(input_grid, 2, axis=1), 2, axis=0)\n    return output", "prompt": "Change each block in the grid to four blocks in a square", "subfunctions": [], "parent": "main"}, "main": {"code": "def main(input_grid: np.ndarray) -> np.ndarray:\n    output = \"find the smallest rectangle that can contain all the yellow blocks\"(input_grid)\n    output = \"Change each block in the grid to four blocks in a square\"(output)\n    return output", "prompt": null, "subfunctions": ["find_smallest_rectangle", "expand_blocks"], "parent": null}}, "entry": "main"}