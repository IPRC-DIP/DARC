{"funs": {"get_color_locations": {"code": "def get_color_locations(color: int, grid: np.ndarray) -> List[Tuple[int, int]]:\n    \"\"\"\n    Returns a list of tuples representing the locations of the given color in the grid.\n    Each tuple contains the row and column indices of a cell with the given color.\n    \"\"\"\n    return list(zip(*np.where(grid == color)))", "prompt": "locations of the color", "subfunctions": [], "parent": "main"}, "get_middle_locations": {"code": "def get_middle_locations(locations: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    \"\"\"\n    Returns a list of tuples representing the middle locations of the given locations.\n    Each tuple contains the row and column indices of the middle cell of a group of cells\n    that are either in the same row or the same column.\n    \"\"\"\n    middle_locations = []\n    for i in range(len(locations)):\n        row, col = locations[i]\n        same_row = [loc for loc in locations if loc[0] == row]\n        same_col = [loc for loc in locations if loc[1] == col]\n        if len(same_row) > 1:\n            same_row.sort(key=lambda loc: loc[1])\n            middle_col = (same_row[0][1] + same_row[-1][1]) // 2\n            middle_locations.append((row, middle_col))\n        elif len(same_col) > 1:\n            same_col.sort(key=lambda loc: loc[0])\n            middle_row = (same_col[0][0] + same_col[-1][0]) // 2\n            middle_locations.append((middle_row, col))\n    return middle_locations", "prompt": "middle locations of the locations at same row or same column", "subfunctions": [], "parent": "main"}, "change_color_at_locations": {"code": "def change_color_at_locations(locations: List[Tuple[int, int]], color: int, grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Changes the color of the cells at the given locations in the grid to the given color.\n    Returns the updated grid.\n    \"\"\"\n    for row, col in locations:\n        grid[row][col] = color\n    return grid", "prompt": "change the color at locations of out", "subfunctions": [], "parent": "main"}, "main": {"code": "def main(input_grid: np.ndarray) -> np.ndarray:\n    out = input_grid\n    for color in range(2, 10):\n        loc1 = \"locations of the color\"(color, out)\n        if loc1:\n            loc2 = \"middle locations of the locations at same row or same column\"(loc1)\n            out = \"change the color at locations of out\"(loc2, color, out)\n    return out", "prompt": null, "subfunctions": ["get_color_locations", "get_middle_locations", "change_color_at_locations"], "parent": null}}, "entry": "main"}