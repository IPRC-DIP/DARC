{"funs": {"find_smallest_green_matrix": {"code": "def find_smallest_green_matrix(input_grid: np.ndarray) -> Tuple[int, int, int, int]:\n    \"\"\"\n    Finds the smallest matrix with all green pixels in the input_grid.\n\n    Args:\n    input_grid: A numpy array representing the input grid.\n\n    Returns:\n    A tuple of four integers representing the smallest matrix with all green pixels in the input_grid.\n    \"\"\"\n    r1, r2, c1, c2 = (np.where(input_grid == green)[0].min(), np.where(input_grid == green)[0].max(), np.where(input_grid == green)[1].min(), np.where(input_grid == green)[1].max())\n    return (r1, r2, c1, c2)", "prompt": "Find the smallest matrix with all green pixels in the input_grid", "subfunctions": [], "parent": "main"}, "get_width": {"code": "def get_width(input_grid: np.ndarray) -> int:\n    \"\"\"\n    Returns the width of the input_grid.\n\n    Args:\n    input_grid: A numpy array representing the input grid.\n\n    Returns:\n    An integer representing the width of the input_grid.\n    \"\"\"\n    return input_grid.shape[1]", "prompt": "Return the width of the input_grid", "subfunctions": [], "parent": "main"}, "replace_green_pixels": {"code": "def replace_green_pixels(input_grid: np.ndarray, width: int) -> np.ndarray:\n    \"\"\"\n    For each green pixel, denote it in line r, column c. Replace it with the color of the pixel in line w-r, column c.\n\n    Args:\n    input_grid: A numpy array representing the input grid.\n    width: An integer representing the width of the input_grid.\n\n    Returns:\n    A numpy array representing the modified input grid.\n    \"\"\"\n    green_pixels = np.where(input_grid == green)\n    r_values = green_pixels[0]\n    c_values = green_pixels[1]\n    for r, c in zip(r_values, c_values):\n        input_grid[r][c] = input_grid[width - r - 1][c]\n    return input_grid", "prompt": "For each green pixel, denote it in line r, column c. Replace it with the color of the pixel in line w-r, column c", "subfunctions": [], "parent": "main"}, "replace_green_pixels_mirror": {"code": "def replace_green_pixels_mirror(input_grid: np.ndarray, width: int) -> np.ndarray:\n    \"\"\"\n    For each green pixel, denote it in line r, column c. Replace it with the color of the pixel in line r, column w-c.\n\n    Args:\n    input_grid: A numpy array representing the input grid.\n    width: An integer representing the width of the input_grid.\n\n    Returns:\n    A numpy array representing the modified input grid.\n    \"\"\"\n    green_pixels = np.where(input_grid == green)\n    r_values = green_pixels[0]\n    c_values = green_pixels[1]\n    for r, c in zip(r_values, c_values):\n        input_grid[r][c] = input_grid[r][width - c - 1]\n    return input_grid", "prompt": "For each green pixel, denote it in line r, column c. Replace it with the color of the pixel in line r, column w-c", "subfunctions": [], "parent": "main"}, "get_submatrix": {"code": "def get_submatrix(input_grid: np.ndarray, r1: int, r2: int, c1: int, c2: int) -> np.ndarray:\n    \"\"\"\n    Returns the submatrix of input_grid composed of rows from r1 to r2 and columns from c1 to c2.\n\n    Args:\n    input_grid: A numpy array representing the input grid.\n    r1: An integer representing the starting row index.\n    r2: An integer representing the ending row index.\n    c1: An integer representing the starting column index.\n    c2: An integer representing the ending column index.\n\n    Returns:\n    A numpy array representing the submatrix of input_grid.\n    \"\"\"\n    return input_grid[r1:r2 + 1, c1:c2 + 1]", "prompt": "Return the matrix composed of rows from r1 to r2 and columns from c1 to c2", "subfunctions": [], "parent": "main"}, "main": {"code": "def main(input_grid: np.ndarray) -> np.ndarray:\n    r1, r2, c1, c2 = \"Find the smallest matrix with all green pixels in the input_grid\"(input_grid)\n    w = \"Return the width of the input_grid\"(input_grid)\n    if r1 < w / 2 < r2:\n        out = \"For each green pixel, denote it in line r, column c. Replace it with the color of the pixel in line w-r, column c\"(input_grid, w)\n    else:\n        out = \"For each green pixel, denote it in line r, column c. Replace it with the color of the pixel in line r, column w-c\"(input_grid, w)\n    out = \"Return the matrix composed of rows from r1 to r2 and columns from c1 to c2\"(out, r1, r2, c1, c2)\n    return out", "prompt": null, "subfunctions": ["find_smallest_green_matrix", "get_width", "replace_green_pixels", "replace_green_pixels_mirror", "get_submatrix"], "parent": null}}, "entry": "main"}