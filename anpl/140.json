{"funs": {"get_not_black_color": {"code": "def get_not_black_color(input_grid: np.ndarray) -> int:\n    for i in range(input_grid.shape[0]):\n        for j in range(input_grid.shape[1]):\n            if input_grid[i][j] != black:\n                return input_grid[i][j]\n    return black", "prompt": "get the color of the not black pixel", "subfunctions": [], "parent": "main"}, "color_diagonal_pixels": {"code": "def color_diagonal_pixels(input_grid: np.ndarray, c: int) -> np.ndarray:\n    not_black_indices = np.where(input_grid != black)\n    not_black_pixel = (not_black_indices[0][0], not_black_indices[1][0])\n    for i in range(input_grid.shape[0]):\n        for j in range(input_grid.shape[1]):\n            if i + j == not_black_pixel[0] + not_black_pixel[1] or i - j == not_black_pixel[0] - not_black_pixel[1]:\n                input_grid[i][j] = c\n    return input_grid", "prompt": "for pixels all in the 2 diagonal lines which pass the not black pixel, color them in c", "subfunctions": [], "parent": "main"}, "main": {"code": "def main(input_grid: np.ndarray) -> np.ndarray:\n    c = \"get the color of the not black pixel\"(input_grid)\n    out = \"for pixels all in the 2 diagonal lines which pass the not black pixel, color them in c\"(input_grid, c)\n    return out", "prompt": null, "subfunctions": ["get_not_black_color", "color_diagonal_pixels"], "parent": null}}, "entry": "main"}