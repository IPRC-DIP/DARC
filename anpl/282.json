{"funs": {"pad_grid": {"code": "def pad_grid(input_grid: np.ndarray) -> np.ndarray:\n    return np.pad(input_grid, pad_width=1, mode='constant', constant_values=black)", "prompt": "padding the grid with black with width 1", "subfunctions": [], "parent": "main"}, "paint_grey_yellow": {"code": "def paint_grey_yellow(copy_grid: np.ndarray, grid: np.ndarray) -> np.ndarray:\n    grey_pixels = np.where(copy_grid == grey)\n    grid[grey_pixels] = yellow\n    return grid", "prompt": "if a pixel is grey in copy_grid, paint it yellow in grid", "subfunctions": [], "parent": "main"}, "paint_grey_red": {"code": "def paint_grey_red(copy_grid: np.ndarray, grid: np.ndarray) -> np.ndarray:\n    grey_pixels = np.where(copy_grid == grey)\n    for i in range(len(grey_pixels[0])):\n        x, y = (grey_pixels[0][i], grey_pixels[1][i])\n        if np.array_equal(copy_grid[x - 1:x + 2, y - 1:y + 2], np.array([[grey] * 3] * 3)):\n            grid[x, y] = red\n    return grid", "prompt": "if a pixel is surrounded by grey pixels in copy grid, paint it red in grid", "subfunctions": [], "parent": "main"}, "paint_black_blue": {"code": "def paint_black_blue(copy_grid: np.ndarray, grid: np.ndarray) -> np.ndarray:\n    grey_pixels = np.where(copy_grid == grey)\n    for i in range(len(grey_pixels[0])):\n        x, y = (grey_pixels[0][i], grey_pixels[1][i])\n        neighbors = [copy_grid[x, y - 1], copy_grid[x, y + 1], copy_grid[x - 1, y], copy_grid[x + 1, y]]\n        if neighbors.count(black) >= 2:\n            grid[x, y] = blue\n    return grid", "prompt": "for each grey pixel in copy grid, get its four neighbour: left, right, up, down. If two of them is black, then paint this pixel to blue", "subfunctions": [], "parent": "main"}, "main": {"code": "def main(input_grid: np.ndarray) -> np.ndarray:\n    grid = \"padding the grid with black with width 1\"(input_grid)\n    copy_grid = grid.copy()\n    grid = \"if a pixel is grey in copy_grid, paint it yellow in grid\"(copy_grid, grid)\n    grid = \"if a pixel is surrounded by grey pixels in copy grid, paint it red in grid\"(copy_grid, grid)\n    grid = \"for each grey pixel in copy grid, get its four neighbour: left, right, up, down. If two of them is black, then paint this pixel to blue\"(copy_grid, grid)\n    return grid[1:-1, 1:-1]", "prompt": null, "subfunctions": ["pad_grid", "paint_grey_yellow", "paint_grey_red", "paint_black_blue"], "parent": null}}, "entry": "main"}