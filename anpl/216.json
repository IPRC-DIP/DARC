{"funs": {"split_grid": {"code": "def split_grid(input_grid: np.ndarray) -> List[np.ndarray]:\n    \"\"\"\n    Splits the input grid into 9 small squares of size 3x3.\n\n    Args:\n    input_grid: A numpy array of shape (9, 9) representing the input grid.\n\n    Returns:\n    A list of 9 numpy arrays, each of shape (3, 3), representing the small squares.\n    \"\"\"\n    squares = []\n    for i in range(0, 9, 3):\n        for j in range(0, 9, 3):\n            square = input_grid[i:i + 3, j:j + 3]\n            squares.append(square)\n    return squares", "prompt": "split the 9x9 grid into 9 3x3 small squares", "subfunctions": [], "parent": "main"}, "has_color_pixel": {"code": "def has_color_pixel(square: np.ndarray) -> bool:\n    \"\"\"\n    Checks if the given square has at least one pixel of color other than black.\n\n    Args:\n    square: A numpy array of shape (3, 3) representing the input square.\n\n    Returns:\n    A boolean value indicating whether the square has at least one pixel of color other than black.\n    \"\"\"\n    return np.any(square != black)", "prompt": "has_color_pixel", "subfunctions": [], "parent": "main"}, "map_3x3_to_9x9": {"code": "def map_3x3_to_9x9(input_square: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Maps the input 3x3 square to a 9x9 grid, where if a pixel in the input square is black, then the corresponding\n    pixels in the output grid are also black. Otherwise, the input square is copied to the corresponding location in\n    the output grid.\n\n    Args:\n    input_square: A numpy array of shape (3, 3) representing the input square.\n\n    Returns:\n    A numpy array of shape (9, 9) representing the output grid.\n    \"\"\"\n    output_grid = np.zeros((9, 9))\n    for i in range(3):\n        for j in range(3):\n            if input_square[i][j] != black:\n                output_grid[3 * i:3 * i + 3, 3 * j:3 * j + 3] = input_square\n    return output_grid", "prompt": "map 3x3 grid to a 9x9 grid, if (i, j) in 3x3 grid is black, then (3*i, 3*j) in 9x9 grid is black, otherwise copy the 3x3 grid to (3*i, 3*j)", "subfunctions": [], "parent": "main"}, "main": {"code": "def main(input_grid: np.ndarray):\n    squares = \"split the 9x9 grid into 9 3x3 small squares\"(input_grid)\n    colorful_square = None\n    for square in squares:\n        if \"has_color_pixel\"(square):\n            colorful_square = square\n    output_grid = \"map 3x3 grid to a 9x9 grid, if (i, j) in 3x3 grid is black, then (3*i, 3*j) in 9x9 grid is black, otherwise copy the 3x3 grid to (3*i, 3*j)\"(colorful_square)\n    return output_grid", "prompt": null, "subfunctions": ["split_grid", "has_color_pixel", "map_3x3_to_9x9"], "parent": null}}, "entry": "main"}