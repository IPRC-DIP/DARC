{"funs": {"find_block_rows": {"code": "def find_block_rows(input_grid: np.ndarray) -> Tuple[int, int, int, int, int, int]:\n    red_x1, red_x2, blue_x1, blue_x2, yellow_x1, yellow_x2 = (-1, -1, -1, -1, -1, -1)\n    for i in range(input_grid.shape[0]):\n        for j in range(input_grid.shape[1]):\n            if input_grid[i][j] == red:\n                if red_x1 == -1:\n                    red_x1 = i\n                red_x2 = i\n            elif input_grid[i][j] == blue:\n                if blue_x1 == -1:\n                    blue_x1 = i\n                blue_x2 = i\n            elif input_grid[i][j] == yellow:\n                if yellow_x1 == -1:\n                    yellow_x1 = i\n                yellow_x2 = i\n    return (red_x1, red_x2, blue_x1, blue_x2, yellow_x1, yellow_x2)", "prompt": "Traverse the matrix from top to bottom and find the first and last row numbers where the red block appears (denoted as red_x1 and red_x2), the first and last row numbers where the blue block appears (denoted as blue_x1 and blue_x2), and the first and last row numbers where the yellow block appears (denoted as yellow_x1 and yellow_x2).", "subfunctions": [], "parent": "main"}, "find_block_columns": {"code": "def find_block_columns(input_grid: np.ndarray) -> Tuple[int, int, int, int, int, int]:\n    red_y1, red_y2, blue_y1, blue_y2, yellow_y1, yellow_y2 = (-1, -1, -1, -1, -1, -1)\n    for j in range(input_grid.shape[1]):\n        for i in range(input_grid.shape[0]):\n            if input_grid[i][j] == red:\n                if red_y1 == -1:\n                    red_y1 = j\n                red_y2 = j\n            elif input_grid[i][j] == blue:\n                if blue_y1 == -1:\n                    blue_y1 = j\n                blue_y2 = j\n            elif input_grid[i][j] == yellow:\n                if yellow_y1 == -1:\n                    yellow_y1 = j\n                yellow_y2 = j\n    return (red_y1, red_y2, blue_y1, blue_y2, yellow_y1, yellow_y2)", "prompt": "Traverse the matrix from left to right and find the first and last column numbers where the red block appears (denoted as red_y1 and red_y2), the first and last column numbers where the blue block appears (denoted as blue_y1 and blue_y2), and the first and last column numbers where the yellow block appears (denoted as yellow_y1 and yellow_y2).", "subfunctions": [], "parent": "main"}, "extract_images": {"code": "def extract_images(input_grid: np.ndarray, red_x1: int, red_x2: int, red_y1: int, red_y2: int, blue_x1: int, blue_x2: int, blue_y1: int, blue_y2: int, yellow_x1: int, yellow_x2: int, yellow_y1: int, yellow_y2: int) -> Tuple[np.ndarray, np.ndarray, np.ndarray]:\n    red_grid = input_grid[red_x1:red_x2 + 1, red_y1:red_y2 + 1]\n    blue_grid = input_grid[blue_x1:blue_x2 + 1, blue_y1:blue_y2 + 1]\n    yellow_grid = input_grid[yellow_x1:yellow_x2 + 1, yellow_y1:yellow_y2 + 1]\n    return (red_grid, blue_grid, yellow_grid)", "prompt": "In the input_grid, extract the image located in the rectangle with the upper-left corner at (red_x1,red_y1) and the lower-right corner at (red_x2,red_y2) (denoted as red_grid), the image located in the rectangle with the upper-left corner at (blue_x1,blue_y1) and the lower-right corner at (blue_x2,blue_y2) (denoted as blue_grid), and the image located in the rectangle with the upper-left corner at (yellow_x1,yellow_y1) and the lower-right corner at (yellow_x2,yellow_y2) (denoted as yellow_grid).", "subfunctions": [], "parent": "main"}, "create_black_image": {"code": "def create_black_image(input_grid: np.ndarray) -> np.ndarray:\n    output_grid = np.zeros_like(input_grid)\n    output_grid.fill(black)\n    return output_grid", "prompt": "Create a new image matrix of the same size as the original image, filled with black pixels (denoted as output_grid).", "subfunctions": [], "parent": "main"}, "overlay_grids": {"code": "def overlay_grids(output_grid: np.ndarray, red_grid: np.ndarray, blue_grid: np.ndarray, yellow_grid: np.ndarray, blue_x1: int, blue_y1: int, red_y1: int, yellow_y1: int) -> np.ndarray:\n    output_grid[blue_x1:blue_x1 + blue_grid.shape[0], blue_y1:blue_y1 + blue_grid.shape[1]] = blue_grid\n    output_grid[blue_x1:red_grid.shape[0] + blue_x1, red_y1:red_grid.shape[1] + red_y1] = red_grid\n    output_grid[blue_x1:yellow_grid.shape[0] + blue_x1, yellow_y1:yellow_grid.shape[1] + yellow_y1] = yellow_grid\n    return output_grid", "prompt": "Overlay blue_grid onto output_grid starting from the location (blue_x1,blue_y1), overlay red_grid onto output_grid starting from the location (blue_x1,red_y1), and overlay yellow_grid onto output_grid starting from the location (blue_x1,yellow_y1).", "subfunctions": [], "parent": "main"}, "main": {"code": "def main(input_grid: np.ndarray) -> np.ndarray:\n    red_x1, red_x2, blue_x1, blue_x2, yellow_x1, yellow_x2 = \"Traverse the matrix from top to bottom and find the first and last row numbers where the red block appears (denoted as red_x1 and red_x2), the first and last row numbers where the blue block appears (denoted as blue_x1 and blue_x2), and the first and last row numbers where the yellow block appears (denoted as yellow_x1 and yellow_x2).\"(input_grid)\n    red_y1, red_y2, blue_y1, blue_y2, yellow_y1, yellow_y2 = \"Traverse the matrix from left to right and find the first and last column numbers where the red block appears (denoted as red_y1 and red_y2), the first and last column numbers where the blue block appears (denoted as blue_y1 and blue_y2), and the first and last column numbers where the yellow block appears (denoted as yellow_y1 and yellow_y2).\"(input_grid)\n    red_grid, blue_grid, yellow_grid = \"In the input_grid, extract the image located in the rectangle with the upper-left corner at (red_x1,red_y1) and the lower-right corner at (red_x2,red_y2) (denoted as red_grid), the image located in the rectangle with the upper-left corner at (blue_x1,blue_y1) and the lower-right corner at (blue_x2,blue_y2) (denoted as blue_grid), and the image located in the rectangle with the upper-left corner at (yellow_x1,yellow_y1) and the lower-right corner at (yellow_x2,yellow_y2) (denoted as yellow_grid).\"(input_grid, red_x1, red_x2, red_y1, red_y2, blue_x1, blue_x2, blue_y1, blue_y2, yellow_x1, yellow_x2, yellow_y1, yellow_y2)\n    output_grid = \"Create a new image matrix of the same size as the original image, filled with black pixels (denoted as output_grid).\"(input_grid)\n    output_grid = \"Overlay blue_grid onto output_grid starting from the location (blue_x1,blue_y1), overlay red_grid onto output_grid starting from the location (blue_x1,red_y1), and overlay yellow_grid onto output_grid starting from the location (blue_x1,yellow_y1).\"(output_grid, red_grid, blue_grid, yellow_grid, blue_x1, blue_y1, red_y1, yellow_y1)\n    return output_grid", "prompt": null, "subfunctions": ["find_block_rows", "find_block_columns", "extract_images", "create_black_image", "overlay_grids"], "parent": null}}, "entry": "main"}