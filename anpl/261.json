{"funs": {"create_output_grid": {"code": "def create_output_grid(input_grid: np.ndarray) -> np.ndarray:\n    return np.zeros_like(input_grid)", "prompt": "the same size as input_grid", "subfunctions": [], "parent": "main"}, "get_non_black_pixel_column": {"code": "def get_non_black_pixel_column(input_grid: np.ndarray) -> List[int]:\n    non_black_pixel_column = []\n    for row in input_grid:\n        non_black_pixel_column.append(np.where(row != black)[0][0])\n    return non_black_pixel_column", "prompt": "column number of the non-black pixel of each row", "subfunctions": [], "parent": "main"}, "get_color": {"code": "def get_color(input_value: int) -> int:\n    if input_value == 0:\n        return red\n    elif input_value == 1:\n        return yellow\n    elif input_value == 2:\n        return green\n    else:\n        return black", "prompt": "if input is 0 return red, if input is 1 return yellow, if input is 2, return green", "subfunctions": [], "parent": "main"}, "fill_row_with_color": {"code": "def fill_row_with_color(i: int, color: int, output_grid: np.ndarray) -> np.ndarray:\n    output_grid[i] = color\n    return output_grid", "prompt": "fill the ith row with color", "subfunctions": [], "parent": "main"}, "main": {"code": "def main(input_grid: np.ndarray) -> np.ndarray:\n    output_grid = \"the same size as input_grid\"(input_grid)\n    tmp = \"column number of the non-black pixel of each row\"(input_grid)\n    for i in range(3):\n        color = \"if input is 0 return red, if input is 1 return yellow, if input is 2, return green\"(tmp[i])\n        output_grid = \"fill the ith row with color\"(i, color, output_grid)\n    return output_grid", "prompt": null, "subfunctions": ["create_output_grid", "get_non_black_pixel_column", "get_color", "fill_row_with_color"], "parent": null}}, "entry": "main"}