{"funs": {"get_color_at_x5": {"code": "def get_color_at_x5(input_grid: np.ndarray) -> int:\n    return input_grid[5][0]", "prompt": "get the color of the line at x = 5", "subfunctions": [], "parent": "main"}, "get_grid_locations": {"code": "def get_grid_locations() -> List[Tuple[int, int]]:\n    locations = []\n    for i in range(3):\n        for j in range(3):\n            x = 0 + j * 6\n            y = 0 + i * 6\n            locations.append((x, y))\n    return locations", "prompt": null, "subfunctions": [], "parent": "main"}, "find_non_black_pixels": {"code": "def find_non_black_pixels(input_grid: np.ndarray) -> List[Tuple[int, int]]:\n    non_black_pixels = []\n    for i in range(5):\n        for j in range(5):\n            if not np.array_equal(input_grid[i][j], 0):\n                non_black_pixels.append((i, j))\n    return non_black_pixels", "prompt": null, "subfunctions": [], "parent": "main"}, "color_non_black_pixels": {"code": "def color_non_black_pixels(input_grid: np.ndarray, locations: List[Tuple[int, int]], color: int, pattern: List[Tuple[int, int]]) -> np.ndarray:\n    for loc in locations[1:]:\n        for i in range(loc[0], loc[0] + 5):\n            for j in range(loc[1], loc[1] + 5):\n                if (i - loc[0], j - loc[1]) in pattern and np.array_equal(input_grid[i][j], 0):\n                    input_grid[i][j] = color\n    return input_grid", "prompt": null, "subfunctions": [], "parent": "main"}, "main": {"code": "def main(input_grid: np.ndarray) -> np.ndarray:\n    color = \"get the color of the line at x = 5\"(input_grid)\n    locs = get_grid_locations()\n    pattern = find_non_black_pixels(input_grid)\n    output_grid = color_non_black_pixels(input_grid, locs, color, pattern)\n    return output_grid", "prompt": null, "subfunctions": ["get_color_at_x5", "get_grid_locations", "find_non_black_pixels", "color_non_black_pixels"], "parent": null}}, "entry": "main"}