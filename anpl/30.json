{"funs": {"find_smallest_rect": {"code": "def find_smallest_rect(non_black_pixels: Tuple[np.ndarray, np.ndarray], input_grid: np.ndarray) -> Tuple[int, int, int, int]:\n    \"\"\"\n    Given a numpy array _hole13 and a tuple of numpy arrays _hole15 containing the indices of non-black pixels,\n    this function returns the smallest rectangle that contains all the non-black pixels in the input grid.\n    \n    Args:\n    - non_black_pixels (Tuple[np.ndarray, np.ndarray]): A tuple of numpy arrays containing the row and column indices of non-black pixels.\n    - input_grid (np.ndarray): A numpy array representing the input grid.\n    \n    Returns:\n    - A tuple of integers (top, left, bottom, right) representing the smallest rectangle that contains all the non-black pixels in the input grid.\n    \"\"\"\n    top = np.min(non_black_pixels[0])\n    left = np.min(non_black_pixels[1])\n    bottom = np.max(non_black_pixels[0])\n    right = np.max(non_black_pixels[1])\n    return (top, left, bottom + 1, right + 1)", "prompt": "find the smallest rectangle that contains these non_black pixels in the input_grid", "subfunctions": [], "parent": "main"}, "main": {"code": "def main(input_grid: np.ndarray) -> np.ndarray:\n    non_black_pixels = np.where(input_grid != black)\n    smallest_rect = \"find the smallest rectangle that contains these non_black pixels in the input_grid\"(non_black_pixels, input_grid)\n    output_grid = input_grid[smallest_rect[0]:smallest_rect[2], smallest_rect[1]:smallest_rect[3]]\n    return output_grid", "prompt": null, "subfunctions": ["find_smallest_rect"], "parent": null}}, "entry": "main"}