{"funs": {"create_black_grid": {"code": "def create_black_grid(input_grid: np.ndarray) -> np.ndarray:\n    return np.zeros_like(input_grid)", "prompt": "same size as input but all black", "subfunctions": [], "parent": "main"}, "find_non_zero_element": {"code": "def find_non_zero_element(input_grid: np.ndarray) -> Tuple[int, int]:\n    non_zero_indices = np.nonzero(input_grid)\n    return (non_zero_indices[1][0], input_grid[non_zero_indices][0])", "prompt": "find the non zero element and return the column of the position and the element", "subfunctions": [], "parent": "main"}, "replace_even_column_with_element": {"code": "def replace_even_column_with_element(output_grid: np.ndarray, i: int, col: int, ele: int) -> np.ndarray:\n    if (i - col) % 2 == 0:\n        output_grid[:, i] = ele\n    return output_grid", "prompt": "if input i minus col is even, replace the i-th column in output_grid with input ele ", "subfunctions": [], "parent": "main"}, "replace_odd_column_with_grey": {"code": "def replace_odd_column_with_grey(output_grid: np.ndarray, i: int, col: int) -> np.ndarray:\n    if (i - col) % 4 == 1:\n        output_grid[0, i] = grey\n    return output_grid", "prompt": "if input i minus col is 1,5,9 and so on, replace the first element in i-th column in output_grid with grey ", "subfunctions": [], "parent": "main"}, "replace_last_element_with_grey": {"code": "def replace_last_element_with_grey(output_grid: np.ndarray, i: int, col: int) -> np.ndarray:\n    if (i - col) % 4 == 3:\n        output_grid[-1, i] = grey\n    return output_grid", "prompt": "if input i minus col is 3,7,11 and so on, replace the last element in i-th column in output_grid with grey ", "subfunctions": [], "parent": "main"}, "main": {"code": "def main(input_grid: np.ndarray) -> np.ndarray:\n    output_grid = \"same size as input but all black\"(input_grid)\n    col, ele = \"find the non zero element and return the column of the position and the element\"(input_grid)\n    for i in range(input_grid.shape[1]):\n        if i >= col:\n            output_grid = \"if input i minus col is even, replace the i-th column in output_grid with input ele \"(output_grid, i, col, ele)\n            output_grid = \"if input i minus col is 1,5,9 and so on, replace the first element in i-th column in output_grid with grey \"(output_grid, i, col)\n            output_grid = \"if input i minus col is 3,7,11 and so on, replace the last element in i-th column in output_grid with grey \"(output_grid, i, col)\n    return output_grid", "prompt": null, "subfunctions": ["create_black_grid", "find_non_zero_element", "replace_even_column_with_element", "replace_odd_column_with_grey", "replace_last_element_with_grey"], "parent": null}}, "entry": "main"}