{"funs": {"find_corners": {"code": "def find_corners(input_grid: np.ndarray) -> Tuple[Tuple[int, int], Tuple[int, int]]:\n    non_blue_pixels = np.where(input_grid != blue)\n    upper_left = (np.min(non_blue_pixels[0]), np.min(non_blue_pixels[1]))\n    lower_right = (np.max(non_blue_pixels[0]), np.max(non_blue_pixels[1]))\n    return (upper_left, lower_right)", "prompt": "find the upper right corner and the lower left corner of non-blue pixels in input_grid", "subfunctions": [], "parent": "main"}, "extract_pixels": {"code": "def extract_pixels(upper_left: Tuple[int, int], lower_right: Tuple[int, int], input_grid: np.ndarray) -> np.ndarray:\n    return input_grid[upper_left[0]:upper_left[0] + 2, upper_left[1]:upper_left[1] + 2]", "prompt": "output pixels from upper_left ro lower_right in input_grid, the output shape should be(2,2)", "subfunctions": [], "parent": "main"}, "make_blue_pixels_black": {"code": "def make_blue_pixels_black(input_grid: np.ndarray) -> np.ndarray:\n    output_grid = input_grid.copy()\n    blue_pixels = np.where(output_grid == blue)\n    output_grid[blue_pixels] = black\n    return output_grid", "prompt": "make blue pixels black", "subfunctions": [], "parent": "main"}, "main": {"code": "def main(input_grid: np.ndarray) -> np.ndarray:\n    output_grid = input_grid.copy()\n    upper_left, lower_right = \"find the upper right corner and the lower left corner of non-blue pixels in input_grid\"(input_grid)\n    output_grid = \"output pixels from upper_left ro lower_right in input_grid, the output shape should be(2,2)\"(upper_left, lower_right, input_grid)\n    output_grid = \"make blue pixels black\"(output_grid)\n    return output_grid", "prompt": null, "subfunctions": ["find_corners", "extract_pixels", "make_blue_pixels_black"], "parent": null}}, "entry": "main"}