{"funs": {"find_non_black_pixels": {"code": "def find_non_black_pixels(input_grid: np.ndarray) -> List[Tuple[int, int]]:\n    \"\"\"\n    Given an input grid, returns a list of tuples containing the indices of all non-black pixels.\n    \n    Args:\n    - input_grid: a numpy ndarray representing the input grid\n    \n    Returns:\n    - A list of tuples containing the indices of all non-black pixels.\n    \"\"\"\n    non_black_pixels = []\n    for i in range(input_grid.shape[0]):\n        for j in range(input_grid.shape[1]):\n            if input_grid[i][j] != black:\n                non_black_pixels.append((i, j))\n    return non_black_pixels", "prompt": "find the pixels which color is not black", "subfunctions": [], "parent": "main"}, "translate_pixels_down": {"code": "def translate_pixels_down(input_grid: np.ndarray, pixels: List[Tuple[int, int]]) -> np.ndarray:\n    \"\"\"                                                                                                                                                                 \n    Given an input grid and a list of pixels, translates each pixel down for 1 pixel.                                                                                   \n                                                                                                                                                                        \n    Args:                                                                                                                                                               \n    - input_grid: a numpy ndarray representing the input grid                                                                                                           \n    - pixels: a list of tuples containing the indices of all non-black pixels                                                                                           \n                                                                                                                                                                        \n    Returns:                                                                                                                                                            \n    - A numpy ndarray representing the output grid with translated pixels                                                                                               \n    \"\"\"\n    output_grid = input_grid.copy()\n    for pixel in pixels:\n        i, j = pixel\n        output_grid[i][j] = black\n    for pixel in pixels:\n        i, j = pixel\n        output_grid[i + 1][j] = input_grid[i][j]\n    return output_grid", "prompt": "Given an input grid and a list of pixels, translates each pixel down for 1 pixel.                                                                                   \n                                                                                                                                                                    \nArgs:                                                                                                                                                               \n- input_grid: a numpy ndarray representing the input grid                                                                                                           \n- pixels: a list of tuples containing the indices of all non-black pixels                                                                                           \n                                                                                                                                                                    \nReturns:                                                                                                                                                            \n- A numpy ndarray representing the output grid with translated pixels                                                                                               ", "subfunctions": [], "parent": "main"}, "main": {"code": "def main(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"                                                                                                                                                                 \n    find the pixels which color is not black, translate each pixel down for 1 pixel.                                                    \n    \"\"\"\n    output_grid = input_grid.copy()\n    pixels = \"find the pixels which color is not black\"(input_grid)\n    output_grid = \"Given an input grid and a list of pixels, translates each pixel down for 1 pixel.                                                                                   \n                                                                                                                                                                    \nArgs:                                                                                                                                                               \n- input_grid: a numpy ndarray representing the input grid                                                                                                           \n- pixels: a list of tuples containing the indices of all non-black pixels                                                                                           \n                                                                                                                                                                    \nReturns:                                                                                                                                                            \n- A numpy ndarray representing the output grid with translated pixels                                                                                               \"(output_grid, pixels)\n    return output_grid", "prompt": "find the pixels which color is not black, translate each pixel down for 1 pixel.                                                    ", "subfunctions": ["find_non_black_pixels", "translate_pixels_down"], "parent": null}}, "entry": "main"}