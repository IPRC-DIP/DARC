{"funs": {"get_row_colors": {"code": "def get_row_colors(input_grid: np.ndarray) -> List[int]:\n    colors = []\n    for row in input_grid:\n        for color in row:\n            if color not in [black, grey] and color not in colors:\n                colors.append(color)\n    return colors", "prompt": "get the colors (except for black and grey) in the input_grid in the order of rows from smallest to largest", "subfunctions": [], "parent": "main"}, "get_grey_rect_size": {"code": "def get_grey_rect_size(input_grid: np.ndarray) -> Tuple[int, int]:\n    grey_rows = []\n    for i, row in enumerate(input_grid):\n        if grey in row:\n            grey_rows.append(i)\n    top_grey_row = min(grey_rows)\n    bottom_grey_row = max(grey_rows)\n    left_grey_col = np.where(input_grid[top_grey_row] == grey)[0][0]\n    right_grey_col = np.where(input_grid[bottom_grey_row] == grey)[0][-1]\n    height = bottom_grey_row - top_grey_row + 1\n    width = right_grey_col - left_grey_col + 1\n    return (height, width)", "prompt": "Get the grey rect's height and width in the input_grid", "subfunctions": [], "parent": "main"}, "main": {"code": "def main(input_grid: np.ndarray) -> np.ndarray:\n    colors = \"get the colors (except for black and grey) in the input_grid in the order of rows from smallest to largest\"(input_grid)\n    height, width = \"Get the grey rect's height and width in the input_grid\"(input_grid)\n    output_grid = np.zeros([height, width], dtype=np.int32)\n    output_grid = output_grid.copy()\n    for i in range(output_grid.shape[0]):\n        output_grid[i, :] = colors[i]\n    return output_grid", "prompt": null, "subfunctions": ["get_row_colors", "get_grey_rect_size"], "parent": null}}, "entry": "main"}