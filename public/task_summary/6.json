{"id": 6, "train_io": {"inputs": [[[2, 8, 3, 0, 0, 0, 0], [8, 3, 0, 0, 0, 0, 0], [3, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 1, 2], [0, 0, 0, 0, 1, 2, 4], [0, 0, 0, 1, 2, 4, 0], [0, 0, 1, 2, 4, 0, 0]], [[0, 0, 0, 0, 8, 3, 0], [0, 0, 0, 8, 3, 0, 0], [0, 0, 8, 3, 0, 0, 0], [0, 8, 3, 0, 0, 0, 4], [8, 3, 0, 0, 0, 4, 0], [3, 0, 0, 0, 4, 0, 0], [0, 0, 0, 4, 0, 0, 0]]], "outputs": [[[2, 8, 3, 2, 8, 3, 2], [8, 3, 2, 8, 3, 2, 8], [3, 2, 8, 3, 2, 8, 3], [2, 8, 3, 2, 8, 3, 2], [8, 3, 2, 8, 3, 2, 8], [3, 2, 8, 3, 2, 8, 3], [2, 8, 3, 2, 8, 3, 2]], [[2, 4, 1, 2, 4, 1, 2], [4, 1, 2, 4, 1, 2, 4], [1, 2, 4, 1, 2, 4, 1], [2, 4, 1, 2, 4, 1, 2], [4, 1, 2, 4, 1, 2, 4], [1, 2, 4, 1, 2, 4, 1], [2, 4, 1, 2, 4, 1, 2]], [[4, 8, 3, 4, 8, 3, 4], [8, 3, 4, 8, 3, 4, 8], [3, 4, 8, 3, 4, 8, 3], [4, 8, 3, 4, 8, 3, 4], [8, 3, 4, 8, 3, 4, 8], [3, 4, 8, 3, 4, 8, 3], [4, 8, 3, 4, 8, 3, 4]]]}, "test_io": {"inputs": [[[0, 1, 0, 0, 0, 0, 2], [1, 0, 0, 0, 0, 2, 0], [0, 0, 0, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0, 0], [0, 0, 2, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 4], [2, 0, 0, 0, 0, 4, 0]]], "outputs": [[[2, 1, 4, 2, 1, 4, 2], [1, 4, 2, 1, 4, 2, 1], [4, 2, 1, 4, 2, 1, 4], [2, 1, 4, 2, 1, 4, 2], [1, 4, 2, 1, 4, 2, 1], [4, 2, 1, 4, 2, 1, 4], [2, 1, 4, 2, 1, 4, 2]]]}, "solved": true, "generalizable": true, "anpl": "def main(input_grid: np.ndarray) -> np.ndarray:\n    output_grid = np.zeros((7, 7), dtype=int)\n    (color1, color2, color3) = \"The non-black colors in the input\"(input_grid)\n    for color in (color1, color2, color3):\n        (x, y) = \"the cooridante of a color point\"(input_grid, color)\n        if (x + y) % 3 == 0:\n            c1 = color\n        elif (x + y) % 3 == 1:\n            c2 = color\n        else:\n            c3 = color\n    for i in range(7):\n        for j in range(7):\n            if (i + j) % 3 == 0:\n                output_grid[i][j] = c1\n            elif (i + j) % 3 == 1:\n                output_grid[i][j] = c2\n            else:\n                output_grid[i][j] = c3\n    return output_grid", "python": "import numpy as np\nfrom typing import *\nblack, blue, red, green, yellow, grey, pink, orange, teal, maroon = range(10)\n\ndef get_color_coordinate(input_grid: np.ndarray, color: int) -> Tuple[int, int]:\n    \"\"\"\n    This function takes in a numpy array of shape (7, 7) and a color integer and returns the coordinate of the first occurrence of the color in the input.\n\n    Args:\n    input_grid: A numpy array of shape (7, 7) containing integers from 0 to 9.\n    color: An integer representing the color to search for.\n\n    Returns:\n    A tuple of two integers representing the coordinate of the first occurrence of the color in the input.\n    \"\"\"\n    for i in range(7):\n        for j in range(7):\n            if input_grid[i][j] == color:\n                return (i, j)\n    return (-1, -1)\n\ndef get_non_black_colors(input_grid: np.ndarray) -> Tuple[int, int, int]:\n    \"\"\"\n    This function takes in a numpy array of shape (7, 7) and returns a tuple of three non-black colors present in the input.\n\n    Args:\n    input_grid: A numpy array of shape (7, 7) containing integers from 0 to 9.\n\n    Returns:\n    A tuple of three integers representing the non-black colors present in the input.\n    \"\"\"\n    non_black_colors = set(np.unique(input_grid)) - {black}\n    return tuple(non_black_colors)\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    output_grid = np.zeros((7, 7), dtype=int)\n    color1, color2, color3 = get_non_black_colors(input_grid)\n    for color in (color1, color2, color3):\n        x, y = get_color_coordinate(input_grid, color)\n        if (x + y) % 3 == 0:\n            c1 = color\n        elif (x + y) % 3 == 1:\n            c2 = color\n        else:\n            c3 = color\n    for i in range(7):\n        for j in range(7):\n            if (i + j) % 3 == 0:\n                output_grid[i][j] = c1\n            elif (i + j) % 3 == 1:\n                output_grid[i][j] = c2\n            else:\n                output_grid[i][j] = c3\n    return output_grid"}