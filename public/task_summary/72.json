{"id": 72, "train_io": {"inputs": [[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 1, 0, 0], [0, 0, 5, 0, 0], [5, 5, 5, 5, 5]], [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 1, 0, 1, 0], [0, 5, 0, 5, 0], [5, 5, 5, 5, 5]], [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 1, 0, 0, 1], [0, 5, 0, 0, 5], [5, 5, 5, 5, 5]]], "outputs": [[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 5, 0, 0], [5, 5, 1, 5, 5]], [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 5, 0, 5, 0], [5, 1, 5, 1, 5]], [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 5, 0, 0, 5], [5, 1, 5, 5, 1]]]}, "test_io": {"inputs": [[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 1, 0, 1], [0, 0, 5, 0, 5], [5, 5, 5, 5, 5]]], "outputs": [[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 5, 0, 5], [5, 5, 1, 5, 1]]]}, "solved": true, "generalizable": true, "anpl": "def main(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    find the blue pixels, color the downmost grey pixels that in the same column of the blue pixels to blue, and color origin blue pixels to black.\n    \"\"\"\n    output_grid = input_grid.copy()\n    blue_pixels = \"find indices of blue pixels\"(output_grid)\n    for blue_pixel in blue_pixels:\n        downmost_grey_pixel = \"find the downmost grey pixels that in the same column of the blue pixel\"(blue_pixel, output_grid)\n        output_grid[downmost_grey_pixel[0], downmost_grey_pixel[1]] = blue\n        output_grid[blue_pixel[0], blue_pixel[1]] = black\n    return output_grid", "python": "import numpy as np\nfrom typing import *\nblack, blue, red, green, yellow, grey, pink, orange, teal, maroon = range(10)\n\ndef find_downmost_grey_pixel(blue_pixel: Tuple[int, int], grid: np.ndarray) -> Tuple[int, int]:\n    \"\"\"\n    Given a blue pixel and a grid, returns the downmost grey pixel in the same column as the blue pixel.\n    \n    Args:\n    - blue_pixel: a tuple representing the indices of a blue pixel in the grid.\n    - grid: a numpy array representing the grid\n    \n    Returns:\n    - A tuple representing the indices of the downmost grey pixel in the same column as the blue pixel.\n    \"\"\"\n    for i in range(grid.shape[0] - 1, blue_pixel[0], -1):\n        if grid[i][blue_pixel[1]] == grey:\n            return (i, blue_pixel[1])\n    return blue_pixel\n\ndef find_blue_pixels(grid: np.ndarray) -> List[Tuple[int, int]]:\n    \"\"\"\n    Given a grid, returns a list of indices of blue pixels in the grid.\n    \n    Args:\n    - grid: a numpy array representing the grid\n    \n    Returns:\n    - A list of tuples representing the indices of blue pixels in the grid.\n    \"\"\"\n    blue_pixels = []\n    for i in range(grid.shape[0]):\n        for j in range(grid.shape[1]):\n            if grid[i][j] == blue:\n                blue_pixels.append((i, j))\n    return blue_pixels\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    find the blue pixels, color the downmost grey pixels that in the same column of the blue pixels to blue, and color origin blue pixels to black.\n    \"\"\"\n    output_grid = input_grid.copy()\n    blue_pixels = find_blue_pixels(output_grid)\n    for blue_pixel in blue_pixels:\n        downmost_grey_pixel = find_downmost_grey_pixel(blue_pixel, output_grid)\n        output_grid[downmost_grey_pixel[0], downmost_grey_pixel[1]] = blue\n        output_grid[blue_pixel[0], blue_pixel[1]] = black\n    return output_grid"}