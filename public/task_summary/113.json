{"id": 113, "train_io": {"inputs": [[[1, 2], [3, 8]], [[1, 8, 4], [8, 3, 8]], [[2, 1, 4], [8, 0, 2], [3, 2, 8]]], "outputs": [[[0, 1, 2, 0], [1, 1, 2, 2], [3, 3, 8, 8], [0, 3, 8, 0]], [[0, 1, 8, 4, 0], [1, 1, 8, 4, 4], [8, 8, 3, 8, 8], [0, 8, 3, 8, 0]], [[0, 2, 1, 4, 0], [2, 2, 1, 4, 4], [8, 8, 0, 2, 2], [3, 3, 2, 8, 8], [0, 3, 2, 8, 0]]]}, "test_io": {"inputs": [[[2, 8], [1, 4], [3, 4]]], "outputs": [[[0, 2, 8, 0], [2, 2, 8, 8], [1, 1, 4, 4], [3, 3, 4, 4], [0, 3, 4, 0]]]}, "solved": true, "generalizable": true, "anpl": "def border_pixels_to_adjacent_pixels(output_grid: np.ndarray, h: int, w: int) -> np.ndarray:\n    for j in range(1, w + 1):\n        output_grid[0][j] = output_grid[1][j]\n        output_grid[h + 1][j] = output_grid[h][j]\n    for i in range(1, h + 1):\n        output_grid[i][0] = output_grid[i][1]\n        output_grid[i][w + 1] = output_grid[i][w]\n    return output_grid\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    (h, w) = \"Get the height and width of the image matrix, denoted as h and w respectively.\"(input_grid)\n    output_grid = \"Create a new black image matrix of size (h+2) x (w+2), denoted as output_grid.\"(h, w)\n    output_grid = \"Overlay the input_grid onto the output_grid in an h*w sized area with (1,1) as the top left corner and (h,w) as the bottom right corner.\"(output_grid, input_grid, h, w)\n    output_grid = border_pixels_to_adjacent_pixels(output_grid, h, w)\n    return output_grid", "python": "import numpy as np\nfrom typing import *\nblack, blue, red, green, yellow, grey, pink, orange, teal, maroon = range(10)\n\ndef border_pixels_to_adjacent_pixels(output_grid: np.ndarray, h: int, w: int) -> np.ndarray:\n    for j in range(1, w + 1):\n        output_grid[0][j] = output_grid[1][j]\n        output_grid[h + 1][j] = output_grid[h][j]\n    for i in range(1, h + 1):\n        output_grid[i][0] = output_grid[i][1]\n        output_grid[i][w + 1] = output_grid[i][w]\n    return output_grid\n\ndef overlay_input_grid(output_grid: np.ndarray, input_grid: np.ndarray, h: int, w: int) -> np.ndarray:\n    output_grid[1:h + 1, 1:w + 1] = input_grid[0:h, 0:w]\n    return output_grid\n\ndef create_black_image(h: int, w: int) -> np.ndarray:\n    output_grid = np.zeros((h + 2, w + 2), dtype=np.uint8)\n    return output_grid\n\ndef get_height_width(image: np.ndarray) -> Tuple[int, int]:\n    h, w = image.shape[:2]\n    return (h, w)\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    h, w = get_height_width(input_grid)\n    output_grid = create_black_image(h, w)\n    output_grid = overlay_input_grid(output_grid, input_grid, h, w)\n    output_grid = border_pixels_to_adjacent_pixels(output_grid, h, w)\n    return output_grid"}