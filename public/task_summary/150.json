{"id": 150, "train_io": {"inputs": [[[0, 3, 0, 0], [2, 2, 2, 2], [0, 3, 0, 0], [0, 3, 0, 0]], [[0, 0, 0, 0, 6, 0, 0, 0], [0, 0, 0, 0, 6, 0, 0, 0], [0, 0, 0, 0, 6, 0, 0, 0], [0, 0, 0, 0, 6, 0, 0, 0], [8, 8, 8, 8, 6, 8, 8, 8], [0, 0, 0, 0, 6, 0, 0, 0], [0, 0, 0, 0, 6, 0, 0, 0], [0, 0, 0, 0, 6, 0, 0, 0]], [[0, 0, 1, 0, 0, 0], [0, 0, 1, 0, 0, 0], [9, 9, 1, 9, 9, 9], [0, 0, 1, 0, 0, 0], [0, 0, 1, 0, 0, 0], [0, 0, 1, 0, 0, 0]]], "outputs": [[[4, 4, 4, 0], [4, 2, 4, 2], [4, 4, 4, 0], [0, 3, 0, 0]], [[0, 0, 0, 0, 6, 0, 0, 0], [0, 0, 0, 0, 6, 0, 0, 0], [0, 0, 0, 0, 6, 0, 0, 0], [0, 0, 0, 4, 4, 4, 0, 0], [8, 8, 8, 4, 6, 4, 8, 8], [0, 0, 0, 4, 4, 4, 0, 0], [0, 0, 0, 0, 6, 0, 0, 0], [0, 0, 0, 0, 6, 0, 0, 0]], [[0, 0, 1, 0, 0, 0], [0, 4, 4, 4, 0, 0], [9, 4, 1, 4, 9, 9], [0, 4, 4, 4, 0, 0], [0, 0, 1, 0, 0, 0], [0, 0, 1, 0, 0, 0]]]}, "test_io": {"inputs": [[[0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0], [3, 3, 3, 3, 3, 3, 3, 3, 5, 3, 3, 3], [0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0]]], "outputs": [[[0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 0, 0], [3, 3, 3, 3, 3, 3, 3, 4, 5, 4, 3, 3], [0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0]]]}, "solved": true, "generalizable": true, "anpl": "def find_intersection(input_grid: np.ndarray) -> Tuple[int, int]:\n    x = \"Find the non-black pixel in the first column, return its coordinate\"(input_grid)\n    y = \"Find the non-black pixel in the first row, return its coordinate\"(input_grid)\n    return (x, y)\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    (x, y) = find_intersection(input_grid)\n    output = \"color the pixels adjacent to (x,y) yellow, but the pixel (x,y) remain its orginal color\"(input_grid, x, y)\n    return output", "python": "import numpy as np\nfrom typing import *\nblack, blue, red, green, yellow, grey, pink, orange, teal, maroon = range(10)\n\ndef find_non_black_pixel_in_first_row(input_grid: np.ndarray) -> int:\n    for i in range(input_grid.shape[1]):\n        if input_grid[0][i] != black:\n            return i\n    return -1\n\ndef find_non_black_pixel_in_first_column(input_grid: np.ndarray) -> int:\n    for i in range(input_grid.shape[0]):\n        if input_grid[i][0] != black:\n            return i\n    return -1\n\ndef color_adjacent_pixels_yellow(input_grid: np.ndarray, x: int, y: int) -> np.ndarray:\n    for i in range(max(0, x - 1), min(input_grid.shape[0], x + 2)):\n        for j in range(max(0, y - 1), min(input_grid.shape[1], y + 2)):\n            if i != x or j != y:\n                input_grid[i][j] = yellow\n    return input_grid\n\ndef find_intersection(input_grid: np.ndarray) -> Tuple[int, int]:\n    x = find_non_black_pixel_in_first_column(input_grid)\n    y = find_non_black_pixel_in_first_row(input_grid)\n    return (x, y)\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    x, y = find_intersection(input_grid)\n    output = color_adjacent_pixels_yellow(input_grid, x, y)\n    return output"}