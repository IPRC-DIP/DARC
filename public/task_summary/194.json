{"id": 194, "train_io": {"inputs": [[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 5, 5, 5, 0, 0, 0, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0], [0, 5, 5, 5, 0, 0, 0, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0], [0, 5, 5, 5, 0, 0, 0, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 5, 5, 5, 0, 0, 0, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0], [0, 5, 5, 5, 0, 0, 0, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0], [0, 5, 5, 5, 0, 0, 0, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 0, 0], [0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0], [0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0], [0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0], [0, 0, 0, 5, 5, 5, 0, 0, 0, 5, 5, 5, 0, 0, 0, 0, 0, 0], [0, 0, 0, 5, 5, 5, 0, 0, 0, 5, 5, 5, 0, 0, 0, 0, 0, 0], [0, 0, 0, 5, 5, 5, 0, 0, 0, 5, 5, 5, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]], "outputs": [[[5, 0, 5, 0, 0, 0, 5, 0, 5], [0, 5, 0, 0, 0, 0, 0, 5, 0], [5, 0, 5, 0, 0, 0, 5, 0, 5], [0, 0, 0, 5, 0, 5, 0, 0, 0], [0, 0, 0, 0, 5, 0, 0, 0, 0], [0, 0, 0, 5, 0, 5, 0, 0, 0], [5, 0, 5, 0, 0, 0, 5, 0, 5], [0, 5, 0, 0, 0, 0, 0, 5, 0], [5, 0, 5, 0, 0, 0, 5, 0, 5]], [[5, 5, 0, 5, 5, 0, 0, 0, 0], [0, 0, 5, 0, 0, 5, 0, 0, 0], [5, 5, 0, 5, 5, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 5, 5, 0], [0, 0, 0, 0, 0, 0, 0, 0, 5], [0, 0, 0, 0, 0, 0, 5, 5, 0], [5, 5, 0, 5, 5, 0, 0, 0, 0], [0, 0, 5, 0, 0, 5, 0, 0, 0], [5, 5, 0, 5, 5, 0, 0, 0, 0]], [[5, 5, 5, 5, 5, 5, 5, 5, 5], [0, 5, 5, 0, 5, 5, 0, 5, 5], [5, 0, 5, 5, 0, 5, 5, 0, 5], [0, 0, 0, 5, 5, 5, 5, 5, 5], [0, 0, 0, 0, 5, 5, 0, 5, 5], [0, 0, 0, 5, 0, 5, 5, 0, 5], [5, 5, 5, 0, 0, 0, 5, 5, 5], [0, 5, 5, 0, 0, 0, 0, 5, 5], [5, 0, 5, 0, 0, 0, 5, 0, 5]]]}, "test_io": {"inputs": [[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 0, 0, 0, 5, 5, 5, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 0, 0, 0, 5, 5, 5, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 0, 0, 0, 5, 5, 5, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]], "outputs": [[[5, 5, 5, 5, 5, 5, 5, 5, 5], [0, 5, 0, 0, 5, 0, 0, 5, 0], [5, 0, 5, 5, 0, 5, 5, 0, 5], [0, 0, 0, 5, 5, 5, 0, 0, 0], [0, 0, 0, 0, 5, 0, 0, 0, 0], [0, 0, 0, 5, 0, 5, 0, 0, 0], [5, 5, 5, 0, 0, 0, 5, 5, 5], [0, 5, 0, 0, 0, 0, 0, 5, 0], [5, 0, 5, 0, 0, 0, 5, 0, 5]]]}, "solved": true, "generalizable": true, "anpl": "def make_black_subgrid_black(input_grid: np.ndarray, output_grid: np.ndarray, rows_of_pattern: List[int], cols_of_pattern: List[int]) -> np.ndarray:\n    \"\"\"                                                                                                                                                                 \n    This function takes in a 9x9 numpy array representing the input grid, a 9x9 numpy array representing the output grid, a list of row indices that contain more than t\n    It returns a 9x9 numpy array representing the output grid with the sub grid of the 9x9 pattern that is all black set to black.                                      \n                                                                                                                                                                        \n    Args:                                                                                                                                                               \n    input_grid: A 9x9 numpy array representing the input grid.                                                                                                          \n    output_grid: A 9x9 numpy array representing the output grid.                                                                                                        \n    rows_of_pattern: A list of row indices that contain more than three grey pixels.                                                                                    \n    cols_of_pattern: A list of column indices that contain more than three grey pixels.                                                                                 \n                                                                                                                                                                        \n    Returns:                                                                                                                                                            \n    A 9x9 numpy array representing the output grid with the sub grid of the 9x9 pattern that is all black set to black.                                                 \n    \"\"\"\n    rows_of_pattern_start = rows_of_pattern[0]\n    cols_of_pattern_start = cols_of_pattern[0]\n    for i in range(3):\n        for j in range(3):\n            sub_grid = input_grid[i * 3 + rows_of_pattern_start:i * 3 + 3 + rows_of_pattern_start, j * 3 + cols_of_pattern_start:j * 3 + 3 + cols_of_pattern_start]\n            if np.all(sub_grid == black):\n                output_grid[i * 3:i * 3 + 3, j * 3:j * 3 + 3] = black\n    return output_grid\n\ndef get_cols_with_grey_pixels(input_grid: np.ndarray) -> List[int]:\n    \"\"\"                                                                                                                                                                 \n    This function takes in a 9x9 numpy array and returns a list of column indices that contain more than three grey pixels.                                             \n                                                                                                                                                                        \n    Args:                                                                                                                                                               \n    input_grid: A 9x9 numpy array representing the input grid.                                                                                                          \n                                                                                                                                                                        \n    Returns:                                                                                                                                                            \n    A list of column indices that contain more than three grey pixels.                                                                                                  \n    \"\"\"\n    cols_with_grey_pixels = []\n    for i in range(input_grid.shape[1]):\n        if np.count_nonzero(input_grid[:, i] == grey) >= 3:\n            cols_with_grey_pixels.append(i)\n    return cols_with_grey_pixels\n\ndef get_rows_with_grey_pixels(input_grid: np.ndarray) -> List[int]:\n    \"\"\"                                                                                                                                                                 \n    This function takes in a 9x9 numpy array and returns a list of row indices that contain more than three grey pixels.                                                \n                                                                                                                                                                        \n    Args:                                                                                                                                                               \n    input_grid: A 9x9 numpy array representing the input grid.                                                                                                          \n                                                                                                                                                                        \n    Returns:                                                                                                                                                            \n    A list of row indices that contain more than three grey pixels.                                                                                                     \n    \"\"\"\n    rows_with_grey_pixels = []\n    for i in range(input_grid.shape[0]):\n        if np.count_nonzero(input_grid[i] == grey) >= 3:\n            rows_with_grey_pixels.append(i)\n    return rows_with_grey_pixels\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"                                                                                                                                                                 \n    In the input, you should see a 9x9 pattern on the black background.                                                                                                 \n    The output grid is 9x9.                                                                                                                                             \n    To make the output, you should first get the pattern from the input grid, each row of the pattern contains at least three grey pixels, and each column of the patter\n    then make a 3x3 grid according to the 9x9 pattern, to do this, divide the 9x9 pattern into nine 3x3 sub grid, if a 3x3 sub grid of the pattern are all black, make t\n    if it is all grey, make the corresponding pixel of the make grid grey.grey                                                                                          \n    Then replicate the make grid nine times on the output.                                                                                                              \n    Finally, if the sub grid of the 9x9 pattern is all black, make the correspoinding position of the output grid all black.                                            \n    \"\"\"\n    rows_of_pattern = get_rows_with_grey_pixels(input_grid)\n    cols_of_pattern = get_cols_with_grey_pixels(input_grid)\n    small_grid = np.zeros((3, 3))\n    output_grid = np.zeros((9, 9))\n    small_grid = \"make small grid according to pattern\"(input_grid, rows_of_pattern, cols_of_pattern)\n    output_grid = \"replicate small grid 3 times in row and 3 times in col\"(small_grid)\n    output_grid = make_black_subgrid_black(input_grid, output_grid, rows_of_pattern, cols_of_pattern)\n    return output_grid", "python": "import numpy as np\nfrom typing import *\nblack, blue, red, green, yellow, grey, pink, orange, teal, maroon = range(10)\n\ndef make_black_subgrid_black(input_grid: np.ndarray, output_grid: np.ndarray, rows_of_pattern: List[int], cols_of_pattern: List[int]) -> np.ndarray:\n    \"\"\"                                                                                                                                                                 \n    This function takes in a 9x9 numpy array representing the input grid, a 9x9 numpy array representing the output grid, a list of row indices that contain more than t\n    It returns a 9x9 numpy array representing the output grid with the sub grid of the 9x9 pattern that is all black set to black.                                      \n                                                                                                                                                                        \n    Args:                                                                                                                                                               \n    input_grid: A 9x9 numpy array representing the input grid.                                                                                                          \n    output_grid: A 9x9 numpy array representing the output grid.                                                                                                        \n    rows_of_pattern: A list of row indices that contain more than three grey pixels.                                                                                    \n    cols_of_pattern: A list of column indices that contain more than three grey pixels.                                                                                 \n                                                                                                                                                                        \n    Returns:                                                                                                                                                            \n    A 9x9 numpy array representing the output grid with the sub grid of the 9x9 pattern that is all black set to black.                                                 \n    \"\"\"\n    rows_of_pattern_start = rows_of_pattern[0]\n    cols_of_pattern_start = cols_of_pattern[0]\n    for i in range(3):\n        for j in range(3):\n            sub_grid = input_grid[i * 3 + rows_of_pattern_start:i * 3 + 3 + rows_of_pattern_start, j * 3 + cols_of_pattern_start:j * 3 + 3 + cols_of_pattern_start]\n            if np.all(sub_grid == black):\n                output_grid[i * 3:i * 3 + 3, j * 3:j * 3 + 3] = black\n    return output_grid\n\ndef replicate_small_grid(small_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    This function takes in a 3x3 numpy array representing the small grid and replicates it 3 times in row and 3 times in column.\n    \n    Args:\n    small_grid: A 3x3 numpy array representing the small grid.\n    \n    Returns:\n    A 9x9 numpy array representing the replicated small grid.\n    \"\"\"\n    replicated_grid = np.zeros((9, 9))\n    for i in range(3):\n        for j in range(3):\n            replicated_grid[i * 3:i * 3 + 3, j * 3:j * 3 + 3] = small_grid\n    return replicated_grid\n\ndef make_small_grid(input_grid: np.ndarray, rows_of_pattern: List[int], cols_of_pattern: List[int]) -> np.ndarray:\n    \"\"\"\n    This function takes in a 9x9 numpy array, a list of row indices that contain more than three grey pixels, and a list of column indices that contain more than three grey pixels.\n    It returns a 3x3 numpy array representing the small grid according to the pattern.\n    \n    Args:\n    input_grid: A 9x9 numpy array representing the input grid.\n    rows_of_pattern: A list of row indices that contain more than three grey pixels.\n    cols_of_pattern: A list of column indices that contain more than three grey pixels.\n    \n    Returns:\n    A 3x3 numpy array representing the small grid according to the pattern.\n    \"\"\"\n    small_grid = np.zeros((3, 3))\n    for i in range(3):\n        for j in range(3):\n            sub_grid = input_grid[rows_of_pattern[i * 3:i * 3 + 3], cols_of_pattern[j * 3:j * 3 + 3]]\n            if np.all(sub_grid == black):\n                small_grid[i][j] = black\n            elif np.all(sub_grid == grey):\n                small_grid[i][j] = grey\n    return small_grid\n\ndef get_cols_with_grey_pixels(input_grid: np.ndarray) -> List[int]:\n    \"\"\"                                                                                                                                                                 \n    This function takes in a 9x9 numpy array and returns a list of column indices that contain more than three grey pixels.                                             \n                                                                                                                                                                        \n    Args:                                                                                                                                                               \n    input_grid: A 9x9 numpy array representing the input grid.                                                                                                          \n                                                                                                                                                                        \n    Returns:                                                                                                                                                            \n    A list of column indices that contain more than three grey pixels.                                                                                                  \n    \"\"\"\n    cols_with_grey_pixels = []\n    for i in range(input_grid.shape[1]):\n        if np.count_nonzero(input_grid[:, i] == grey) >= 3:\n            cols_with_grey_pixels.append(i)\n    return cols_with_grey_pixels\n\ndef get_rows_with_grey_pixels(input_grid: np.ndarray) -> List[int]:\n    \"\"\"                                                                                                                                                                 \n    This function takes in a 9x9 numpy array and returns a list of row indices that contain more than three grey pixels.                                                \n                                                                                                                                                                        \n    Args:                                                                                                                                                               \n    input_grid: A 9x9 numpy array representing the input grid.                                                                                                          \n                                                                                                                                                                        \n    Returns:                                                                                                                                                            \n    A list of row indices that contain more than three grey pixels.                                                                                                     \n    \"\"\"\n    rows_with_grey_pixels = []\n    for i in range(input_grid.shape[0]):\n        if np.count_nonzero(input_grid[i] == grey) >= 3:\n            rows_with_grey_pixels.append(i)\n    return rows_with_grey_pixels\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"                                                                                                                                                                 \n    In the input, you should see a 9x9 pattern on the black background.                                                                                                 \n    The output grid is 9x9.                                                                                                                                             \n    To make the output, you should first get the pattern from the input grid, each row of the pattern contains at least three grey pixels, and each column of the patter\n    then make a 3x3 grid according to the 9x9 pattern, to do this, divide the 9x9 pattern into nine 3x3 sub grid, if a 3x3 sub grid of the pattern are all black, make t\n    if it is all grey, make the corresponding pixel of the make grid grey.grey                                                                                          \n    Then replicate the make grid nine times on the output.                                                                                                              \n    Finally, if the sub grid of the 9x9 pattern is all black, make the correspoinding position of the output grid all black.                                            \n    \"\"\"\n    rows_of_pattern = get_rows_with_grey_pixels(input_grid)\n    cols_of_pattern = get_cols_with_grey_pixels(input_grid)\n    small_grid = np.zeros((3, 3))\n    output_grid = np.zeros((9, 9))\n    small_grid = make_small_grid(input_grid, rows_of_pattern, cols_of_pattern)\n    output_grid = replicate_small_grid(small_grid)\n    output_grid = make_black_subgrid_black(input_grid, output_grid, rows_of_pattern, cols_of_pattern)\n    return output_grid"}