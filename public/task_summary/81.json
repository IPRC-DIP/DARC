{"id": 81, "train_io": {"inputs": [[[0, 2, 0, 0, 0, 8, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], [[0, 4, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]]], "outputs": [[[0, 2, 0, 0, 0, 8, 0, 0, 0, 0], [2, 0, 2, 0, 8, 0, 8, 0, 0, 0], [0, 2, 0, 0, 0, 8, 0, 0, 0, 0], [2, 0, 2, 0, 8, 0, 8, 0, 0, 0], [0, 2, 0, 0, 0, 8, 0, 0, 0, 0], [2, 0, 2, 0, 8, 0, 8, 0, 0, 0]], [[0, 4, 0, 0, 0, 0, 0], [4, 0, 4, 0, 0, 0, 0], [0, 4, 0, 0, 0, 0, 0], [4, 0, 4, 0, 0, 0, 0], [0, 4, 0, 0, 0, 0, 0], [4, 0, 4, 0, 0, 0, 0]]]}, "test_io": {"inputs": [[[0, 0, 3, 0, 0, 0, 6, 0, 0, 7, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]], "outputs": [[[0, 0, 3, 0, 0, 0, 6, 0, 0, 7, 0, 0], [0, 3, 0, 3, 0, 6, 0, 6, 7, 0, 7, 0], [0, 0, 3, 0, 0, 0, 6, 0, 0, 7, 0, 0], [0, 3, 0, 3, 0, 6, 0, 6, 7, 0, 7, 0], [0, 0, 3, 0, 0, 0, 6, 0, 0, 7, 0, 0], [0, 3, 0, 3, 0, 6, 0, 6, 7, 0, 7, 0]]]}, "solved": true, "generalizable": true, "anpl": "def main(input_grid: np.ndarray) -> np.ndarray:\n    for j in range(input_grid.shape[1]):\n        if \"a point is not black\"(input_grid, 0, j):\n            for i in range(1, input_grid.shape[0]):\n                if \"you get a number of row,you should check if it's odd\"(input_grid, i):\n                    input_grid = \"you get a grid and a point. The point which you should paint are two point: the adjacent left point and the adjacent right point. And the color which you should paint is same as the toppest point which is on the first row. Now you know the point and color,just paint them\"(input_grid, i, j)\n                if \"is an even numbered row\"(input_grid, i):\n                    input_grid = \"you get a grid and a point.  you should paint this point to the same color as the toppest point which is on the first row\"(input_grid, i, j)\n    return input_grid", "python": "import numpy as np\nfrom typing import *\nblack, blue, red, green, yellow, grey, pink, orange, teal, maroon = range(10)\n\ndef paint_same_color_as_toppest(input_grid: np.ndarray, i: int, j: int) -> np.ndarray:\n    top_color = input_grid[0][j]\n    input_grid[i][j] = top_color\n    return input_grid\n\ndef is_even_rows(input_grid: np.ndarray, i: int) -> bool:\n    return i % 2 == 0\n\ndef paint_adjacent_points(input_grid: np.ndarray, i: int, j: int) -> np.ndarray:\n    top_color = input_grid[0][j]\n    input_grid[i][j - 1] = top_color\n    input_grid[i][j + 1] = top_color\n    return input_grid\n\ndef is_odd_rows(input_grid: np.ndarray, i: int) -> bool:\n    return i % 2 != 0\n\ndef is_not_black(input_grid: np.ndarray, i: int, j: int) -> bool:\n    return input_grid[i][j] != black\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    for j in range(input_grid.shape[1]):\n        if is_not_black(input_grid, 0, j):\n            for i in range(1, input_grid.shape[0]):\n                if is_odd_rows(input_grid, i):\n                    input_grid = paint_adjacent_points(input_grid, i, j)\n                if is_even_rows(input_grid, i):\n                    input_grid = paint_same_color_as_toppest(input_grid, i, j)\n    return input_grid"}