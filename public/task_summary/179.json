{"id": 179, "train_io": {"inputs": [[[4, 4, 0, 0, 0, 0, 5, 0], [4, 4, 0, 0, 0, 0, 0, 0], [0, 0, 4, 0, 0, 0, 5, 0], [0, 4, 0, 0, 5, 5, 0, 0], [0, 0, 6, 0, 0, 0, 9, 0], [6, 6, 6, 0, 0, 0, 0, 9], [6, 0, 6, 6, 9, 9, 0, 0], [0, 6, 6, 0, 9, 0, 0, 0]], [[4, 0, 0, 4, 5, 5, 0, 0], [0, 0, 0, 0, 0, 0, 5, 5], [4, 4, 0, 4, 0, 5, 0, 0], [4, 0, 4, 4, 0, 5, 5, 5], [0, 0, 0, 6, 0, 9, 0, 9], [0, 0, 6, 0, 0, 9, 0, 0], [6, 0, 0, 6, 0, 9, 0, 9], [0, 0, 6, 6, 0, 0, 0, 9]], [[0, 0, 0, 4, 5, 0, 0, 0], [4, 0, 0, 0, 0, 5, 0, 0], [0, 0, 0, 4, 0, 0, 5, 0], [0, 4, 0, 4, 0, 0, 5, 0], [6, 0, 0, 0, 0, 9, 9, 0], [6, 0, 0, 0, 0, 9, 0, 9], [6, 0, 6, 0, 9, 9, 9, 0], [6, 0, 6, 0, 0, 0, 0, 0]], [[4, 0, 0, 4, 0, 5, 0, 5], [0, 0, 4, 0, 5, 0, 0, 5], [0, 0, 4, 4, 0, 0, 5, 5], [4, 0, 0, 0, 5, 0, 0, 5], [6, 6, 6, 0, 9, 0, 9, 9], [6, 6, 6, 0, 0, 9, 9, 9], [6, 0, 0, 6, 9, 9, 0, 9], [6, 6, 0, 6, 9, 0, 9, 9]], [[0, 4, 4, 4, 0, 5, 5, 5], [0, 0, 4, 0, 5, 5, 0, 5], [0, 0, 0, 0, 5, 0, 0, 0], [4, 0, 0, 0, 5, 0, 0, 0], [6, 6, 0, 6, 0, 0, 9, 9], [0, 0, 0, 6, 9, 0, 9, 0], [0, 0, 0, 6, 9, 0, 9, 9], [6, 6, 0, 6, 0, 9, 0, 9]]], "outputs": [[[4, 4, 5, 0], [6, 6, 6, 9], [6, 9, 5, 6], [5, 5, 6, 0]], [[5, 5, 0, 6], [0, 9, 5, 5], [6, 5, 0, 6], [4, 5, 5, 5]], [[5, 9, 9, 4], [6, 5, 0, 9], [6, 9, 5, 4], [6, 4, 5, 4]], [[6, 5, 6, 5], [5, 6, 6, 5], [6, 9, 5, 5], [5, 6, 9, 5]], [[6, 5, 5, 5], [5, 5, 9, 5], [5, 0, 9, 6], [5, 6, 0, 6]]]}, "test_io": {"inputs": [[[0, 4, 0, 4, 5, 0, 0, 0], [0, 4, 4, 4, 5, 0, 5, 5], [4, 4, 4, 0, 0, 5, 5, 5], [0, 0, 0, 0, 5, 0, 0, 0], [6, 0, 6, 6, 9, 9, 9, 0], [0, 0, 0, 6, 0, 9, 0, 0], [0, 6, 0, 0, 0, 0, 9, 9], [6, 0, 0, 0, 0, 9, 0, 0]]], "outputs": [[[5, 9, 6, 6], [5, 9, 5, 5], [4, 5, 5, 5], [5, 9, 0, 0]]]}, "solved": true, "generalizable": true, "anpl": "def replace_color_with_grey(out: np.ndarray, b: np.ndarray) -> np.array:\n    out = \"There are two 4x4 matrices, replace the color of corresponding positon pixels in out(within the 4x4 range) with grey pixels in b\"(out, b)\n    return out\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    (a, b, c, d) = \"The input_grid is an 8x8 matrix, divide it into 4 4x4 matrices and return\"(input_grid)\n    out = \"Build a 4x4 matrix of black\"()\n    out = \"Replace the color of the corresponding position pixels in out(within the 4x4 range) with yellow pixels color in a\"(out, a)\n    out = \"Replace the color of the corresponding position pixels in out(within the 4x4 range) with maroon pixels color in d\"(out, d)\n    out = \"Replace the color of the corresponding position pixels in out(within the 4x4 range) with pink pixels color in c\"(out, c)\n    out = replace_color_with_grey(out, b)\n    return out", "python": "import numpy as np\nfrom typing import *\nblack, blue, red, green, yellow, grey, pink, orange, teal, maroon = range(10)\n\ndef replace_color_with_grey_4x4(out: np.ndarray, b: np.ndarray) -> np.array:\n    out[:4, :4][b[:4, :4] != black] = grey\n    return out\n\ndef replace_color_with_grey(out: np.ndarray, b: np.ndarray) -> np.array:\n    out = replace_color_with_grey_4x4(out, b)\n    return out\n\ndef replace_color_with_pink(out: np.ndarray, c: np.ndarray) -> np.ndarray:\n    out[:4, :4][c[:4, :4] == pink] = pink\n    return out\n\ndef replace_color_with_maroon(out: np.ndarray, d: np.ndarray) -> np.ndarray:\n    out[:4, :4][d[:4, :4] == maroon] = maroon\n    return out\n\ndef replace_color(out: np.ndarray, a: np.ndarray) -> np.ndarray:\n    out[:4, :4][a[:4, :4] == yellow] = yellow\n    return out\n\ndef build_black_matrix() -> np.ndarray:\n    return np.full((4, 4), black)\n\ndef divide_into_4(input_grid: np.ndarray) -> Tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]:\n    a = input_grid[:4, :4]\n    b = input_grid[:4, 4:]\n    c = input_grid[4:, :4]\n    d = input_grid[4:, 4:]\n    return (a, b, c, d)\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    a, b, c, d = divide_into_4(input_grid)\n    out = build_black_matrix()\n    out = replace_color(out, a)\n    out = replace_color_with_maroon(out, d)\n    out = replace_color_with_pink(out, c)\n    out = replace_color_with_grey(out, b)\n    return out"}