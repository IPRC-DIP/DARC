{"id": 82, "train_io": {"inputs": [[[0, 0, 8, 0], [0, 8, 0, 8], [0, 0, 8, 0]], [[0, 0, 3, 3], [0, 3, 0, 3], [3, 3, 3, 0]], [[3, 3, 3, 3], [3, 0, 0, 0], [3, 0, 0, 0]]], "outputs": [[[0, 0, 8, 0, 0, 8, 0, 0], [0, 8, 0, 8, 8, 0, 8, 0], [0, 0, 8, 0, 0, 8, 0, 0], [0, 0, 8, 0, 0, 8, 0, 0], [0, 8, 0, 8, 8, 0, 8, 0], [0, 0, 8, 0, 0, 8, 0, 0]], [[0, 0, 3, 3, 3, 3, 0, 0], [0, 3, 0, 3, 3, 0, 3, 0], [3, 3, 3, 0, 0, 3, 3, 3], [3, 3, 3, 0, 0, 3, 3, 3], [0, 3, 0, 3, 3, 0, 3, 0], [0, 0, 3, 3, 3, 3, 0, 0]], [[3, 3, 3, 3, 3, 3, 3, 3], [3, 0, 0, 0, 0, 0, 0, 3], [3, 0, 0, 0, 0, 0, 0, 3], [3, 0, 0, 0, 0, 0, 0, 3], [3, 0, 0, 0, 0, 0, 0, 3], [3, 3, 3, 3, 3, 3, 3, 3]]]}, "test_io": {"inputs": [[[4, 0, 0, 0], [0, 0, 0, 4], [4, 4, 0, 0]]], "outputs": [[[4, 0, 0, 0, 0, 0, 0, 4], [0, 0, 0, 4, 4, 0, 0, 0], [4, 4, 0, 0, 0, 0, 4, 4], [4, 4, 0, 0, 0, 0, 4, 4], [0, 0, 0, 4, 4, 0, 0, 0], [4, 0, 0, 0, 0, 0, 0, 4]]]}, "solved": true, "generalizable": true, "anpl": "def main(input_grid: np.ndarray) -> np.ndarray:\n    mirrored_grid = \"flip the grid left and right\"(input_grid)\n    output_grid = \"concat the two grids horizontally\"(input_grid, mirrored_grid)\n    mirrored_output_grid = \"flip the grid up and down\"(output_grid)\n    output_grid = \"concat the two grids vertically\"(output_grid, mirrored_output_grid)\n    return output_grid", "python": "import numpy as np\nfrom typing import *\nblack, blue, red, green, yellow, grey, pink, orange, teal, maroon = range(10)\n\ndef concat_vertically(input_grid: np.ndarray, mirrored_grid: np.ndarray) -> np.ndarray:\n    return np.concatenate((input_grid, mirrored_grid), axis=0)\n\ndef flip_up_down(input_grid: np.ndarray) -> np.ndarray:\n    return np.flipud(input_grid)\n\ndef concat_horizontally(input_grid: np.ndarray, mirrored_grid: np.ndarray) -> np.ndarray:\n    return np.concatenate((input_grid, mirrored_grid), axis=1)\n\ndef flip_left_right(input_grid: np.ndarray) -> np.ndarray:\n    return np.fliplr(input_grid)\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    mirrored_grid = flip_left_right(input_grid)\n    output_grid = concat_horizontally(input_grid, mirrored_grid)\n    mirrored_output_grid = flip_up_down(output_grid)\n    output_grid = concat_vertically(output_grid, mirrored_output_grid)\n    return output_grid"}