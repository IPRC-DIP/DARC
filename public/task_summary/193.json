{"id": 193, "train_io": {"inputs": [[[8, 5, 0], [8, 5, 3], [0, 3, 2]], [[3, 8, 2], [3, 2, 2], [8, 5, 2]], [[0, 3, 0], [6, 6, 6], [0, 3, 0]]], "outputs": [[[8, 5, 0, 0, 8, 8], [8, 5, 3, 3, 5, 5], [0, 3, 2, 2, 3, 0], [0, 3, 2, 2, 3, 0], [5, 5, 3, 3, 5, 8], [8, 8, 0, 0, 5, 8]], [[3, 8, 2, 8, 3, 3], [3, 2, 2, 5, 2, 8], [8, 5, 2, 2, 2, 2], [2, 2, 2, 2, 5, 8], [8, 2, 5, 2, 2, 3], [3, 3, 8, 2, 8, 3]], [[0, 3, 0, 0, 6, 0], [6, 6, 6, 3, 6, 3], [0, 3, 0, 0, 6, 0], [0, 6, 0, 0, 3, 0], [3, 6, 3, 6, 6, 6], [0, 6, 0, 0, 3, 0]]]}, "test_io": {"inputs": [[[2, 5, 0], [2, 5, 1], [3, 1, 1]]], "outputs": [[[2, 5, 0, 3, 2, 2], [2, 5, 1, 1, 5, 5], [3, 1, 1, 1, 1, 0], [0, 1, 1, 1, 1, 3], [5, 5, 1, 1, 5, 2], [2, 2, 3, 0, 5, 2]]]}, "solved": true, "generalizable": true, "anpl": "def main(input_grid: np.ndarray) -> np.ndarray:\n    output_grid = [[0 for i in range(6)] for j in range(6)]\n    output_grid = \"Copy input grid to top left of output grid\"(input_grid, output_grid)\n    output_grid = \"Rotate and copy top left section to top right section\"(output_grid)\n    output_grid = \"Rotate and copy top right section to bottom right section\"(output_grid)\n    output_grid = \"Rotate and copy bottom right section to bottom left section\"(output_grid)\n    return output_grid", "python": "import numpy as np\nfrom typing import *\nblack, blue, red, green, yellow, grey, pink, orange, teal, maroon = range(10)\n\ndef rotate_and_copy_bottom_right_to_bottom_left(input_grid: List[List[int]]) -> List[List[int]]:\n    bottom_right = [row[3:] for row in input_grid[3:]]\n    bottom_left = [[0 for i in range(3)] for j in range(3)]\n    for i in range(3):\n        for j in range(3):\n            bottom_left[i][j] = bottom_right[2 - j][i]\n    for i in range(3):\n        for j in range(3):\n            input_grid[i + 3][j] = bottom_left[i][j]\n    return input_grid\n\ndef rotate_and_copy_top_right_to_bottom_right(input_grid: List[List[int]]) -> List[List[int]]:\n    top_right = [row[3:] for row in input_grid[:3]]\n    bottom_right = [[0 for i in range(3)] for j in range(3)]\n    for i in range(3):\n        for j in range(3):\n            bottom_right[i][j] = top_right[2 - j][i]\n    for i in range(3):\n        for j in range(3):\n            input_grid[i + 3][j + 3] = bottom_right[i][j]\n    return input_grid\n\ndef rotate_and_copy_top_left_to_top_right(input_grid: List[List[int]]) -> List[List[int]]:\n    top_left = [row[:3] for row in input_grid[:3]]\n    top_right = [[0 for i in range(3)] for j in range(3)]\n    for i in range(3):\n        for j in range(3):\n            top_right[i][j] = top_left[2 - j][i]\n    for i in range(3):\n        for j in range(3):\n            input_grid[i][j + 3] = top_right[i][j]\n    return input_grid\n\ndef copy_to_top_left(input_grid: np.ndarray, output_grid: List[List[int]]) -> List[List[int]]:\n    for i in range(3):\n        for j in range(3):\n            output_grid[i][j] = input_grid[i][j]\n    return output_grid\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    output_grid = [[0 for i in range(6)] for j in range(6)]\n    output_grid = copy_to_top_left(input_grid, output_grid)\n    output_grid = rotate_and_copy_top_left_to_top_right(output_grid)\n    output_grid = rotate_and_copy_top_right_to_bottom_right(output_grid)\n    output_grid = rotate_and_copy_bottom_right_to_bottom_left(output_grid)\n    return output_grid"}