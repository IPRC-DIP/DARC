{"id": 281, "train_io": {"inputs": [[[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 5, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 5, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 5, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 5, 0, 0, 0, 0, 5, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 5, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 5, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]]], "outputs": [[[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 5, 1, 5, 0, 0, 0, 0], [0, 0, 1, 0, 1, 0, 0, 0, 0], [0, 0, 5, 1, 5, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 1, 5, 0], [0, 0, 0, 0, 0, 1, 0, 1, 0], [0, 5, 1, 5, 0, 5, 1, 5, 0], [0, 1, 0, 1, 0, 0, 0, 0, 0], [0, 5, 1, 5, 0, 0, 0, 0, 0]], [[0, 5, 1, 5, 0, 0, 5, 1, 5], [0, 1, 0, 1, 0, 0, 1, 0, 1], [0, 5, 1, 5, 0, 0, 5, 1, 5], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 5, 1, 5, 0, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 0, 0, 0], [0, 5, 1, 5, 0, 5, 1, 5, 0], [0, 0, 0, 0, 0, 1, 0, 1, 0], [0, 0, 0, 0, 0, 5, 1, 5, 0]]]}, "test_io": {"inputs": [[[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 5, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 5, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 5, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 5, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]]], "outputs": [[[5, 1, 5, 0, 0, 0, 0, 0, 0], [1, 0, 1, 0, 0, 0, 0, 0, 0], [5, 1, 5, 5, 1, 5, 0, 0, 0], [0, 0, 0, 1, 0, 1, 0, 0, 0], [0, 0, 0, 5, 1, 5, 5, 1, 5], [0, 0, 0, 0, 0, 0, 1, 0, 1], [0, 5, 1, 5, 0, 0, 5, 1, 5], [0, 1, 0, 1, 0, 0, 0, 0, 0], [0, 5, 1, 5, 0, 0, 0, 0, 0]]]}, "solved": true, "generalizable": true, "anpl": null, "python": "import numpy as np\nfrom typing import *\nblack, blue, red, green, yellow, grey, pink, orange, teal, maroon = range(10)\n\ndef change_positions_to_black(input: List[List[int]], positions: List[Tuple[int, int]]) -> List[List[int]]:\n    for i, j in positions:\n        input[i][j] = black\n    return input\n\ndef change_corners_to_grey(input: List[List[int]], positions: List[Tuple[int, int]]) -> List[List[int]]:\n    for i, j in positions:\n        if i > 0 and j > 0:\n            input[i - 1][j - 1] = grey\n        if i > 0 and j < len(input[i]) - 1:\n            input[i - 1][j + 1] = grey\n        if i < len(input) - 1 and j > 0:\n            input[i + 1][j - 1] = grey\n        if i < len(input) - 1 and j < len(input[i]) - 1:\n            input[i + 1][j + 1] = grey\n    return input\n\ndef change_positions_to_blue(input: List[List[int]], positions: List[Tuple[int, int]]) -> List[List[int]]:\n    for i, j in positions:\n        if i > 0:\n            input[i - 1][j] = blue\n        if i < len(input) - 1:\n            input[i + 1][j] = blue\n        if j > 0:\n            input[i][j - 1] = blue\n        if j < len(input[i]) - 1:\n            input[i][j + 1] = blue\n    return input\n\ndef find_grey_positions(input: List[List[int]]) -> List[Tuple[int, int]]:\n    positions = []\n    for i in range(len(input)):\n        for j in range(len(input[i])):\n            if input[i][j] == grey:\n                positions.append((i, j))\n    return positions\n\ndef main(input):\n    positions = find_grey_positions(input)\n    output = change_positions_to_blue(input, positions)\n    output = change_corners_to_grey(output, positions)\n    output = change_positions_to_black(output, positions)\n    return output"}