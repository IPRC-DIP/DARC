{"id": 388, "train_io": {"inputs": [[[4, 5, 4], [5, 5, 5], [4, 5, 4]], [[5, 5, 6, 6, 6], [6, 5, 5, 6, 6], [6, 6, 5, 5, 6], [6, 6, 6, 5, 5], [5, 6, 6, 6, 5]], [[9, 5, 9, 9, 9], [9, 9, 5, 5, 9], [9, 5, 9, 9, 9], [9, 9, 5, 9, 9], [9, 9, 9, 5, 5]]], "outputs": [[[0, 4, 0], [4, 4, 4], [0, 4, 0]], [[6, 6, 0, 0, 0], [0, 6, 6, 0, 0], [0, 0, 6, 6, 0], [0, 0, 0, 6, 6], [6, 0, 0, 0, 6]], [[0, 9, 0, 0, 0], [0, 0, 9, 9, 0], [0, 9, 0, 0, 0], [0, 0, 9, 0, 0], [0, 0, 0, 9, 9]]]}, "test_io": {"inputs": [[[3, 3, 3, 5, 3], [3, 5, 3, 3, 3], [3, 5, 5, 3, 5], [3, 3, 3, 5, 3], [5, 5, 5, 3, 3]]], "outputs": [[[0, 0, 0, 3, 0], [0, 3, 0, 0, 0], [0, 3, 3, 0, 3], [0, 0, 0, 3, 0], [3, 3, 3, 0, 0]]]}, "solved": true, "generalizable": true, "anpl": null, "python": "import numpy as np\nfrom typing import *\nblack, blue, red, green, yellow, grey, pink, orange, teal, maroon = range(10)\n\ndef change_color_pixels_to_black(input_grid: np.ndarray, color_pixels: List[Tuple[int, int]]) -> np.ndarray:\n    output_grid = input_grid.copy()\n    for pixel in color_pixels:\n        output_grid[pixel] = black\n    return output_grid\n\ndef change_grey_to_color(input_grid: np.ndarray, color: int) -> np.ndarray:\n    output_grid = input_grid.copy()\n    output_grid[output_grid == grey] = color\n    return output_grid\n\ndef find_special_color_pixels(special_color: int, input_grid: np.ndarray) -> List[Tuple[int, int]]:\n    special_color_pixels = []\n    for i in range(input_grid.shape[0]):\n        for j in range(input_grid.shape[1]):\n            if input_grid[i][j] == special_color:\n                special_color_pixels.append((i, j))\n    return special_color_pixels\n\ndef get_color(input_grid: np.ndarray) -> int:\n    colors, counts = np.unique(input_grid, return_counts=True)\n    color_counts = dict(zip(colors, counts))\n    color_counts.pop(grey, None)\n    return max(color_counts, key=color_counts.get)\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    special_color = get_color(input_grid)\n    color_pixels = find_special_color_pixels(special_color, input_grid)\n    output_grid = input_grid.copy()\n    output_grid = change_grey_to_color(output_grid, special_color)\n    output_grid = change_color_pixels_to_black(output_grid, color_pixels)\n    return output_grid"}