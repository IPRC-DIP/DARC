{"id": 324, "train_io": {"inputs": [[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 8, 0, 0, 0, 0, 0, 0], [0, 0, 8, 8, 0, 0, 0, 0, 0, 0], [0, 8, 8, 8, 0, 0, 0, 0, 0, 0], [0, 0, 8, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 8, 0, 0, 0], [0, 0, 0, 0, 8, 8, 8, 0, 0, 0], [0, 0, 0, 0, 0, 0, 8, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 8, 8, 0, 0, 0, 0, 0], [0, 8, 8, 8, 0, 0, 0, 0, 0, 0], [0, 0, 0, 8, 0, 0, 0, 8, 8, 0], [0, 0, 0, 0, 0, 0, 0, 8, 8, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 8, 8, 8, 0, 0, 0], [0, 0, 0, 0, 0, 8, 0, 8, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 8, 8, 0, 0, 0, 8, 0, 0, 0], [0, 0, 0, 8, 8, 0, 0, 0, 8, 8, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]], "outputs": [[[8, 0, 0, 0], [0, 8, 0, 0], [0, 0, 8, 0], [0, 0, 0, 8]], [[8, 0, 0], [0, 8, 0], [0, 0, 8]], [[8, 0], [0, 8]]]}, "test_io": {"inputs": [[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 8, 8, 0, 0], [0, 0, 0, 8, 8, 8, 0, 0, 8, 8, 0, 0], [0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 8, 0, 0, 0, 0, 0, 8, 8, 0, 0], [0, 0, 8, 8, 0, 0, 0, 0, 8, 8, 8, 0], [0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]], "outputs": [[[8, 0, 0, 0, 0], [0, 8, 0, 0, 0], [0, 0, 8, 0, 0], [0, 0, 0, 8, 0], [0, 0, 0, 0, 8]]]}, "solved": true, "generalizable": true, "anpl": null, "python": "import numpy as np\nfrom typing import *\nblack, blue, red, green, yellow, grey, pink, orange, teal, maroon = range(10)\n\ndef make_teal_pixels_black(grid: np.ndarray, i: int, j: int) -> np.ndarray:\n    \"\"\"\n    This function takes a grid and the indices of a teal pixel and makes all the teal pixels in the same shape black.\n    \n    Parameters:\n    grid (np.ndarray): A numpy array representing the input grid\n    i (int): The row index of the teal pixel\n    j (int): The column index of the teal pixel\n    \n    Returns:\n    np.ndarray: A numpy array representing the output grid with all the teal pixels in the same shape as the input pixel black\n    \"\"\"\n    if i < 0 or j < 0 or i >= len(grid) or (j >= len(grid[0])) or (grid[i][j] != teal):\n        return grid\n    grid[i][j] = black\n    grid = make_teal_pixels_black(grid, i - 1, j)\n    grid = make_teal_pixels_black(grid, i + 1, j)\n    grid = make_teal_pixels_black(grid, i, j - 1)\n    grid = make_teal_pixels_black(grid, i, j + 1)\n    return grid\n\ndef create_teal_line(grid: np.ndarray, number_of_shapes: int) -> np.ndarray:\n    \"\"\"                                                                                                                                                                   \n    This function takes a grid and the number of shapes and creates a line from the top left corner to the base right corner with the same color as the shapes in the inpu\n                                                                                                                                                                          \n    Parameters:                                                                                                                                                           \n    grid (np.ndarray): A numpy array representing the input grid                                                                                                          \n    number_of_shapes (int): The number of shapes in the input grid                                                                                                        \n                                                                                                                                                                          \n    Returns:                                                                                                                                                              \n    np.ndarray: A numpy array representing the output grid with a line from the top left corner to the base right corner with the same color as the shapes in the input gr\n    \"\"\"\n    for i in range(number_of_shapes):\n        grid[i][i] = teal\n    return grid\n\ndef find_number_of_teal_shapes(input_grid: np.ndarray) -> int:\n    \"\"\"                                                                                                                                                                   \n    This function takes an input grid and returns the number of teal shapes in it.                                                                                        \n                                                                                                                                                                          \n    Parameters:                                                                                                                                                           \n    input_grid (np.ndarray): A numpy array representing the input grid                                                                                                    \n                                                                                                                                                                          \n    Returns:                                                                                                                                                              \n    int: The number of teal shapes in the input grid                                                                                                                      \n    \"\"\"\n    count = 0\n    for i in range(len(input_grid)):\n        for j in range(len(input_grid[i])):\n            if input_grid[i][j] == teal:\n                count += 1\n                input_grid = make_teal_pixels_black(input_grid, i, j)\n    return count\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"                                                                                                                                                                   \n    In the input, you should see a grid contains several seperate grid, you should find the number of teal shapes and create a grid with the same number of shapes        \n    The output grid size is the number of shapes the input grid has.                                                                                                      \n    To make the output, you have to take the same color as the shapes in the input grid and create a line from the top left corner to the base right corner               \n    \"\"\"\n    number_of_shapes = find_number_of_teal_shapes(input_grid)\n    output_grid = np.zeros((number_of_shapes, number_of_shapes))\n    output_grid = create_teal_line(output_grid, number_of_shapes)\n    return output_grid"}