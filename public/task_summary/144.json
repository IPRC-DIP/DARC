{"id": 144, "train_io": {"inputs": [[[0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0], [2, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2], [0, 2, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0], [0, 2, 2, 2, 2, 2, 2, 0, 0, 2, 0, 0, 0], [0, 2, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0], [0, 2, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2], [0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0], [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2], [0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], [2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], [2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2], [0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0]], [[0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0], [0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0], [0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2], [0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0], [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0], [0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0], [0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0], [0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0], [0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0], [2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0], [0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2], [0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0], [0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0], [0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0], [0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0]]], "outputs": [[[8, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0], [2, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2], [0, 2, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0], [0, 2, 2, 2, 2, 2, 2, 0, 0, 2, 0, 0, 0], [0, 2, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0], [0, 2, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2], [0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 8], [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [0, 0, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]], [[0, 0, 0, 0, 2, 8, 8, 8, 8, 8, 8, 8, 8], [0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2], [0, 0, 0, 0, 2, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 2, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 2, 1, 1, 1, 1, 1, 1, 1, 1], [2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 2, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 2, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 2, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 2, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 2, 1, 1, 1, 1, 1, 1, 1, 1]], [[0, 0, 0, 2, 8, 8, 8, 2, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 2, 8, 8, 8, 2, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 2, 8, 8, 8, 2, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 2, 8, 8, 8, 2, 1, 1, 1, 1, 1, 1, 1, 1], [2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2], [0, 0, 0, 0, 0, 0, 0, 2, 8, 8, 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 2, 8, 8, 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 2, 8, 8, 2, 0, 0, 0, 0, 0]], [[0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 2, 8, 8, 8], [0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 2, 8, 8, 8], [0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2], [0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0], [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0], [0, 0, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 0, 0, 0], [0, 0, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 0, 0, 0], [0, 0, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 0, 0, 0], [0, 0, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 0, 0, 0], [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 0, 0, 0], [0, 0, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2], [0, 0, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 0, 0, 0], [0, 0, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 0, 0, 0], [0, 0, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 0, 0, 0], [0, 0, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 0, 0, 0]]]}, "test_io": {"inputs": [[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0], [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0], [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0], [2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0], [0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0]]], "outputs": [[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0], [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 0, 0, 0, 0, 0], [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [8, 8, 8, 2, 0, 0, 0, 0, 0, 0, 2, 8, 2, 0, 0, 0], [2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 2, 8, 2, 0, 0, 0], [8, 8, 8, 2, 0, 0, 0, 0, 0, 0, 2, 8, 2, 0, 0, 0]]]}, "solved": true, "generalizable": true, "anpl": "def main(input_grid: np.ndarray) -> np.ndarray:\n    output_grid = \"same as input grid\"(input_grid)\n    black_blocks = \"find the all zero blocks in input grid seperated by red lines\"(input_grid)\n    (largest_blocks, smallest_blocks) = \"find the largest and smallest blocks in black_blocks\"(black_blocks)\n    output_grid = \"replace the largest blocks with color blue in output grid \"(output_grid, largest_blocks)\n    output_grid = \"replace the smallest blocks with color teal in output_grid \"(output_grid, smallest_blocks)\n    return output_grid", "python": "import numpy as np\nfrom typing import *\nblack, blue, red, green, yellow, grey, pink, orange, teal, maroon = range(10)\n\ndef replace_smallest_blocks_with_teal(output_grid: np.ndarray, smallest_blocks: List[Tuple[int, int, int, int]]) -> np.ndarray:\n    \"\"\"\n    Replaces the smallest blocks in the output grid with teal color.\n    \n    Args:\n    output_grid: A numpy array representing the output grid.\n    smallest_blocks: A list of tuples representing the smallest blocks. Each tuple contains the coordinates of the top-left and bottom-right corners of the block.\n    \n    Returns:\n    A numpy array representing the output grid with the smallest blocks replaced with teal color.\n    \"\"\"\n    for block in smallest_blocks:\n        output_grid[block[0]:block[2] + 1, block[1]:block[3] + 1] = teal\n    return output_grid\n\ndef replace_largest_blocks_with_blue(input_grid: np.ndarray, largest_blocks: List[Tuple[int, int, int, int]]) -> np.ndarray:\n    \"\"\"\n    Replaces the largest blocks in the input grid with blue color.\n    \n    Args:\n    input_grid: A numpy array representing the input grid.\n    largest_blocks: A list of tuples representing the largest blocks. Each tuple contains the coordinates of the top-left and bottom-right corners of the block.\n    \n    Returns:\n    A numpy array representing the output grid with the largest blocks replaced with blue color.\n    \"\"\"\n    output_grid = np.copy(input_grid)\n    for block in largest_blocks:\n        output_grid[block[0]:block[2] + 1, block[1]:block[3] + 1] = blue\n    return output_grid\n\ndef find_largest_and_smallest_blocks(black_blocks: List[Tuple[int, int, int, int]]) -> Tuple[List[Tuple[int, int, int, int]], List[Tuple[int, int, int, int]]]:\n    \"\"\"\n    Finds the largest and smallest blocks in the list of black blocks.\n    \n    Args:\n    black_blocks: A list of tuples representing the blocks of black elements. Each tuple contains the coordinates of the top-left and bottom-right corners of the block.\n    \n    Returns:\n    A tuple containing two lists of tuples. The first list contains the largest blocks and the second list contains the smallest blocks.\n    \"\"\"\n    largest_blocks = []\n    smallest_blocks = []\n    max_area = 0\n    min_area = float('inf')\n    for block in black_blocks:\n        area = (block[2] - block[0] + 1) * (block[3] - block[1] + 1)\n        if area > max_area:\n            max_area = area\n            largest_blocks = [block]\n        elif area == max_area:\n            largest_blocks.append(block)\n        if area < min_area:\n            min_area = area\n            smallest_blocks = [block]\n        elif area == min_area:\n            smallest_blocks.append(block)\n    return (largest_blocks, smallest_blocks)\n\ndef find_black_blocks(input_grid: np.ndarray) -> List[Tuple[int, int, int, int]]:\n    \"\"\"\n    Finds all the black blocks in the input grid separated by red lines.\n    \n    Args:\n    input_grid: A numpy array representing the input grid.\n    \n    Returns:\n    A list of tuples representing the black blocks. Each tuple contains the coordinates of the top-left and bottom-right corners of the block.\n    \"\"\"\n    black_blocks = []\n    rows, cols = input_grid.shape\n    for i in range(rows):\n        for j in range(cols):\n            if input_grid[i][j] == black:\n                top, left = (i, j)\n                bottom, right = (i, j)\n                while bottom < rows - 1 and input_grid[bottom + 1][j] == black:\n                    bottom += 1\n                while right < cols - 1 and input_grid[i][right + 1] == black:\n                    right += 1\n                black_blocks.append((top, left, bottom, right))\n                for k in range(top, bottom + 1):\n                    for l in range(left, right + 1):\n                        input_grid[k][l] = red\n    return black_blocks\n\ndef identity(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns a numpy array identical to the input grid.\n    \n    Args:\n    input_grid: A numpy array representing the input grid.\n    \n    Returns:\n    A numpy array identical to the input grid.\n    \"\"\"\n    return np.copy(input_grid)\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    output_grid = identity(input_grid)\n    black_blocks = find_black_blocks(input_grid)\n    largest_blocks, smallest_blocks = find_largest_and_smallest_blocks(black_blocks)\n    output_grid = replace_largest_blocks_with_blue(output_grid, largest_blocks)\n    output_grid = replace_smallest_blocks_with_teal(output_grid, smallest_blocks)\n    return output_grid"}