{"id": 312, "train_io": {"inputs": [[[6, 7, 6, 7, 6, 7, 6, 3, 3, 3, 3], [7, 6, 7, 6, 7, 6, 7, 3, 3, 3, 3], [6, 7, 6, 7, 6, 7, 6, 3, 3, 3, 3], [7, 6, 7, 6, 7, 6, 7, 3, 3, 3, 3], [6, 7, 6, 7, 6, 7, 6, 3, 3, 3, 3], [7, 6, 7, 6, 7, 6, 7, 3, 3, 3, 3], [6, 7, 6, 7, 6, 7, 6, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]], [[6, 3, 6, 3, 6, 3, 6, 1], [3, 6, 3, 6, 3, 6, 3, 1], [6, 3, 6, 3, 6, 3, 6, 1], [3, 6, 3, 6, 3, 6, 3, 1], [6, 3, 6, 3, 6, 3, 6, 1], [3, 6, 3, 6, 3, 6, 3, 1], [6, 3, 6, 3, 6, 3, 6, 1], [1, 1, 1, 1, 1, 1, 1, 1]], [[5, 4, 5, 4, 5, 6], [4, 5, 4, 5, 4, 6], [5, 4, 5, 4, 5, 6], [4, 5, 4, 5, 4, 6], [5, 4, 5, 4, 5, 6], [6, 6, 6, 6, 6, 6]]], "outputs": [[[7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7], [6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6], [7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7], [6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6], [7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7], [6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6], [7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7], [6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6], [7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7], [6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6], [7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7]], [[3, 6, 3, 6, 3, 6, 3, 6], [6, 3, 6, 3, 6, 3, 6, 3], [3, 6, 3, 6, 3, 6, 3, 6], [6, 3, 6, 3, 6, 3, 6, 3], [3, 6, 3, 6, 3, 6, 3, 6], [6, 3, 6, 3, 6, 3, 6, 3], [3, 6, 3, 6, 3, 6, 3, 6], [6, 3, 6, 3, 6, 3, 6, 3]], [[4, 5, 4, 5, 4, 5], [5, 4, 5, 4, 5, 4], [4, 5, 4, 5, 4, 5], [5, 4, 5, 4, 5, 4], [4, 5, 4, 5, 4, 5], [5, 4, 5, 4, 5, 4]]]}, "test_io": {"inputs": [[[8, 5, 7, 8, 5, 7, 8, 5, 7, 8, 5, 7, 3, 3, 3, 3, 3, 3], [5, 7, 8, 5, 7, 8, 5, 7, 8, 5, 7, 8, 3, 3, 3, 3, 3, 3], [8, 5, 7, 8, 5, 7, 8, 5, 7, 8, 5, 7, 3, 3, 3, 3, 3, 3], [5, 7, 8, 5, 7, 8, 5, 7, 8, 5, 7, 8, 3, 3, 3, 3, 3, 3], [8, 5, 7, 8, 5, 7, 8, 5, 7, 8, 5, 7, 3, 3, 3, 3, 3, 3], [5, 7, 8, 5, 7, 8, 5, 7, 8, 5, 7, 8, 3, 3, 3, 3, 3, 3], [8, 5, 7, 8, 5, 7, 8, 5, 7, 8, 5, 7, 3, 3, 3, 3, 3, 3], [5, 7, 8, 5, 7, 8, 5, 7, 8, 5, 7, 8, 3, 3, 3, 3, 3, 3], [8, 5, 7, 8, 5, 7, 8, 5, 7, 8, 5, 7, 3, 3, 3, 3, 3, 3], [5, 7, 8, 5, 7, 8, 5, 7, 8, 5, 7, 8, 3, 3, 3, 3, 3, 3], [8, 5, 7, 8, 5, 7, 8, 5, 7, 8, 5, 7, 3, 3, 3, 3, 3, 3], [5, 7, 8, 5, 7, 8, 5, 7, 8, 5, 7, 8, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]]], "outputs": [[[5, 7, 8, 5, 7, 8, 5, 7, 8, 5, 7, 8, 5, 7, 8, 5, 7, 8], [7, 8, 5, 7, 8, 5, 7, 8, 5, 7, 8, 5, 7, 8, 5, 7, 8, 5], [5, 7, 8, 5, 7, 8, 5, 7, 8, 5, 7, 8, 5, 7, 8, 5, 7, 8], [7, 8, 5, 7, 8, 5, 7, 8, 5, 7, 8, 5, 7, 8, 5, 7, 8, 5], [5, 7, 8, 5, 7, 8, 5, 7, 8, 5, 7, 8, 5, 7, 8, 5, 7, 8], [7, 8, 5, 7, 8, 5, 7, 8, 5, 7, 8, 5, 7, 8, 5, 7, 8, 5], [5, 7, 8, 5, 7, 8, 5, 7, 8, 5, 7, 8, 5, 7, 8, 5, 7, 8], [7, 8, 5, 7, 8, 5, 7, 8, 5, 7, 8, 5, 7, 8, 5, 7, 8, 5], [5, 7, 8, 5, 7, 8, 5, 7, 8, 5, 7, 8, 5, 7, 8, 5, 7, 8], [7, 8, 5, 7, 8, 5, 7, 8, 5, 7, 8, 5, 7, 8, 5, 7, 8, 5], [5, 7, 8, 5, 7, 8, 5, 7, 8, 5, 7, 8, 5, 7, 8, 5, 7, 8], [7, 8, 5, 7, 8, 5, 7, 8, 5, 7, 8, 5, 7, 8, 5, 7, 8, 5], [5, 7, 8, 5, 7, 8, 5, 7, 8, 5, 7, 8, 5, 7, 8, 5, 7, 8], [7, 8, 5, 7, 8, 5, 7, 8, 5, 7, 8, 5, 7, 8, 5, 7, 8, 5], [5, 7, 8, 5, 7, 8, 5, 7, 8, 5, 7, 8, 5, 7, 8, 5, 7, 8], [7, 8, 5, 7, 8, 5, 7, 8, 5, 7, 8, 5, 7, 8, 5, 7, 8, 5], [5, 7, 8, 5, 7, 8, 5, 7, 8, 5, 7, 8, 5, 7, 8, 5, 7, 8], [7, 8, 5, 7, 8, 5, 7, 8, 5, 7, 8, 5, 7, 8, 5, 7, 8, 5]]]}, "solved": true, "generalizable": false, "anpl": null, "python": "import numpy as np\nfrom typing import *\nblack, blue, red, green, yellow, grey, pink, orange, teal, maroon = range(10)\n\ndef fill_first_two_rows(grid: np.ndarray) -> np.ndarray:\n    pattern = grid[:2, :]\n    out = np.tile(pattern, (grid.shape[0] // pattern.shape[0], 1))\n    return out\n\ndef fill_grid_with_pattern(output_grid: np.ndarray, pattern: np.ndarray) -> np.ndarray:\n    out = np.tile(pattern, (output_grid.shape[0] // pattern.shape[0], output_grid.shape[1] // pattern.shape[1]))\n    return out\n\ndef select_square(grid: np.ndarray, len: int) -> np.ndarray:\n    return grid[:len, 1:len + 1]\n\ndef count_colors(grid: np.ndarray) -> int:\n    return len(np.unique(grid))\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    output_grid = np.zeros_like(input_grid)\n    color_num = count_colors(input_grid)\n    len = color_num - 1\n    pattern = select_square(input_grid, len)\n    grid1 = fill_grid_with_pattern(output_grid, pattern)\n    output_grid = fill_first_two_rows(grid1)\n    return output_grid"}