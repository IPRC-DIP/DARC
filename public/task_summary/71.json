{"id": 71, "train_io": {"inputs": [[[0, 0, 0, 2, 2], [0, 0, 2, 0, 2], [2, 0, 0, 2, 2], [2, 2, 0, 0, 2], [0, 0, 0, 0, 2], [0, 2, 0, 0, 0], [4, 4, 4, 4, 4], [2, 0, 0, 0, 0], [2, 2, 0, 0, 0], [2, 0, 2, 0, 0], [0, 0, 2, 0, 0], [0, 0, 0, 2, 2], [2, 0, 0, 2, 0]], [[0, 2, 2, 2, 2], [0, 0, 0, 0, 2], [2, 0, 2, 2, 2], [0, 0, 2, 2, 0], [2, 2, 2, 2, 0], [2, 2, 0, 0, 2], [4, 4, 4, 4, 4], [0, 0, 0, 0, 0], [0, 0, 2, 0, 0], [2, 0, 0, 0, 2], [0, 0, 0, 2, 0], [0, 2, 0, 2, 0], [0, 2, 2, 2, 0]], [[2, 2, 0, 2, 2], [2, 0, 2, 2, 2], [2, 0, 0, 0, 0], [0, 2, 0, 2, 0], [2, 2, 2, 0, 2], [2, 0, 2, 0, 0], [4, 4, 4, 4, 4], [2, 0, 0, 2, 2], [0, 0, 2, 0, 2], [2, 2, 0, 0, 0], [0, 0, 2, 0, 2], [0, 2, 0, 2, 2], [0, 2, 2, 0, 2]], [[0, 2, 0, 2, 0], [2, 2, 0, 2, 2], [0, 2, 2, 2, 0], [0, 2, 2, 0, 0], [0, 2, 2, 2, 2], [2, 0, 2, 0, 2], [4, 4, 4, 4, 4], [2, 0, 2, 2, 2], [0, 2, 2, 0, 0], [2, 0, 2, 0, 2], [2, 0, 0, 0, 2], [2, 2, 0, 2, 0], [2, 0, 2, 2, 0]]], "outputs": [[[3, 0, 0, 3, 3], [3, 3, 3, 0, 3], [0, 0, 3, 3, 3], [3, 3, 3, 0, 3], [0, 0, 0, 3, 0], [3, 3, 0, 3, 0]], [[0, 3, 3, 3, 3], [0, 0, 3, 0, 3], [0, 0, 3, 3, 0], [0, 0, 3, 0, 0], [3, 0, 3, 0, 0], [3, 0, 3, 3, 3]], [[0, 3, 0, 0, 0], [3, 0, 0, 3, 0], [0, 3, 0, 0, 0], [0, 3, 3, 3, 3], [3, 0, 3, 3, 0], [3, 3, 0, 0, 3]], [[3, 3, 3, 0, 3], [3, 0, 3, 3, 3], [3, 3, 0, 3, 3], [3, 3, 3, 0, 3], [3, 0, 3, 0, 3], [0, 0, 0, 3, 3]]]}, "test_io": {"inputs": [[[2, 0, 2, 2, 0], [2, 0, 0, 2, 2], [2, 2, 2, 0, 0], [2, 2, 2, 2, 2], [0, 2, 2, 0, 0], [2, 2, 2, 2, 2], [4, 4, 4, 4, 4], [0, 0, 0, 2, 2], [2, 0, 0, 0, 2], [2, 2, 2, 0, 2], [0, 2, 2, 0, 0], [2, 0, 2, 2, 0], [2, 0, 2, 2, 2]], [[2, 0, 2, 0, 2], [2, 0, 2, 0, 2], [0, 0, 0, 2, 0], [0, 2, 2, 2, 0], [2, 0, 2, 2, 0], [2, 2, 2, 0, 2], [4, 4, 4, 4, 4], [2, 2, 0, 0, 0], [0, 2, 2, 2, 2], [0, 0, 2, 2, 0], [0, 2, 0, 0, 0], [0, 2, 2, 0, 2], [2, 0, 0, 0, 0]]], "outputs": [[[3, 0, 3, 0, 3], [0, 0, 0, 3, 0], [0, 0, 0, 0, 3], [3, 0, 0, 3, 3], [3, 3, 0, 3, 0], [0, 3, 0, 0, 0]], [[0, 3, 3, 0, 3], [3, 3, 0, 3, 0], [0, 0, 3, 0, 0], [0, 0, 3, 3, 0], [3, 3, 0, 3, 3], [0, 3, 3, 0, 3]]]}, "solved": true, "generalizable": true, "anpl": "def main(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    In the input, you should see a n*n grid with multiple color pixels.\n    \"\"\"\n    mindex = \"Find a yellow line and return the index of the line\"(input_grid)\n    ngrid = np.zeros((input_grid.shape[0] // 2, input_grid.shape[1]))\n    ans_grid = \"Traverse all pixels whose row number is less than mindex in inputgrid, set the pixel coordinates as (x, y), if the value of the pixel is the same as the value of (x + mindex + 1, y), then change the value of ngrid (x, y) to zero; change to green if different.Return the ngrid\"(input_grid, mindex, ngrid)\n    return ans_grid", "python": "import numpy as np\nfrom typing import *\nblack, blue, red, green, yellow, grey, pink, orange, teal, maroon = range(10)\n\ndef process_pixels(input_grid: np.ndarray, mindex: int, ngrid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Traverse all pixels whose row number is less than mindex in inputgrid, set the pixel coordinates as (x, y),\n    if the value of the pixel is the same as the value of (x + mindex + 1, y), then change the value of ngrid (x, y) to zero;\n    change to green if different.\n    Return the ngrid\n    \"\"\"\n    for i in range(mindex):\n        for j in range(input_grid.shape[1]):\n            if input_grid[i][j] == input_grid[i + mindex + 1][j]:\n                ngrid[i][j] = 0\n            else:\n                ngrid[i][j] = green\n    return ngrid\n\ndef find_yellow_line_index(input_grid: np.ndarray) -> int:\n    \"\"\"\n    This function takes in a n*n grid with multiple color pixels and returns the index of the first yellow line found.\n    \"\"\"\n    for i in range(input_grid.shape[0]):\n        if np.array_equal(input_grid[i], np.array([yellow] * input_grid.shape[1])):\n            return i\n    return -1\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    In the input, you should see a n*n grid with multiple color pixels.\n    \"\"\"\n    mindex = find_yellow_line_index(input_grid)\n    ngrid = np.zeros((input_grid.shape[0] // 2, input_grid.shape[1]))\n    ans_grid = process_pixels(input_grid, mindex, ngrid)\n    return ans_grid"}