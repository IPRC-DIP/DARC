{"id": 38, "train_io": {"inputs": [[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 7, 7, 0, 0, 0, 0], [0, 0, 0, 6, 8, 8, 6, 0, 0, 0], [0, 0, 7, 8, 4, 4, 8, 7, 0, 0], [0, 0, 7, 8, 4, 4, 8, 7, 0, 0], [0, 0, 0, 6, 8, 8, 6, 0, 0, 0], [0, 0, 0, 0, 7, 7, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 3, 6, 5, 3, 0, 0, 0, 0], [0, 0, 5, 2, 2, 6, 0, 0, 0, 0], [0, 0, 6, 2, 2, 5, 0, 0, 0, 0], [0, 0, 3, 5, 6, 3, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]], "outputs": [[[0, 0, 7], [0, 6, 8], [7, 8, 4]], [[1, 0, 0], [0, 3, 6], [0, 5, 2]]]}, "test_io": {"inputs": [[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0], [0, 0, 0, 4, 4, 8, 4, 0, 0, 0], [0, 0, 8, 8, 3, 3, 4, 0, 0, 0], [0, 0, 0, 4, 3, 3, 8, 8, 0, 0], [0, 0, 0, 4, 8, 4, 4, 0, 0, 0], [0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]], "outputs": [[[0, 0, 0], [0, 4, 4], [8, 8, 3]]]}, "solved": true, "generalizable": true, "anpl": "def main(input_grid: np.ndarray) -> np.ndarray:\n    smallest_row = \" finf the smallest numbers of row of not-black point in input_grid\"(input_grid)\n    smallest_col = \"you get a 10*10 grid with different color. You should find all non-black point and get the smallest number of col\"(input_grid)\n    inner_grid = \"cut a 6*6 grid form input_grid in (row,col)\"(input_grid, smallest_row, smallest_col)\n    output = \"cut a 3*3 grid from top-left in inner_grid\"(inner_grid)\n    return output", "python": "import numpy as np\nfrom typing import *\nblack, blue, red, green, yellow, grey, pink, orange, teal, maroon = range(10)\n\ndef cut_three_by_three(inner_grid: np.ndarray) -> np.ndarray:\n    return inner_grid[:3, :3]\n\ndef cut_six_by_six(input_grid: np.ndarray, row: int, col: int) -> np.ndarray:\n    return input_grid[row:row + 6, col:col + 6]\n\ndef find_smallest_col(input_grid: np.ndarray) -> int:\n    for i in range(input_grid.shape[1]):\n        if not np.all(input_grid[:, i] == black):\n            return i\n    return input_grid.shape[1]\n\ndef find_smallest_row(input_grid: np.ndarray) -> int:\n    for i in range(input_grid.shape[0]):\n        if not np.all(input_grid[i] == black):\n            return i\n    return input_grid.shape[0]\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    smallest_row = find_smallest_row(input_grid)\n    smallest_col = find_smallest_col(input_grid)\n    inner_grid = cut_six_by_six(input_grid, smallest_row, smallest_col)\n    output = cut_three_by_three(inner_grid)\n    return output"}