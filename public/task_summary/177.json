{"id": 177, "train_io": {"inputs": [[[1, 1, 1], [2, 2, 2], [1, 1, 1]], [[3, 4, 6], [3, 4, 6], [3, 4, 6]], [[2, 3, 3, 8, 1], [2, 3, 3, 8, 1], [2, 3, 3, 8, 1]], [[2, 2], [6, 6], [8, 8], [8, 8]], [[4, 4, 4, 4], [4, 4, 4, 4], [2, 2, 2, 2], [2, 2, 2, 2], [8, 8, 8, 8], [3, 3, 3, 3]]], "outputs": [[[1], [2], [1]], [[3, 4, 6]], [[2, 3, 8, 1]], [[2], [6], [8]], [[4], [2], [8], [3]]]}, "test_io": {"inputs": [[[1, 1, 2, 3, 3, 3, 8, 8, 4], [1, 1, 2, 3, 3, 3, 8, 8, 4], [1, 1, 2, 3, 3, 3, 8, 8, 4], [1, 1, 2, 3, 3, 3, 8, 8, 4]]], "outputs": [[[1, 2, 3, 8, 4]]]}, "solved": true, "generalizable": false, "anpl": "def main(input_grid: np.ndarray) -> np.ndarray:\n    color_list = \"traverse the grid from left to right and top to bottom, noting the order of different colors\"(input_grid)\n    output_grid = np.array([color_list])\n    if \"Check if a given row has only one color.\n\nArgs:\nrow: A numpy array representing a row in the input grid.\n\nReturns:\nA boolean value indicating whether the row has only one color or not.\"(input_grid[0]):\n        return output_grid.T\n    else:\n        return output_grid", "python": "import numpy as np\nfrom typing import *\nblack, blue, red, green, yellow, grey, pink, orange, teal, maroon = range(10)\n\ndef row_has_only_one_color(row: np.ndarray) -> bool:\n    \"\"\"\n    Check if a given row has only one color.\n    \n    Args:\n    row: A numpy array representing a row in the input grid.\n    \n    Returns:\n    A boolean value indicating whether the row has only one color or not.\n    \"\"\"\n    return len(set(row)) == 1\n\ndef traverse_grid(input_grid: np.ndarray) -> List[int]:\n    \"\"\"\n    Traverse the grid from left to right and top to bottom, noting the order of different colors.\n    \n    Args:\n    input_grid: A numpy array representing the input grid.\n    \n    Returns:\n    A list of integers representing the order of different colors in the grid.\n    \"\"\"\n    color_list = []\n    for row in input_grid:\n        for color in row:\n            if color not in color_list:\n                color_list.append(color)\n    return color_list\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    color_list = traverse_grid(input_grid)\n    output_grid = np.array([color_list])\n    if row_has_only_one_color(input_grid[0]):\n        return output_grid.T\n    else:\n        return output_grid"}