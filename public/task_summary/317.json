{"id": 317, "train_io": {"inputs": [[[1, 1, 0, 0], [0, 1, 0, 1], [0, 1, 0, 0], [1, 0, 1, 0], [4, 4, 4, 4], [2, 2, 2, 2], [0, 0, 2, 2], [2, 2, 0, 0], [0, 0, 2, 2]], [[1, 1, 1, 0], [0, 1, 0, 1], [0, 0, 1, 1], [1, 1, 0, 1], [4, 4, 4, 4], [0, 0, 0, 2], [0, 0, 0, 2], [2, 2, 2, 2], [2, 2, 0, 2]], [[1, 1, 0, 0], [1, 0, 1, 0], [1, 1, 0, 1], [1, 1, 1, 1], [4, 4, 4, 4], [2, 2, 0, 2], [0, 0, 2, 0], [0, 2, 0, 0], [2, 0, 2, 0]], [[1, 0, 1, 0], [1, 1, 0, 1], [1, 0, 1, 1], [0, 1, 0, 1], [4, 4, 4, 4], [2, 2, 0, 0], [0, 0, 2, 0], [2, 2, 0, 0], [0, 0, 2, 0]]], "outputs": [[[3, 3, 3, 3], [0, 3, 3, 3], [3, 3, 0, 0], [3, 0, 3, 3]], [[3, 3, 3, 3], [0, 3, 0, 3], [3, 3, 3, 3], [3, 3, 0, 3]], [[3, 3, 0, 3], [3, 0, 3, 0], [3, 3, 0, 3], [3, 3, 3, 3]], [[3, 3, 3, 0], [3, 3, 3, 3], [3, 3, 3, 3], [0, 3, 3, 3]]]}, "test_io": {"inputs": [[[1, 0, 1, 0], [1, 0, 1, 0], [0, 1, 0, 0], [1, 0, 1, 0], [4, 4, 4, 4], [2, 2, 0, 0], [0, 0, 2, 0], [0, 2, 0, 2], [2, 2, 2, 0]]], "outputs": [[[3, 3, 3, 0], [3, 0, 3, 0], [0, 3, 0, 3], [3, 3, 3, 0]]]}, "solved": true, "generalizable": true, "anpl": null, "python": "import numpy as np\nfrom typing import *\nblack, blue, red, green, yellow, grey, pink, orange, teal, maroon = range(10)\n\ndef color_pixels(input_grid: np.ndarray, mindex: int, ngrid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Traverse all pixels in the inputgrid whose line number is less than mindex, if the value of the pixel is black and t\n    \"\"\"\n    for i in range(mindex):\n        for j in range(input_grid.shape[1]):\n            if input_grid[i][j] == black and input_grid[min(i + mindex + 1, input_grid.shape[0] - 1)][j] == black:\n                ngrid[i][j] = black\n            else:\n                ngrid[i][j] = green\n    return ngrid\n\ndef find_yellow_line_index(input_grid: np.ndarray) -> int:\n    \"\"\"\n    This function takes in a numpy array of shape (n,m) and returns the index of the first row that contains a yellow pixel.\n    \"\"\"\n    for i in range(input_grid.shape[0]):\n        if yellow in input_grid[i]:\n            return i\n    return -1\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    In the input, you should see a n*m grid with multiple color pixels.\n    \"\"\"\n    mindex = find_yellow_line_index(input_grid)\n    ngrid = np.zeros((input_grid.shape[0] // 2, input_grid.shape[1]))\n    ans_grid = color_pixels(input_grid, mindex, ngrid)\n    return ans_grid"}