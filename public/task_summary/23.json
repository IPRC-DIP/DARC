{"id": 23, "train_io": {"inputs": [[[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0], [0, 3, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 3, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0]]], "outputs": [[[0, 0, 2, 0, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 0, 0, 0, 0], [3, 3, 3, 3, 3, 3, 3, 3, 3], [0, 0, 2, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 2, 0, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 2, 0, 0], [3, 3, 3, 3, 3, 3, 3, 3], [0, 0, 0, 0, 0, 2, 0, 0], [0, 0, 0, 0, 0, 2, 0, 0], [3, 3, 3, 3, 3, 3, 3, 3], [0, 0, 0, 0, 0, 2, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 2, 0, 0], [0, 0, 0, 0, 0, 2, 0, 0], [0, 0, 0, 0, 0, 2, 0, 0]], [[0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0], [0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0], [0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0], [0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0]]]}, "test_io": {"inputs": [[[0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]], "outputs": [[[3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0], [0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0], [0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0], [0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0], [0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0]]]}, "solved": true, "generalizable": true, "anpl": "def main(input_grid: np.ndarray) -> np.ndarray:\n    red_loc = \"get location of all red pixels\"(input_grid)\n    green_loc = \"get location of all green pixels\"(input_grid)\n    blue_loc = \"get location of all blue pixels\"(input_grid)\n    out_grid = \"draw red vertical lines\"(input_grid, red_loc)\n    out_grid = \"draw green horizontal lines\"(out_grid, green_loc)\n    out_grid = \"draw blue horizontal lines\"(out_grid, blue_loc)\n    return out_grid", "python": "import numpy as np\nfrom typing import *\nblack, blue, red, green, yellow, grey, pink, orange, teal, maroon = range(10)\n\ndef draw_blue_horizontal_lines(input_grid: np.ndarray, blue_loc: Tuple[int, int]) -> np.ndarray:\n    \"\"\"\n    This function takes an input grid and the location of all blue pixels in the grid and draws horizontal blue lines\n    passing through each blue pixel.\n\n    Args:\n    input_grid: A numpy array representing the input grid.\n    blue_loc: A tuple containing the row and column indices of all blue pixels in the grid.\n\n    Returns:\n    A numpy array representing the output grid with horizontal blue lines passing through each blue pixel.\n    \"\"\"\n    for i in range(len(blue_loc[0])):\n        input_grid[blue_loc[0][i], :] = blue\n    return input_grid\n\ndef draw_green_horizontal_lines(input_grid: np.ndarray, green_loc: Tuple[int, int]) -> np.ndarray:\n    \"\"\"\n    This function takes an input grid and the location of all green pixels in the grid and draws horizontal green lines\n    passing through each green pixel.\n\n    Args:\n    input_grid: A numpy array representing the input grid.\n    green_loc: A tuple containing the row and column indices of all green pixels in the grid.\n\n    Returns:\n    A numpy array representing the output grid with horizontal green lines passing through each green pixel.\n    \"\"\"\n    for i in range(len(green_loc[0])):\n        input_grid[green_loc[0][i], :] = green\n    return input_grid\n\ndef draw_red_vertical_lines(input_grid: np.ndarray, red_loc: Tuple[int, int]) -> np.ndarray:\n    \"\"\"\n    This function takes an input grid and the location of all red pixels in the grid and draws vertical red lines\n    passing through each red pixel.\n\n    Args:\n    input_grid: A numpy array representing the input grid.\n    red_loc: A tuple containing the row and column indices of all red pixels in the grid.\n\n    Returns:\n    A numpy array representing the output grid with vertical red lines passing through each red pixel.\n    \"\"\"\n    for i in range(len(red_loc[0])):\n        input_grid[:, red_loc[1][i]] = red\n    return input_grid\n\ndef get_blue_pixels_location(input_grid: np.ndarray) -> Tuple[int, int]:\n    \"\"\"\n    This function takes an input grid and returns the location of all blue pixels in the grid.\n\n    Args:\n    input_grid: A numpy array representing the input grid.\n\n    Returns:\n    A tuple containing the row and column indices of all blue pixels in the grid.\n    \"\"\"\n    return np.where(input_grid == blue)\n\ndef get_green_pixels_location(input_grid: np.ndarray) -> Tuple[int, int]:\n    \"\"\"\n    This function takes an input grid and returns the location of all green pixels in the grid.\n\n    Args:\n    input_grid: A numpy array representing the input grid.\n\n    Returns:\n    A tuple containing the row and column indices of all green pixels in the grid.\n    \"\"\"\n    return np.where(input_grid == green)\n\ndef get_red_pixels_location(input_grid: np.ndarray) -> Tuple[int, int]:\n    \"\"\"\n    This function takes an input grid and returns the location of all red pixels in the grid.\n\n    Args:\n    input_grid: A numpy array representing the input grid.\n\n    Returns:\n    A tuple containing the row and column indices of all red pixels in the grid.\n    \"\"\"\n    return np.where(input_grid == red)\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    red_loc = get_red_pixels_location(input_grid)\n    green_loc = get_green_pixels_location(input_grid)\n    blue_loc = get_blue_pixels_location(input_grid)\n    out_grid = draw_red_vertical_lines(input_grid, red_loc)\n    out_grid = draw_green_horizontal_lines(out_grid, green_loc)\n    out_grid = draw_blue_horizontal_lines(out_grid, blue_loc)\n    return out_grid"}