{"id": 398, "train_io": {"inputs": [[[2, 2, 0, 0, 0], [2, 2, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0], [0, 2, 2, 0, 0], [0, 2, 2, 0, 0], [0, 0, 0, 2, 2], [0, 0, 0, 2, 2]], [[0, 0, 0, 0, 0, 0, 0], [0, 2, 2, 0, 0, 0, 0], [0, 2, 2, 0, 2, 2, 0], [0, 0, 0, 0, 2, 2, 0], [0, 0, 2, 2, 0, 0, 0], [0, 0, 2, 2, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0], [0, 2, 2, 0, 0, 0], [0, 2, 2, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 2, 2, 0, 0], [0, 0, 2, 2, 0, 0]], [[0, 0, 0], [0, 2, 2], [0, 2, 2]], [[0, 0, 0, 0, 2, 2, 0], [0, 0, 0, 0, 2, 2, 0], [0, 2, 2, 0, 0, 0, 0], [0, 2, 2, 0, 2, 2, 0], [0, 0, 0, 0, 2, 2, 0], [0, 2, 2, 0, 0, 0, 0], [0, 2, 2, 0, 0, 0, 0]], [[0, 0, 0, 0, 2, 2, 0], [0, 2, 2, 0, 2, 2, 0], [0, 2, 2, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 2], [2, 2, 0, 0, 0, 2, 2], [2, 2, 0, 2, 2, 0, 0], [0, 0, 0, 2, 2, 0, 0]], [[0, 0, 2, 2, 0, 2, 2], [0, 0, 2, 2, 0, 2, 2], [2, 2, 0, 0, 0, 0, 0], [2, 2, 0, 2, 2, 0, 0], [0, 0, 0, 2, 2, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]]], "outputs": [[[1, 0, 0], [0, 0, 0], [0, 0, 0]], [[1, 0, 1], [0, 0, 0], [0, 0, 0]], [[1, 0, 1], [0, 1, 0], [0, 0, 0]], [[1, 0, 1], [0, 0, 0], [0, 0, 0]], [[1, 0, 0], [0, 0, 0], [0, 0, 0]], [[1, 0, 1], [0, 1, 0], [1, 0, 0]], [[1, 0, 1], [0, 1, 0], [1, 0, 1]], [[1, 0, 1], [0, 1, 0], [1, 0, 0]]]}, "test_io": {"inputs": [[[0, 0, 0, 2, 2, 0], [2, 2, 0, 2, 2, 0], [2, 2, 0, 0, 0, 0], [0, 0, 2, 2, 0, 0], [0, 0, 2, 2, 0, 0], [0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0], [2, 2, 0, 2, 2, 0, 0], [2, 2, 0, 2, 2, 0, 0], [0, 0, 0, 0, 0, 2, 2], [0, 0, 2, 2, 0, 2, 2], [0, 0, 2, 2, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]], [[2, 2, 0, 2, 2, 0, 0], [2, 2, 0, 2, 2, 0, 0], [0, 0, 0, 0, 0, 2, 2], [0, 2, 2, 0, 0, 2, 2], [0, 2, 2, 0, 0, 0, 0], [0, 0, 0, 0, 2, 2, 0], [0, 0, 0, 0, 2, 2, 0]]], "outputs": [[[1, 0, 1], [0, 1, 0], [0, 0, 0]], [[1, 0, 1], [0, 1, 0], [1, 0, 0]], [[1, 0, 1], [0, 1, 0], [1, 0, 1]]]}, "solved": true, "generalizable": true, "anpl": null, "python": "import numpy as np\nfrom typing import *\nblack, blue, red, green, yellow, grey, pink, orange, teal, maroon = range(10)\n\ndef generate_blue_grid(cnt: int) -> np.ndarray:\n    \"\"\"\n    Generates a new grid with blue squares based on the count of red squares in the input grid.\n    \n    Args:\n    cnt: An integer representing the count of 2x2 red squares in the input grid.\n    \n    Returns:\n    A numpy array representing the new grid with blue squares.\n    \"\"\"\n    grid = np.full((3, 3), black)\n    if cnt == 1:\n        grid[0][0] = blue\n    elif cnt == 2:\n        grid[0][0] = blue\n        grid[0][2] = blue\n    elif cnt == 3:\n        grid[0][0] = blue\n        grid[0][2] = blue\n        grid[1][1] = blue\n    elif cnt == 4:\n        grid[0][0] = blue\n        grid[0][2] = blue\n        grid[1][1] = blue\n        grid[2][0] = blue\n    elif cnt == 5:\n        grid[0][0] = blue\n        grid[0][2] = blue\n        grid[1][1] = blue\n        grid[2][0] = blue\n        grid[2][2] = blue\n    return grid\n\ndef count_red_squares(input_grid: np.ndarray) -> int:\n    \"\"\"\n    Counts how many 2x2 red squares there are in the input grid.\n    \n    Args:\n    input_grid: A numpy array representing the input grid.\n    \n    Returns:\n    An integer representing the number of 2x2 red squares in the input grid.\n    \"\"\"\n    cnt = 0\n    for i in range(input_grid.shape[0] - 1):\n        for j in range(input_grid.shape[1] - 1):\n            if input_grid[i][j] == red and input_grid[i + 1][j] == red and (input_grid[i][j + 1] == red) and (input_grid[i + 1][j + 1] == red):\n                cnt += 1\n    return cnt\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    In the input, you should see a n*n grid with multiple color pixels.\n    \"\"\"\n    cnt = count_red_squares(input_grid)\n    ans_grid = generate_blue_grid(cnt)\n    return ans_grid"}