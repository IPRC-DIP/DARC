{"id": 372, "train_io": {"inputs": [[[3, 3, 3, 3, 3, 3], [9, 9, 9, 9, 9, 9]], [[4, 4, 4, 4, 4, 4], [8, 8, 8, 8, 8, 8]]], "outputs": [[[3, 9, 3, 9, 3, 9], [9, 3, 9, 3, 9, 3]], [[4, 8, 4, 8, 4, 8], [8, 4, 8, 4, 8, 4]]]}, "test_io": {"inputs": [[[6, 6, 6, 6, 6, 6], [2, 2, 2, 2, 2, 2]]], "outputs": [[[6, 2, 6, 2, 6, 2], [2, 6, 2, 6, 2, 6]]]}, "solved": true, "generalizable": true, "anpl": null, "python": "import numpy as np\nfrom typing import *\nblack, blue, red, green, yellow, grey, pink, orange, teal, maroon = range(10)\n\ndef swap_top_bottom_pixels_in_odd_columns(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Swap the colors of the top and bottom pixels in every odd column (column number starting from 0).\n    \n    Args:\n    input_grid: 2D numpy array representing the input grid\n    \n    Returns:\n    2D numpy array representing the output grid with colors of top and bottom pixels swapped in odd columns\n    \"\"\"\n    output_grid = np.copy(input_grid)\n    rows, cols = input_grid.shape\n    for c in range(1, cols, 2):\n        for r in range(rows - 1):\n            output_grid[r][c], output_grid[r + 1][c] = (output_grid[r + 1][c], output_grid[r][c])\n    return output_grid\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    output_grid = swap_top_bottom_pixels_in_odd_columns(input_grid)\n    return output_grid"}