{"id": 270, "train_io": {"inputs": [[[8, 8, 8, 0, 0, 0, 0, 0, 0], [1, 8, 8, 0, 8, 1, 8, 0, 0], [8, 8, 8, 0, 1, 1, 8, 0, 0], [0, 0, 0, 0, 8, 8, 8, 0, 0], [0, 8, 8, 1, 0, 0, 0, 0, 0], [0, 8, 8, 8, 0, 0, 8, 1, 8], [0, 8, 1, 8, 0, 0, 1, 8, 1], [0, 0, 0, 0, 0, 0, 1, 8, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0]], [[0, 8, 8, 1, 0, 0, 0, 0, 0], [0, 8, 1, 8, 0, 8, 1, 8, 0], [0, 8, 8, 8, 0, 1, 8, 8, 0], [0, 0, 0, 0, 0, 8, 8, 1, 0], [0, 0, 8, 1, 8, 0, 0, 0, 0], [0, 0, 1, 1, 8, 0, 0, 0, 0], [0, 0, 8, 8, 1, 0, 8, 8, 8], [0, 0, 0, 0, 0, 0, 8, 8, 8], [0, 0, 0, 0, 0, 0, 1, 8, 8]], [[0, 0, 0, 0, 8, 8, 8, 0, 0], [8, 8, 8, 0, 8, 8, 8, 0, 0], [8, 8, 8, 0, 1, 8, 8, 0, 0], [8, 8, 8, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 8, 1, 8], [8, 1, 8, 0, 0, 0, 1, 1, 8], [8, 8, 1, 0, 0, 0, 1, 8, 1], [1, 8, 8, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 1, 1, 8, 0, 0, 0, 0], [0, 0, 8, 8, 1, 0, 8, 1, 1], [0, 0, 1, 1, 8, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 8, 1, 8], [8, 8, 8, 0, 0, 0, 0, 0, 0], [8, 8, 1, 0, 8, 1, 8, 0, 0], [1, 8, 8, 0, 1, 8, 8, 0, 0], [0, 0, 0, 0, 8, 8, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]]], "outputs": [[[8, 1, 8], [1, 8, 1], [1, 8, 1]], [[8, 1, 8], [1, 1, 8], [8, 8, 1]], [[8, 1, 8], [1, 1, 8], [1, 8, 1]], [[8, 1, 1], [1, 1, 1], [8, 1, 8]]]}, "test_io": {"inputs": [[[8, 8, 8, 0, 0, 0, 8, 1, 8], [8, 8, 8, 0, 0, 0, 1, 8, 1], [1, 8, 8, 0, 0, 0, 8, 1, 8], [0, 0, 0, 8, 1, 8, 0, 0, 0], [0, 0, 0, 8, 8, 1, 0, 0, 0], [0, 0, 0, 1, 8, 8, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1, 8], [0, 0, 0, 0, 0, 0, 8, 1, 1], [0, 0, 0, 0, 0, 0, 1, 1, 8]]], "outputs": [[[1, 1, 8], [8, 1, 1], [1, 1, 8]]]}, "solved": true, "generalizable": true, "anpl": "def find_3x3_pixels(input_grid: np.ndarray, loc: Tuple[int, int]) -> np.ndarray:\n    return input_grid[loc[0] - 1:loc[0] + 2, loc[1] - 1:loc[1] + 2]\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    locs = \"find all 3*3 pixels which is not in black and get the location\"(input_grid)\n    n = \"count how many pixels are in blue in each 3*3 grid, and get all the numbers\"(input_grid, locs)\n    loc = \"find which 3*3 pixels has the most blue pixels\"(input_grid, locs, n)\n    out_grid = find_3x3_pixels(input_grid, loc)\n    return out_grid", "python": "import numpy as np\nfrom typing import *\nblack, blue, red, green, yellow, grey, pink, orange, teal, maroon = range(10)\n\ndef find_3x3_pixels(input_grid: np.ndarray, loc: Tuple[int, int]) -> np.ndarray:\n    return input_grid[loc[0] - 1:loc[0] + 2, loc[1] - 1:loc[1] + 2]\n\ndef find_most_blue_pixels(input_grid: np.ndarray, locs: List[Tuple[int, int]], blue_counts: List[int]) -> Tuple[int, int]:\n    max_count = -1\n    max_loc = None\n    for i, loc in enumerate(locs):\n        if blue_counts[i] > max_count:\n            max_count = blue_counts[i]\n            max_loc = loc\n    return max_loc\n\ndef count_blue_pixels(input_grid: np.ndarray, locs: List[Tuple[int, int]]) -> List[int]:\n    blue_counts = []\n    for loc in locs:\n        i, j = loc\n        blue_counts.append(np.sum(input_grid[i - 1:i + 2, j - 1:j + 2] == blue))\n    return blue_counts\n\ndef find_non_black_3x3_pixels(input_grid: np.ndarray) -> List[Tuple[int, int]]:\n    locs = []\n    for i in range(input_grid.shape[0] - 2):\n        for j in range(input_grid.shape[1] - 2):\n            if np.all(input_grid[i:i + 3, j:j + 3] != black):\n                locs.append((i + 1, j + 1))\n    return locs\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    locs = find_non_black_3x3_pixels(input_grid)\n    n = count_blue_pixels(input_grid, locs)\n    loc = find_most_blue_pixels(input_grid, locs, n)\n    out_grid = find_3x3_pixels(input_grid, loc)\n    return out_grid"}