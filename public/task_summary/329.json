{"id": 329, "train_io": {"inputs": [[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 5, 5, 5, 0, 0, 0, 0, 0], [0, 0, 5, 5, 5, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 5, 5, 0, 0], [0, 0, 0, 0, 0, 5, 5, 5, 0, 0], [0, 5, 5, 0, 0, 0, 5, 0, 0, 0], [0, 5, 5, 5, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0, 5, 0], [0, 5, 5, 0, 0, 0, 5, 5, 5, 0], [5, 5, 5, 5, 0, 0, 0, 0, 5, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 5, 5, 5, 5, 0, 0, 5, 0], [0, 0, 0, 0, 0, 0, 0, 0, 5, 0], [0, 0, 0, 0, 0, 5, 5, 0, 0, 0], [0, 5, 5, 0, 0, 5, 5, 0, 0, 0], [0, 5, 5, 0, 0, 5, 5, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], [[5, 5, 5, 0, 0, 0, 0, 5, 5, 5], [0, 5, 5, 0, 5, 5, 0, 5, 0, 0], [0, 0, 5, 0, 5, 5, 0, 5, 0, 0], [0, 0, 5, 0, 0, 0, 0, 5, 0, 0], [0, 0, 0, 0, 5, 5, 0, 0, 0, 5], [0, 5, 5, 0, 0, 5, 5, 0, 0, 5], [0, 0, 0, 0, 0, 5, 5, 0, 0, 5], [0, 0, 5, 0, 0, 0, 0, 0, 0, 0], [0, 5, 5, 5, 5, 0, 0, 0, 0, 0], [0, 0, 5, 5, 0, 0, 0, 0, 0, 0]]], "outputs": [[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 2, 2, 0, 0, 0, 0, 0], [0, 0, 2, 2, 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 2, 2, 0, 0], [0, 0, 0, 0, 0, 2, 2, 2, 0, 0], [0, 1, 1, 0, 0, 0, 2, 0, 0, 0], [0, 1, 1, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [0, 2, 2, 0, 0, 0, 1, 1, 1, 0], [2, 2, 2, 2, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 1, 1, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 2, 2, 0, 0, 0], [0, 1, 1, 0, 0, 2, 2, 0, 0, 0], [0, 1, 1, 0, 0, 2, 2, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], [[1, 1, 1, 0, 0, 0, 0, 2, 2, 2], [0, 1, 1, 0, 1, 1, 0, 2, 0, 0], [0, 0, 1, 0, 1, 1, 0, 2, 0, 0], [0, 0, 1, 0, 0, 0, 0, 2, 0, 0], [0, 0, 0, 0, 2, 2, 0, 0, 0, 1], [0, 1, 1, 0, 0, 2, 2, 0, 0, 1], [0, 0, 0, 0, 0, 2, 2, 0, 0, 1], [0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 1, 0, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 0]]]}, "test_io": {"inputs": [[[0, 5, 5, 0, 0, 0, 5, 5, 0, 0], [0, 5, 5, 0, 0, 0, 5, 5, 0, 0], [5, 5, 5, 5, 0, 5, 5, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 5, 5, 0, 0, 0, 0, 5, 0, 0], [0, 5, 5, 5, 5, 0, 0, 5, 0, 0], [0, 0, 0, 0, 0, 0, 0, 5, 0, 0], [0, 0, 0, 0, 0, 0, 0, 5, 0, 0], [0, 5, 5, 5, 5, 5, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]], "outputs": [[[0, 1, 1, 0, 0, 0, 2, 2, 0, 0], [0, 1, 1, 0, 0, 0, 2, 2, 0, 0], [1, 1, 1, 1, 0, 2, 2, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 2, 0, 0, 0, 0, 1, 0, 0], [0, 2, 2, 2, 2, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 1, 1, 1, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]]}, "solved": true, "generalizable": true, "anpl": null, "python": "import numpy as np\nfrom typing import *\nblack, blue, red, green, yellow, grey, pink, orange, teal, maroon = range(10)\n\ndef dfs(grid: np.ndarray, visited: np.ndarray, i: int, j: int) -> np.ndarray:\n    \"\"\"\n    This function performs depth-first search to find all the grey pixels in a grey shape.\n    \"\"\"\n    if i < 0 or i >= grid.shape[0] or j < 0 or (j >= grid.shape[1]) or (visited[i][j] == 1) or (grid[i][j] != grey):\n        return np.zeros_like(grid)\n    visited[i][j] = 1\n    shape = np.zeros_like(grid)\n    shape[i][j] = 1\n    shape += dfs(grid, visited, i + 1, j)\n    shape += dfs(grid, visited, i - 1, j)\n    shape += dfs(grid, visited, i, j + 1)\n    shape += dfs(grid, visited, i, j - 1)\n    return shape\n\ndef color_grey_shape(grid: np.ndarray, grey_shape: np.ndarray, color: int) -> np.ndarray:\n    \"\"\"\n    This function takes a grid, a grey shape, and a color, and colors the pixels of the grid to give color where its value equals 1 in grey shape.\n    \"\"\"\n    grid[grey_shape == 1] = color\n    return grid\n\ndef count_pixels(gs: np.ndarray) -> int:\n    \"\"\"                                                                                                                                                                 \n    This function takes a grey shape and returns the number of grey pixels in it.                                                                                       \n    \"\"\"\n    return np.sum(gs)\n\ndef find_grey_shapes(grid: np.ndarray) -> List[np.ndarray]:\n    \"\"\"\n    This function takes an input grid and returns a list of the indices of the grey shapes, each grey shape contains some grey pixels.\n    \"\"\"\n    grey_shapes = []\n    visited = np.zeros_like(grid)\n    for i in range(grid.shape[0]):\n        for j in range(grid.shape[1]):\n            if grid[i][j] == grey and visited[i][j] == 0:\n                grey_shape = dfs(grid, visited, i, j)\n                grey_shapes.append(grey_shape)\n    return grey_shapes\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"                                                                                                                                                                 \n    In the input, you should see a black grid, it has some grey shapes.\n    the output grid is the same size as the input grid.\n    To make the output, you should color the grey shapes to red that has six grey pixels, and color the grey shapes to blue that do not have six grep pixels.\n    \"\"\"\n    output_grid = input_grid.copy()\n    grey_shapes = find_grey_shapes(input_grid)\n    for gs in grey_shapes:\n        if count_pixels(gs) == 6:\n            output_grid = color_grey_shape(output_grid, gs, red)\n        else:\n            output_grid = color_grey_shape(output_grid, gs, blue)\n    return output_grid"}