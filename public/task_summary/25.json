{"id": 25, "train_io": {"inputs": [[[0, 9, 9, 1, 9, 9, 9], [0, 0, 9, 1, 9, 9, 0], [9, 0, 9, 1, 9, 9, 0], [0, 0, 0, 1, 9, 0, 0], [0, 9, 9, 1, 9, 9, 9]], [[0, 0, 0, 1, 9, 0, 0], [9, 0, 9, 1, 9, 9, 9], [0, 9, 9, 1, 9, 9, 9], [0, 0, 0, 1, 9, 9, 9], [0, 9, 9, 1, 9, 9, 9]], [[9, 0, 0, 1, 9, 0, 9], [9, 0, 0, 1, 0, 9, 0], [9, 0, 0, 1, 9, 0, 0], [0, 9, 9, 1, 0, 9, 9], [0, 0, 9, 1, 0, 9, 0]], [[0, 9, 9, 1, 9, 0, 9], [9, 0, 0, 1, 9, 0, 0], [9, 9, 9, 1, 9, 9, 9], [0, 9, 0, 1, 0, 0, 0], [9, 0, 0, 1, 9, 0, 0]], [[0, 9, 9, 1, 9, 0, 9], [9, 0, 9, 1, 9, 9, 9], [9, 9, 9, 1, 0, 0, 9], [9, 0, 0, 1, 9, 0, 0], [9, 9, 9, 1, 0, 0, 9]]], "outputs": [[[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 8, 8], [0, 0, 0]], [[0, 8, 8], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 8, 0], [0, 0, 8], [0, 8, 8], [8, 0, 0], [8, 0, 0]], [[0, 0, 0], [0, 8, 8], [0, 0, 0], [8, 0, 8], [0, 8, 8]], [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 8, 8], [0, 0, 0]]]}, "test_io": {"inputs": [[[9, 9, 0, 1, 0, 9, 0], [0, 9, 9, 1, 0, 0, 0], [9, 9, 0, 1, 0, 9, 0], [9, 9, 9, 1, 9, 0, 9], [0, 9, 9, 1, 0, 9, 9]]], "outputs": [[[0, 0, 8], [8, 0, 0], [0, 0, 8], [0, 0, 0], [8, 0, 0]]]}, "solved": true, "generalizable": true, "anpl": "def main(input_grid: np.ndarray) -> np.ndarray:\n    region1 = input_grid[:, :3]\n    region2 = input_grid[:, -3:]\n    output_grid = np.zeros((5, 3), dtype=int)\n    black_pixels = \"get the black pixels' indice if region1[i, j] and region2[i, j] are both black\"(region1, region2)\n    pos = black_pixels\n    output_grid = \"change the pos to teal\"(output_grid, pos)\n    return output_grid", "python": "import numpy as np\nfrom typing import *\nblack, blue, red, green, yellow, grey, pink, orange, teal, maroon = range(10)\n\ndef change_pos_to_teal(grid: np.ndarray, pos: List[Tuple[int, int]]) -> np.ndarray:\n    for i, j in pos:\n        grid[i, j] = teal\n    return grid\n\ndef get_black_pixels_indices(region1: np.ndarray, region2: np.ndarray) -> List[Tuple[int, int]]:\n    black_pixels = []\n    for i in range(region1.shape[0]):\n        for j in range(region1.shape[1]):\n            if region1[i, j] == black and region2[i, j] == black:\n                black_pixels.append((i, j))\n    return black_pixels\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    region1 = input_grid[:, :3]\n    region2 = input_grid[:, -3:]\n    output_grid = np.zeros((5, 3), dtype=int)\n    black_pixels = get_black_pixels_indices(region1, region2)\n    pos = black_pixels\n    output_grid = change_pos_to_teal(output_grid, pos)\n    return output_grid"}