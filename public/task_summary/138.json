{"id": 138, "train_io": {"inputs": [[[0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 4, 4, 0, 0, 0, 0, 0, 0], [4, 0, 4, 0, 0, 0, 0, 0, 0], [0, 0, 4, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 4, 4, 0, 0], [0, 0, 0, 0, 0, 0, 4, 4, 0], [0, 0, 0, 0, 0, 4, 0, 4, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 4, 4, 0, 0, 0, 0, 0, 0], [0, 4, 4, 0, 0, 0, 0, 0, 0], [4, 4, 4, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 4, 4, 4, 0], [0, 0, 0, 0, 0, 0, 4, 0, 0], [0, 0, 0, 0, 0, 0, 4, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]]], "outputs": [[[0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 4, 4, 0, 0, 0, 0, 0, 0], [4, 7, 4, 0, 0, 0, 0, 0, 0], [7, 7, 4, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 4, 4, 7, 0], [0, 0, 0, 0, 0, 7, 4, 4, 0], [0, 0, 0, 0, 0, 4, 7, 4, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 4, 4, 0, 0, 0, 0, 0, 0], [7, 4, 4, 0, 0, 0, 0, 0, 0], [4, 4, 4, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 4, 4, 4, 0], [0, 0, 0, 0, 0, 7, 4, 7, 0], [0, 0, 0, 0, 0, 7, 4, 7, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]]]}, "test_io": {"inputs": [[[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 4, 0, 0, 0, 0], [0, 0, 4, 4, 0, 0, 0, 0, 0], [0, 0, 4, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 4, 0, 0, 0], [0, 0, 0, 0, 0, 4, 4, 4, 0], [0, 0, 0, 0, 0, 0, 4, 0, 0]]], "outputs": [[[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 7, 7, 4, 0, 0, 0, 0], [0, 0, 4, 4, 7, 0, 0, 0, 0], [0, 0, 4, 7, 7, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 4, 7, 7, 0], [0, 0, 0, 0, 0, 4, 4, 4, 0], [0, 0, 0, 0, 0, 7, 4, 7, 0]]]}, "solved": true, "generalizable": true, "anpl": "def main(input_grid: np.ndarray) -> np.ndarray:\n    output_grid = input_grid\n    while \"the number of black pixels in the grid is more than 63\"(output_grid):\n        locs = \"find all black pixels which have at least two neighbour pixels on its up or down or left or right which are not black\"(output_grid)\n        output_grid = \"change pixels to orange\"(output_grid, locs)\n    return output_grid", "python": "import numpy as np\nfrom typing import *\nblack, blue, red, green, yellow, grey, pink, orange, teal, maroon = range(10)\n\ndef change_pixels_to_orange(grid: np.ndarray, locs: List[Tuple[int, int]]) -> np.ndarray:\n    for loc in locs:\n        grid[loc] = orange\n    return grid\n\ndef find_black_pixels_with_two_non_black_neighbours(grid: np.ndarray) -> List[Tuple[int, int]]:\n    black_pixels = np.where(grid == black)\n    locs = []\n    for i in range(len(black_pixels[0])):\n        row, col = (black_pixels[0][i], black_pixels[1][i])\n        neighbours = [(row - 1, col), (row + 1, col), (row, col - 1), (row, col + 1)]\n        non_black_neighbours = [n for n in neighbours if 0 <= n[0] < grid.shape[0] and 0 <= n[1] < grid.shape[1] and (grid[n] != black)]\n        if len(non_black_neighbours) >= 2:\n            locs.append((row, col))\n    return locs\n\ndef has_more_than_63_black_pixels(grid: np.ndarray) -> bool:\n    return np.count_nonzero(grid == black) > 63\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    output_grid = input_grid\n    while has_more_than_63_black_pixels(output_grid):\n        locs = find_black_pixels_with_two_non_black_neighbours(output_grid)\n        output_grid = change_pixels_to_orange(output_grid, locs)\n    return output_grid"}