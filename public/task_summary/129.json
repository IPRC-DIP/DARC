{"id": 129, "train_io": {"inputs": [[[3, 3, 3, 0, 0, 0, 8, 8, 8], [3, 3, 3, 0, 0, 0, 8, 5, 8], [3, 3, 3, 0, 0, 0, 8, 8, 8], [0, 0, 0, 7, 5, 7, 0, 0, 0], [0, 0, 0, 7, 7, 7, 0, 0, 0], [0, 0, 0, 7, 7, 7, 0, 0, 0], [6, 6, 6, 0, 0, 5, 9, 9, 9], [6, 6, 6, 0, 0, 0, 9, 9, 9], [6, 5, 6, 0, 5, 0, 9, 9, 5]], [[0, 0, 0, 2, 2, 2, 0, 0, 0], [0, 5, 0, 2, 2, 2, 0, 0, 0], [0, 0, 0, 2, 2, 2, 0, 0, 0], [5, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 5, 0, 0, 0, 5, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 5, 0, 7, 7, 7, 0, 0, 0], [0, 0, 0, 7, 7, 5, 0, 0, 0], [0, 0, 0, 7, 7, 7, 0, 0, 0]]], "outputs": [[[3, 0, 8], [0, 7, 0], [6, 0, 9]], [[0, 2, 0], [0, 0, 0], [0, 7, 0]]]}, "test_io": {"inputs": [[[4, 4, 4, 0, 0, 0, 0, 5, 0], [5, 4, 4, 0, 0, 0, 0, 0, 0], [4, 4, 4, 0, 5, 0, 0, 0, 0], [0, 0, 0, 3, 3, 3, 0, 5, 0], [0, 0, 0, 3, 3, 3, 0, 0, 0], [0, 0, 0, 3, 3, 3, 0, 0, 0], [0, 0, 5, 9, 9, 9, 0, 0, 0], [0, 0, 0, 9, 5, 9, 0, 0, 0], [0, 0, 0, 9, 9, 9, 0, 0, 0]]], "outputs": [[[4, 0, 0], [0, 3, 0], [0, 9, 0]]]}, "solved": true, "generalizable": true, "anpl": "def main(input_grid: np.ndarray) -> np.ndarray:\n    output_grid = [[0] * 3 for _ in range(3)]\n    for i in range(3):\n        for j in range(3):\n            output_grid[i][j] = \"The highest frequency number\"(input_grid[3 * i:3 * i + 3, 3 * j:3 * j + 3])\n    return output_grid", "python": "import numpy as np\nfrom typing import *\nblack, blue, red, green, yellow, grey, pink, orange, teal, maroon = range(10)\n\ndef highest_frequency_number(grid: np.ndarray) -> int:\n    \"\"\"\n    Given a 3x3 grid of integers, returns the integer that appears most frequently in the grid.\n    \n    Args:\n    grid: A 3x3 numpy array of integers\n    \n    Returns:\n    The integer that appears most frequently in the grid.\n    \"\"\"\n    flat_grid = grid.flatten()\n    unique, counts = np.unique(flat_grid, return_counts=True)\n    return unique[np.argmax(counts)]\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    output_grid = [[0] * 3 for _ in range(3)]\n    for i in range(3):\n        for j in range(3):\n            output_grid[i][j] = highest_frequency_number(input_grid[3 * i:3 * i + 3, 3 * j:3 * j + 3])\n    return output_grid"}