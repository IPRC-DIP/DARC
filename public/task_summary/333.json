{"id": 333, "train_io": {"inputs": [[[2, 0, 0, 0, 0], [0, 2, 0, 0, 2], [2, 0, 0, 2, 0], [0, 0, 0, 2, 2], [0, 0, 2, 2, 0]], [[0, 0, 0, 0, 0], [0, 0, 1, 1, 1], [0, 1, 0, 1, 1], [0, 1, 0, 1, 0], [0, 0, 0, 0, 1]], [[3, 0, 0, 0, 0], [0, 0, 0, 3, 3], [0, 3, 3, 0, 0], [0, 3, 0, 3, 0], [3, 0, 3, 3, 0]], [[1, 0, 1, 0, 0], [1, 0, 0, 1, 1], [1, 1, 0, 1, 0], [0, 1, 0, 1, 0], [1, 0, 0, 0, 1]], [[2, 0, 2, 0, 2], [2, 0, 0, 0, 2], [2, 2, 0, 0, 0], [2, 0, 0, 2, 2], [2, 2, 2, 0, 2]], [[0, 2, 0, 2, 0], [0, 2, 2, 2, 0], [0, 2, 2, 0, 2], [2, 2, 2, 0, 0], [0, 0, 2, 0, 2]], [[0, 3, 0, 3, 0], [3, 3, 0, 0, 0], [0, 3, 0, 0, 0], [0, 0, 3, 0, 0], [3, 3, 3, 0, 0]]], "outputs": [[[5, 5, 5], [0, 5, 0], [0, 5, 0]], [[0, 5, 0], [5, 5, 5], [0, 5, 0]], [[0, 0, 5], [0, 0, 5], [5, 5, 5]], [[0, 5, 0], [5, 5, 5], [0, 5, 0]], [[5, 5, 5], [0, 5, 0], [0, 5, 0]], [[5, 5, 5], [0, 5, 0], [0, 5, 0]], [[0, 0, 5], [0, 0, 5], [5, 5, 5]]]}, "test_io": {"inputs": [[[1, 1, 1, 1, 0], [0, 0, 1, 0, 1], [0, 1, 0, 0, 0], [0, 1, 0, 0, 1], [0, 0, 1, 0, 0]], [[0, 3, 0, 3, 3], [0, 0, 3, 0, 0], [3, 0, 0, 0, 0], [0, 0, 3, 0, 3], [0, 0, 0, 0, 3]]], "outputs": [[[0, 5, 0], [5, 5, 5], [0, 5, 0]], [[0, 0, 5], [0, 0, 5], [5, 5, 5]]]}, "solved": true, "generalizable": true, "anpl": null, "python": "import numpy as np\nfrom typing import *\nblack, blue, red, green, yellow, grey, pink, orange, teal, maroon = range(10)\n\ndef get_color_array(color: int) -> np.ndarray:\n    if color == blue:\n        return np.array([[0, 5, 0], [5, 5, 5], [0, 5, 0]])\n    elif color == red:\n        return np.array([[5, 5, 5], [0, 5, 0], [0, 5, 0]])\n    elif color == green:\n        return np.array([[0, 0, 5], [0, 0, 5], [5, 5, 5]])\n    else:\n        return np.zeros((3, 3), dtype=int)\n\ndef find_first_color(input_grid: np.ndarray) -> int:\n    for i in range(input_grid.shape[0]):\n        for j in range(input_grid.shape[1]):\n            if input_grid[i][j] != black:\n                return input_grid[i][j]\n    return black\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    c = find_first_color(input_grid)\n    output_grid = get_color_array(c)\n    return output_grid"}