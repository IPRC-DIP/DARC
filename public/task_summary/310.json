{"id": 310, "train_io": {"inputs": [[[0, 7, 0], [0, 0, 7], [0, 7, 7]], [[0, 0, 0], [0, 7, 7], [0, 0, 0]], [[0, 0, 0], [7, 0, 0], [0, 0, 0]]], "outputs": [[[0, 7, 0, 0, 7, 0], [0, 0, 7, 7, 0, 0], [0, 7, 7, 7, 7, 0]], [[0, 0, 0, 0, 0, 0], [0, 7, 7, 7, 7, 0], [0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0], [7, 0, 0, 0, 0, 7], [0, 0, 0, 0, 0, 0]]]}, "test_io": {"inputs": [[[7, 7, 0], [0, 7, 0], [0, 0, 7]]], "outputs": [[[7, 7, 0, 0, 7, 7], [0, 7, 0, 0, 7, 0], [0, 0, 7, 7, 0, 0]]]}, "solved": true, "generalizable": true, "anpl": null, "python": "import numpy as np\nfrom typing import *\nblack, blue, red, green, yellow, grey, pink, orange, teal, maroon = range(10)\n\ndef symmetrical_right_edge_axis(grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Given a 3x3 grid, this function returns a 3x6 grid after being symmetrical along the right edge axis.\n\n    Args:\n    grid: A 3x3 numpy array.\n\n    Returns:\n    A 3x6 numpy array after being symmetrical along the right edge axis.\n    \"\"\"\n    output_grid = np.concatenate((grid, np.fliplr(grid)), axis=1)\n    return output_grid\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    output_grid = symmetrical_right_edge_axis(input_grid)\n    return output_grid"}