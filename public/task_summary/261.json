{"id": 261, "train_io": {"inputs": [[[0, 0, 5], [0, 5, 0], [5, 0, 0]], [[0, 0, 5], [0, 0, 5], [0, 0, 5]], [[5, 0, 0], [0, 5, 0], [5, 0, 0]], [[0, 5, 0], [0, 0, 5], [0, 5, 0]]], "outputs": [[[3, 3, 3], [4, 4, 4], [2, 2, 2]], [[3, 3, 3], [3, 3, 3], [3, 3, 3]], [[2, 2, 2], [4, 4, 4], [2, 2, 2]], [[4, 4, 4], [3, 3, 3], [4, 4, 4]]]}, "test_io": {"inputs": [[[0, 0, 5], [5, 0, 0], [0, 5, 0]]], "outputs": [[[3, 3, 3], [2, 2, 2], [4, 4, 4]]]}, "solved": true, "generalizable": true, "anpl": "def main(input_grid: np.ndarray) -> np.ndarray:\n    output_grid = \"the same size as input_grid\"(input_grid)\n    tmp = \"column number of the non-black pixel of each row\"(input_grid)\n    for i in range(3):\n        color = \"if input is 0 return red, if input is 1 return yellow, if input is 2, return green\"(tmp[i])\n        output_grid = \"fill the ith row with color\"(i, color, output_grid)\n    return output_grid", "python": "import numpy as np\nfrom typing import *\nblack, blue, red, green, yellow, grey, pink, orange, teal, maroon = range(10)\n\ndef fill_row_with_color(i: int, color: int, output_grid: np.ndarray) -> np.ndarray:\n    output_grid[i] = color\n    return output_grid\n\ndef get_color(input_value: int) -> int:\n    if input_value == 0:\n        return red\n    elif input_value == 1:\n        return yellow\n    elif input_value == 2:\n        return green\n    else:\n        return black\n\ndef get_non_black_pixel_column(input_grid: np.ndarray) -> List[int]:\n    non_black_pixel_column = []\n    for row in input_grid:\n        non_black_pixel_column.append(np.where(row != black)[0][0])\n    return non_black_pixel_column\n\ndef create_output_grid(input_grid: np.ndarray) -> np.ndarray:\n    return np.zeros_like(input_grid)\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    output_grid = create_output_grid(input_grid)\n    tmp = get_non_black_pixel_column(input_grid)\n    for i in range(3):\n        color = get_color(tmp[i])\n        output_grid = fill_row_with_color(i, color, output_grid)\n    return output_grid"}