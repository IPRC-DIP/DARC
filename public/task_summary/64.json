{"id": 64, "train_io": {"inputs": [[[8, 8, 3, 8, 8], [8, 8, 3, 8, 8], [3, 3, 3, 3, 3], [8, 8, 3, 8, 8], [4, 8, 3, 8, 8]], [[4, 4, 4, 2, 4, 4, 4], [4, 4, 4, 2, 4, 1, 4], [4, 4, 4, 2, 4, 4, 4], [2, 2, 2, 2, 2, 2, 2], [4, 4, 4, 2, 4, 4, 4], [4, 4, 4, 2, 4, 4, 4], [4, 4, 4, 2, 4, 4, 4]], [[3, 3, 3, 3, 3, 1, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 1, 3, 3, 3, 3, 3], [3, 8, 3, 3, 3, 1, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 1, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 1, 3, 3, 3, 3, 3], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 3, 3, 3, 3, 1, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 1, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 1, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 1, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 1, 3, 3, 3, 3, 3]]], "outputs": [[[8, 8], [4, 8]], [[4, 4, 4], [4, 1, 4], [4, 4, 4]], [[3, 3, 3, 3, 3], [3, 3, 3, 3, 3], [3, 8, 3, 3, 3], [3, 3, 3, 3, 3], [3, 3, 3, 3, 3]]]}, "test_io": {"inputs": [[[1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 0, 1, 2, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1]]], "outputs": [[[1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1], [1, 2, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1]]]}, "solved": true, "generalizable": true, "anpl": "def main(input):\n    inputs = \"Change the input into four new arrays based on the central dividing line in the x and y directions. the outputs do not contains the central dividing line\"(input)\n    output = \"Find an array that doesn't have just one color\"(inputs)\n    return output", "python": "import numpy as np\nfrom typing import *\nblack, blue, red, green, yellow, grey, pink, orange, teal, maroon = range(10)\n\ndef find_non_monochrome_array(inputs: Tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]) -> np.ndarray:\n    for arr in inputs:\n        if len(np.unique(arr)) > 1:\n            return arr\n    return None\n\ndef split_input(input: np.ndarray) -> Tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]:\n    center_x = input.shape[0] // 2\n    center_y = input.shape[1] // 2\n    top_left = input[:center_x, :center_y]\n    top_right = input[:center_x, center_y + 1:]\n    bottom_left = input[center_x + 1:, :center_y]\n    bottom_right = input[center_x + 1:, center_y + 1:]\n    return (top_left, top_right, bottom_left, bottom_right)\n\ndef main(input):\n    inputs = split_input(input)\n    output = find_non_monochrome_array(inputs)\n    return output"}