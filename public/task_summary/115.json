{"id": 115, "train_io": {"inputs": [[[9, 9, 5, 9], [5, 5, 9, 9], [9, 5, 9, 9]], [[4, 1, 1, 4], [1, 1, 1, 1], [4, 4, 4, 1]], [[9, 4, 9, 4], [9, 9, 4, 4], [4, 4, 4, 4]], [[3, 3, 5, 5], [3, 5, 5, 3], [5, 5, 3, 3]]], "outputs": [[[9, 5, 9, 9], [5, 5, 9, 9], [9, 9, 5, 9], [9, 9, 5, 9], [5, 5, 9, 9], [9, 5, 9, 9]], [[4, 4, 4, 1], [1, 1, 1, 1], [4, 1, 1, 4], [4, 1, 1, 4], [1, 1, 1, 1], [4, 4, 4, 1]], [[4, 4, 4, 4], [9, 9, 4, 4], [9, 4, 9, 4], [9, 4, 9, 4], [9, 9, 4, 4], [4, 4, 4, 4]], [[5, 5, 3, 3], [3, 5, 5, 3], [3, 3, 5, 5], [3, 3, 5, 5], [3, 5, 5, 3], [5, 5, 3, 3]]]}, "test_io": {"inputs": [[[4, 4, 9, 9], [4, 4, 4, 4], [4, 4, 9, 9]]], "outputs": [[[4, 4, 9, 9], [4, 4, 4, 4], [4, 4, 9, 9], [4, 4, 9, 9], [4, 4, 4, 4], [4, 4, 9, 9]]]}, "solved": true, "generalizable": true, "anpl": "def main(input_grid: np.ndarray) -> np.ndarray:\n    flip_grid = \"flip the input up and down\"(input_grid)\n    output = \"get combination array by flip_grid on the top and input_gird on the bottom\"(flip_grid, input_grid)\n    return output", "python": "import numpy as np\nfrom typing import *\nblack, blue, red, green, yellow, grey, pink, orange, teal, maroon = range(10)\n\ndef get_combination_array(flip_grid: np.ndarray, input_grid: np.ndarray) -> np.ndarray:\n    return np.concatenate((flip_grid, input_grid), axis=0)\n\ndef flip_up_down(input_grid: np.ndarray) -> np.ndarray:\n    return np.flipud(input_grid)\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    flip_grid = flip_up_down(input_grid)\n    output = get_combination_array(flip_grid, input_grid)\n    return output"}