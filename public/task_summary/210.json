{"id": 210, "train_io": {"inputs": [[[0, 8], [0, 0], [0, 8]], [[2, 0], [2, 2], [2, 0]], [[0, 0], [0, 5], [5, 0]]], "outputs": [[[8, 0, 0, 8], [0, 0, 0, 0], [8, 0, 0, 8], [8, 0, 0, 8], [0, 0, 0, 0], [8, 0, 0, 8], [8, 0, 0, 8], [0, 0, 0, 0], [8, 0, 0, 8]], [[0, 2, 2, 0], [2, 2, 2, 2], [0, 2, 2, 0], [0, 2, 2, 0], [2, 2, 2, 2], [0, 2, 2, 0], [0, 2, 2, 0], [2, 2, 2, 2], [0, 2, 2, 0]], [[0, 5, 5, 0], [5, 0, 0, 5], [0, 0, 0, 0], [0, 0, 0, 0], [5, 0, 0, 5], [0, 5, 5, 0], [0, 5, 5, 0], [5, 0, 0, 5], [0, 0, 0, 0]]]}, "test_io": {"inputs": [[[3, 3], [3, 0], [3, 3]]], "outputs": [[[3, 3, 3, 3], [0, 3, 3, 0], [3, 3, 3, 3], [3, 3, 3, 3], [0, 3, 3, 0], [3, 3, 3, 3], [3, 3, 3, 3], [0, 3, 3, 0], [3, 3, 3, 3]]]}, "solved": true, "generalizable": true, "anpl": "def mirror_left_boundary(input):\n    return np.concatenate((input[:, ::-1], input), axis=1)\n\ndef main(input_grid):\n    t1 = mirror_left_boundary(input_grid)\n    t2 = \"mirror input with top boundary\"(t1)\n    t3 = \"concat the three input to a new numpy array in axis 0\"(t2, t1, t2)\n    return t3", "python": "import numpy as np\nfrom typing import *\nblack, blue, red, green, yellow, grey, pink, orange, teal, maroon = range(10)\n\ndef concatenate_grids(grid1: List[List[int]], grid2: List[List[int]], grid3: List[List[int]]) -> np.ndarray:\n    \"\"\"\n    This function concatenates the three input grids to a new numpy array along axis 0.\n\n    Args:\n    grid1: A list of lists containing integers representing the first input grid.\n    grid2: A list of lists containing integers representing the second input grid.\n    grid3: A list of lists containing integers representing the third input grid.\n\n    Returns:\n    A numpy array containing integers representing the concatenated grid.\n    \"\"\"\n    return np.concatenate((grid1, grid2, grid3), axis=0)\n\ndef mirror_top_boundary(input_grid: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    This function mirrors the input grid's symmetry with the top boundary.\n\n    Args:\n    input_grid: A list of lists containing integers representing the input grid.\n\n    Returns:\n    A list of lists containing integers representing the mirrored grid.\n    \"\"\"\n    return input_grid[::-1]\n\ndef mirror_left_boundary(input):\n    return np.concatenate((input[:, ::-1], input), axis=1)\n\ndef main(input_grid):\n    t1 = mirror_left_boundary(input_grid)\n    t2 = mirror_top_boundary(t1)\n    t3 = concatenate_grids(t2, t1, t2)\n    return t3"}