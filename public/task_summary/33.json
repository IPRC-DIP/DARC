{"id": 33, "train_io": {"inputs": [[[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 4, 2, 0, 0, 0, 0, 0], [0, 0, 4, 4, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 3, 3, 0, 0, 0, 0, 0], [0, 0, 3, 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 6, 2, 0, 0, 0, 0], [0, 0, 0, 2, 6, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 2, 0, 0, 0, 0], [0, 0, 0, 2, 7, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]]], "outputs": [[[0, 0, 0, 0, 0, 0, 4, 4, 4], [0, 0, 0, 0, 0, 4, 4, 4, 0], [0, 0, 0, 0, 4, 4, 4, 0, 0], [0, 0, 0, 4, 4, 4, 0, 0, 0], [0, 0, 4, 4, 4, 0, 0, 0, 0], [0, 0, 4, 4, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 3, 3, 0, 0, 0, 0, 0], [0, 0, 3, 3, 3, 0, 0, 0, 0], [0, 0, 0, 3, 3, 3, 0, 0, 0], [0, 0, 0, 0, 3, 3, 3, 0, 0], [0, 0, 0, 0, 0, 3, 3, 3, 0], [0, 0, 0, 0, 0, 0, 3, 3, 3], [0, 0, 0, 0, 0, 0, 0, 3, 3], [0, 0, 0, 0, 0, 0, 0, 0, 3]], [[0, 0, 0, 0, 0, 0, 6, 6, 6], [0, 0, 0, 0, 0, 6, 6, 6, 0], [0, 0, 0, 0, 6, 6, 6, 0, 0], [0, 0, 0, 6, 6, 6, 0, 0, 0], [0, 0, 6, 6, 6, 0, 0, 0, 0], [0, 6, 6, 6, 0, 0, 0, 0, 0], [6, 6, 6, 0, 0, 0, 0, 0, 0], [6, 6, 0, 0, 0, 0, 0, 0, 0], [6, 0, 0, 0, 0, 0, 0, 0, 0]], [[7, 7, 0, 0, 0, 0, 7, 7, 7], [7, 7, 7, 0, 0, 7, 7, 7, 0], [0, 7, 7, 7, 7, 7, 7, 0, 0], [0, 0, 7, 7, 7, 7, 0, 0, 0], [0, 0, 7, 7, 7, 0, 0, 0, 0], [0, 7, 7, 7, 0, 0, 0, 0, 0], [7, 7, 7, 0, 0, 0, 0, 0, 0], [7, 7, 0, 0, 0, 0, 0, 0, 0], [7, 0, 0, 0, 0, 0, 0, 0, 0]]]}, "test_io": {"inputs": [[[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 2, 0, 0], [0, 0, 0, 0, 0, 8, 2, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]]], "outputs": [[[0, 0, 8, 8, 8, 0, 0, 8, 8], [0, 0, 0, 8, 8, 8, 8, 8, 8], [0, 0, 0, 0, 8, 8, 8, 8, 0], [0, 0, 0, 0, 0, 8, 8, 8, 0], [0, 0, 0, 0, 0, 0, 8, 8, 8], [0, 0, 0, 0, 0, 0, 0, 8, 8], [0, 0, 0, 0, 0, 0, 0, 0, 8], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]]]}, "solved": true, "generalizable": true, "anpl": "def main(input_grid: np.ndarray) -> np.ndarray:\n    grid = input_grid.copy()\n    red_coordinates = \"find all red pixels in the input grid\"(input_grid)\n    color = \"find colors in the grid except red and black\"(input_grid)[0]\n    for (x, y) in red_coordinates:\n        if input_grid[x + 1, y] != black and input_grid[x, y + 1] != black:\n            grid = \"extend from the starting point in the specified direction until the grid boundary using the specific color\"(grid, (x, y), (-1, -1), color)\n            grid = \"extend from the starting point in the specified direction until the grid boundary using the specific color\"(grid, (x + 1, y), (-1, -1), color)\n            grid = \"extend from the starting point in the specified direction until the grid boundary using the specific color\"(grid, (x, y + 1), (-1, -1), color)\n        elif input_grid[x + 1, y] != black and input_grid[x, y - 1] != black:\n            grid = \"extend from the starting point in the specified direction until the grid boundary using the specific color\"(grid, (x, y), (-1, 1), color)\n            grid = \"extend from the starting point in the specified direction until the grid boundary using the specific color\"(grid, (x + 1, y), (-1, 1), color)\n            grid = \"extend from the starting point in the specified direction until the grid boundary using the specific color\"(grid, (x, y - 1), (-1, 1), color)\n        elif input_grid[x - 1, y] != black and input_grid[x, y + 1] != black:\n            grid = \"extend from the starting point in the specified direction until the grid boundary using the specific color\"(grid, (x, y), (1, -1), color)\n            grid = \"extend from the starting point in the specified direction until the grid boundary using the specific color\"(grid, (x - 1, y), (1, -1), color)\n            grid = \"extend from the starting point in the specified direction until the grid boundary using the specific color\"(grid, (x, y + 1), (1, -1), color)\n        elif input_grid[x - 1, y] != black and input_grid[x, y - 1] != black:\n            grid = \"extend from the starting point in the specified direction until the grid boundary using the specific color\"(grid, (x, y), (1, 1), color)\n            grid = \"extend from the starting point in the specified direction until the grid boundary using the specific color\"(grid, (x - 1, y), (1, 1), color)\n            grid = \"extend from the starting point in the specified direction until the grid boundary using the specific color\"(grid, (x, y - 1), (1, 1), color)\n    return grid", "python": "import numpy as np\nfrom typing import *\nblack, blue, red, green, yellow, grey, pink, orange, teal, maroon = range(10)\n\ndef drawline(grid: np.ndarray, start: Tuple[int, int], direction: Tuple[int, int], color: int) -> np.ndarray:\n    \"\"\"\n    Extend from the starting point in the specified direction until the grid boundary using the specific color.\n\n    Parameters:\n    grid (np.ndarray): The input grid as a numpy array.\n    start (Tuple[int, int]): The starting point of the line as a tuple of integers representing x and y coordinates.\n    direction (Tuple[int, int]): The direction of the line as a tuple of integers representing the change in x and y coordinates for each step.\n    color (int): The color to use for drawing the line.\n\n    Returns:\n    np.ndarray: The updated grid as a numpy array with the drawn line.\n    \"\"\"\n    x, y = start\n    dx, dy = direction\n    while 0 <= x < grid.shape[0] and 0 <= y < grid.shape[1]:\n        grid[x, y] = color\n        x += dx\n        y += dy\n    return grid\n\ndef find_colors(input_grid: np.ndarray) -> List[int]:\n    colors = set()\n    for i in range(input_grid.shape[0]):\n        for j in range(input_grid.shape[1]):\n            if input_grid[i, j] != red and input_grid[i, j] != black:\n                colors.add(input_grid[i, j])\n    return list(colors)\n\ndef find_red_pixels(input_grid: np.ndarray) -> List[Tuple[int, int]]:\n    red_coordinates = []\n    for i in range(input_grid.shape[0]):\n        for j in range(input_grid.shape[1]):\n            if input_grid[i, j] == red:\n                red_coordinates.append((i, j))\n    return red_coordinates\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    grid = input_grid.copy()\n    red_coordinates = find_red_pixels(input_grid)\n    color = find_colors(input_grid)[0]\n    for x, y in red_coordinates:\n        if input_grid[x + 1, y] != black and input_grid[x, y + 1] != black:\n            grid = drawline(grid, (x, y), (-1, -1), color)\n            grid = drawline(grid, (x + 1, y), (-1, -1), color)\n            grid = drawline(grid, (x, y + 1), (-1, -1), color)\n        elif input_grid[x + 1, y] != black and input_grid[x, y - 1] != black:\n            grid = drawline(grid, (x, y), (-1, 1), color)\n            grid = drawline(grid, (x + 1, y), (-1, 1), color)\n            grid = drawline(grid, (x, y - 1), (-1, 1), color)\n        elif input_grid[x - 1, y] != black and input_grid[x, y + 1] != black:\n            grid = drawline(grid, (x, y), (1, -1), color)\n            grid = drawline(grid, (x - 1, y), (1, -1), color)\n            grid = drawline(grid, (x, y + 1), (1, -1), color)\n        elif input_grid[x - 1, y] != black and input_grid[x, y - 1] != black:\n            grid = drawline(grid, (x, y), (1, 1), color)\n            grid = drawline(grid, (x - 1, y), (1, 1), color)\n            grid = drawline(grid, (x, y - 1), (1, 1), color)\n    return grid"}