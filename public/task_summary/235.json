{"id": 235, "train_io": {"inputs": [[[0, 1, 0, 1], [0, 0, 0, 1], [1, 0, 1, 0], [0, 0, 0, 1], [4, 4, 4, 4], [0, 2, 0, 2], [0, 0, 0, 2], [2, 0, 0, 2], [2, 2, 2, 0]], [[1, 1, 0, 0], [1, 0, 1, 0], [1, 1, 0, 1], [0, 1, 1, 0], [4, 4, 4, 4], [0, 2, 2, 2], [2, 0, 2, 0], [2, 2, 2, 2], [2, 2, 2, 2]], [[0, 1, 0, 0], [1, 0, 1, 1], [1, 1, 1, 0], [1, 1, 1, 0], [4, 4, 4, 4], [0, 0, 0, 0], [0, 2, 0, 2], [2, 2, 0, 2], [0, 2, 0, 0]], [[1, 0, 1, 1], [0, 0, 0, 1], [1, 1, 0, 0], [0, 0, 1, 1], [4, 4, 4, 4], [0, 2, 2, 2], [0, 2, 2, 2], [2, 0, 2, 2], [2, 2, 2, 2]]], "outputs": [[[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 3, 3], [3, 3, 3, 3]], [[3, 0, 3, 3], [0, 0, 0, 0], [0, 0, 3, 0], [3, 0, 0, 3]], [[0, 3, 0, 0], [3, 3, 3, 0], [0, 0, 3, 3], [3, 0, 3, 0]], [[3, 3, 0, 0], [0, 3, 3, 0], [0, 3, 3, 3], [3, 3, 0, 0]]]}, "test_io": {"inputs": [[[1, 0, 1, 1], [0, 1, 1, 1], [0, 0, 1, 0], [1, 0, 1, 1], [4, 4, 4, 4], [2, 2, 0, 2], [0, 0, 2, 0], [2, 0, 0, 2], [0, 2, 0, 2]]], "outputs": [[[0, 3, 3, 0], [0, 3, 0, 3], [3, 0, 3, 3], [3, 3, 3, 0]]]}, "solved": true, "generalizable": true, "anpl": "def process_grid(input1: np.ndarray, input2: np.ndarray) -> np.ndarray:\n    output_grid = np.zeros((4, 4), dtype=int)\n    output_grid = input1 + input2\n    \"use for loop to check every point,if it is not red or blue, color it to dark.\"(output_grid)\n    \"use for loop to check every point,if it is red or blue, color it to green.\"(output_grid)\n    return output_grid\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    up = input_grid[0:4, :]\n    down = input_grid[5:9, :]\n    output_grid = process_grid(up, down)\n    return output_grid", "python": "import numpy as np\nfrom typing import *\nblack, blue, red, green, yellow, grey, pink, orange, teal, maroon = range(10)\n\ndef color_green(grid: np.ndarray) -> None:\n    for i in range(grid.shape[0]):\n        for j in range(grid.shape[1]):\n            if grid[i][j] == red or grid[i][j] == blue:\n                grid[i][j] = green\n\ndef color_dark(grid: np.ndarray) -> None:\n    for i in range(grid.shape[0]):\n        for j in range(grid.shape[1]):\n            if grid[i][j] != red and grid[i][j] != blue:\n                grid[i][j] = black\n\ndef process_grid(input1: np.ndarray, input2: np.ndarray) -> np.ndarray:\n    output_grid = np.zeros((4, 4), dtype=int)\n    output_grid = input1 + input2\n    color_dark(output_grid)\n    color_green(output_grid)\n    return output_grid\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    up = input_grid[0:4, :]\n    down = input_grid[5:9, :]\n    output_grid = process_grid(up, down)\n    return output_grid"}