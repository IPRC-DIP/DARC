{"id": 276, "train_io": {"inputs": [[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 8, 8, 8], [0, 8, 8, 8, 8, 0, 0, 8, 0, 8], [0, 8, 0, 0, 8, 0, 0, 8, 8, 8], [0, 8, 8, 8, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 8, 8, 8, 0], [0, 0, 0, 0, 0, 8, 0, 0, 8, 0], [0, 0, 0, 0, 0, 8, 8, 8, 8, 0]], [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 8, 8, 8, 8], [0, 8, 8, 8, 8, 0, 0, 0, 8, 8], [0, 0, 0, 8, 8, 0, 0, 0, 8, 8], [0, 0, 0, 8, 8, 8, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 8, 8, 8, 8, 0, 0, 0], [0, 0, 0, 0, 0, 8, 8, 0, 0, 0], [0, 0, 0, 0, 0, 8, 8, 8, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]], "outputs": [[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 2, 2, 2], [0, 1, 1, 1, 1, 0, 0, 2, 0, 2], [0, 1, 0, 0, 1, 0, 0, 2, 2, 2], [0, 1, 1, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 1, 0, 0, 1, 0], [0, 0, 0, 0, 0, 1, 1, 1, 1, 0]], [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 2, 2, 2, 2], [0, 1, 1, 1, 1, 0, 0, 0, 2, 2], [0, 0, 0, 1, 1, 0, 0, 0, 2, 2], [0, 0, 0, 1, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]]}, "test_io": {"inputs": [[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 8, 0, 0, 0, 8, 8, 8, 0], [0, 0, 8, 0, 0, 0, 0, 0, 8, 0], [0, 8, 0, 0, 0, 0, 0, 8, 0, 0], [0, 8, 8, 8, 0, 0, 8, 8, 8, 8], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 8, 8, 8, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0], [0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 8, 8, 8, 8, 0, 0, 0]]], "outputs": [[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 2, 0, 0, 0, 1, 1, 1, 0], [0, 0, 2, 0, 0, 0, 0, 0, 1, 0], [0, 2, 0, 0, 0, 0, 0, 1, 0, 0], [0, 2, 2, 2, 0, 0, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 1, 1, 0, 0, 0]]]}, "solved": true, "generalizable": true, "anpl": null, "python": "import numpy as np\nfrom typing import *\nblack, blue, red, green, yellow, grey, pink, orange, teal, maroon = range(10)\n\ndef dfs(input, i, j, visited, domain):\n    if i < 0 or i >= len(input) or j < 0 or (j >= len(input[0])) or ((i, j) in visited) or (input[i][j] != teal):\n        return\n    visited.add((i, j))\n    domain.append((i, j))\n    dfs(input, i + 1, j, visited, domain)\n    dfs(input, i - 1, j, visited, domain)\n    dfs(input, i, j + 1, visited, domain)\n    dfs(input, i, j - 1, visited, domain)\n    dfs(input, i + 1, j + 1, visited, domain)\n    dfs(input, i - 1, j - 1, visited, domain)\n    dfs(input, i + 1, j - 1, visited, domain)\n    dfs(input, i - 1, j + 1, visited, domain)\n\ndef color_positions(input: List[List[int]], positions: List[Tuple[int, int]], color: int) -> List[List[int]]:\n    \"\"\"\n    This function takes a 2D list of integers as input, a list of positions to be colored and a color integer.\n    It returns the input list with the specified positions colored with the specified color.\n    \"\"\"\n    for pos in positions:\n        input[pos[0]][pos[1]] = color\n    return input\n\ndef find_teal_domains(input: List[List[int]]) -> List[List[Tuple[int, int]]]:\n    \"\"\"\n    This function takes a 2D list of integers as input and returns a list of three teal eight-connected domains in the input.\n    \"\"\"\n    domains = []\n    visited = set()\n    for i in range(len(input)):\n        for j in range(len(input[0])):\n            if input[i][j] == teal and (i, j) not in visited:\n                domain = []\n                dfs(input, i, j, visited, domain)\n                domains.append(domain)\n    return domains\n\ndef main(input):\n    connected_domains = find_teal_domains(input)\n    connected_domains = sorted(connected_domains, key=lambda x: len(x))\n    for domain in connected_domains:\n        input = color_positions(input, domain, blue)\n    input = color_positions(input, connected_domains[0], red)\n    return input"}