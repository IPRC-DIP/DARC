{"id": 294, "train_io": {"inputs": [[[1, 1, 0, 0, 0, 0]], [[2, 0, 0, 0, 0, 0, 0, 0]], [[5, 5, 5, 0, 0, 0, 0, 0, 0, 0]], [[8, 8, 8, 8, 0, 0]], [[7, 0, 0, 0, 0, 0]]], "outputs": [[[1, 1, 0, 0, 0, 0], [1, 1, 1, 0, 0, 0], [1, 1, 1, 1, 0, 0]], [[2, 0, 0, 0, 0, 0, 0, 0], [2, 2, 0, 0, 0, 0, 0, 0], [2, 2, 2, 0, 0, 0, 0, 0], [2, 2, 2, 2, 0, 0, 0, 0]], [[5, 5, 5, 0, 0, 0, 0, 0, 0, 0], [5, 5, 5, 5, 0, 0, 0, 0, 0, 0], [5, 5, 5, 5, 5, 0, 0, 0, 0, 0], [5, 5, 5, 5, 5, 5, 0, 0, 0, 0], [5, 5, 5, 5, 5, 5, 5, 0, 0, 0]], [[8, 8, 8, 8, 0, 0], [8, 8, 8, 8, 8, 0], [8, 8, 8, 8, 8, 8]], [[7, 0, 0, 0, 0, 0], [7, 7, 0, 0, 0, 0], [7, 7, 7, 0, 0, 0]]]}, "test_io": {"inputs": [[[1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]]], "outputs": [[[1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0]]]}, "solved": true, "generalizable": true, "anpl": null, "python": "import numpy as np\nfrom typing import *\nblack, blue, red, green, yellow, grey, pink, orange, teal, maroon = range(10)\n\ndef replace_left_pixels_in_line_i_with_a(input_grid: np.ndarray, i: int, m: int, a: int) -> np.ndarray:\n    out = input_grid.copy()\n    out[i, :m] = a\n    return out\n\ndef replace_pixels_in_line_i_with_a(input_grid: np.ndarray, i: int, n: int, a: int) -> np.ndarray:\n    m = i + n\n    out = replace_left_pixels_in_line_i_with_a(input_grid, i, m, a)\n    return out\n\ndef get_height(input_grid: np.ndarray) -> int:\n    return input_grid.shape[0]\n\ndef count_pixels_of_color_a_in_first_row(input_grid: np.ndarray, a: int) -> int:\n    return np.count_nonzero(input_grid[0] == a)\n\ndef get_first_pixel_color(input_grid: np.ndarray) -> int:\n    return input_grid[0][0]\n\ndef copy_first_row_to_all_rows(input_grid: np.ndarray) -> np.ndarray:\n    return np.array([input_grid[0]] * input_grid.shape[0])\n\ndef expand_height(input_grid: np.ndarray, h: int) -> np.ndarray:\n    return np.pad(input_grid, ((0, h - input_grid.shape[0]), (0, 0)))\n\ndef get_half_width(input_grid: np.ndarray) -> int:\n    return input_grid.shape[1] // 2\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    h = get_half_width(input_grid)\n    out = expand_height(input_grid, h)\n    out = copy_first_row_to_all_rows(out)\n    a = get_first_pixel_color(out)\n    n = count_pixels_of_color_a_in_first_row(out, a)\n    h = get_height(out)\n    for i in range(1, h):\n        out = replace_pixels_in_line_i_with_a(out, i, n, a)\n    return out"}