{"id": 163, "train_io": {"inputs": [[[6, 6, 6], [1, 6, 1], [8, 8, 6]], [[6, 8, 1], [6, 1, 1], [1, 1, 6]], [[1, 1, 1], [8, 1, 6], [6, 8, 8]], [[1, 1, 1], [1, 6, 6], [6, 6, 6]]], "outputs": [[[6, 6, 6, 6, 6, 6], [1, 6, 1, 1, 6, 1], [8, 8, 6, 6, 8, 8]], [[6, 8, 1, 1, 8, 6], [6, 1, 1, 1, 1, 6], [1, 1, 6, 6, 1, 1]], [[1, 1, 1, 1, 1, 1], [8, 1, 6, 6, 1, 8], [6, 8, 8, 8, 8, 6]], [[1, 1, 1, 1, 1, 1], [1, 6, 6, 6, 6, 1], [6, 6, 6, 6, 6, 6]]]}, "test_io": {"inputs": [[[6, 8, 6], [8, 6, 8], [1, 6, 1]]], "outputs": [[[6, 8, 6, 6, 8, 6], [8, 6, 8, 8, 6, 8], [1, 6, 1, 1, 6, 1]]]}, "solved": true, "generalizable": true, "anpl": "def main(input_grid: np.ndarray) -> np.ndarray:\n    output_grid = \"Create a 3x6 image matrix\"()\n    output_grid = \"Assign input_grid to the left half of output_grid\"(output_grid, input_grid)\n    input_grid = \"Flip input_grid leftside right\"(input_grid)\n    output_grid = \"Assign input_grid to the right half of output_grid\"(output_grid, input_grid)\n    return output_grid", "python": "import numpy as np\nfrom typing import *\nblack, blue, red, green, yellow, grey, pink, orange, teal, maroon = range(10)\n\ndef assign_input_to_right_half(output_grid: np.ndarray, input_grid: np.ndarray) -> np.ndarray:\n    output_grid[:, 3:] = input_grid\n    return output_grid\n\ndef flip_left_to_right(input_grid: np.ndarray) -> np.ndarray:\n    return np.fliplr(input_grid)\n\ndef assign_input_to_left_half(output_grid: np.ndarray, input_grid: np.ndarray) -> np.ndarray:\n    output_grid[:, :3] = input_grid\n    return output_grid\n\ndef create_image_matrix() -> np.ndarray:\n    return np.zeros((3, 6))\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    output_grid = create_image_matrix()\n    output_grid = assign_input_to_left_half(output_grid, input_grid)\n    input_grid = flip_left_to_right(input_grid)\n    output_grid = assign_input_to_right_half(output_grid, input_grid)\n    return output_grid"}