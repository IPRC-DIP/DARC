{"nodes": [{"id": "0", "position": {"x": 0, "y": 0}, "data": {"name": "input_grid", "kind": "matrix", "val": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 8, 0, 0, 0, 8, 8, 0, 0], [8, 8, 8, 8, 0, 8, 8, 8, 8, 0], [0, 0, 8, 0, 0, 0, 0, 8, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 4, 4, 0, 0, 0, 0, 0, 0, 0], [3, 4, 3, 3, 0, 0, 8, 8, 0, 0], [0, 0, 3, 0, 0, 8, 8, 8, 8, 0], [0, 0, 0, 0, 0, 0, 0, 8, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "subgraph": null}, "type": "CustomNode"}, {"id": "1", "position": {"x": 0, "y": 0}, "data": {"name": "statement", "kind": "stmt", "val": "ans_grid = Generate a new grid, exactly the same as input_grid. Blacken all the teal pixels(input_grid)", "subgraph": null}, "type": "CustomNode"}, {"id": "2", "position": {"x": 0, "y": 0}, "data": {"name": "ans_grid", "kind": "matrix", "val": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 4, 4, 0, 0, 0, 0, 0, 0, 0], [3, 4, 3, 3, 0, 0, 0, 0, 0, 0], [0, 0, 3, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "subgraph": null}, "type": "CustomNode"}, {"id": "3", "position": {"x": 0, "y": 0}, "data": {"name": "statement", "kind": "stmt", "val": "(minx, miny, maxx, maxy) = Define four variables (minx, miny, maxx, maxy) as the smallest x, the smallest y, the largest x, and the largest y. Traverse all the pixels in the new grid, if a pixel (x, y) is not black, use the pixel to update the above four variables(ans_grid)", "subgraph": null}, "type": "CustomNode"}, {"id": "4", "position": {"x": 0, "y": 0}, "data": {"name": "minx", "kind": "val", "val": "5", "subgraph": null}, "type": "CustomNode"}, {"id": "5", "position": {"x": 0, "y": 0}, "data": {"name": "miny", "kind": "val", "val": "0", "subgraph": null}, "type": "CustomNode"}, {"id": "6", "position": {"x": 0, "y": 0}, "data": {"name": "maxx", "kind": "val", "val": "7", "subgraph": null}, "type": "CustomNode"}, {"id": "7", "position": {"x": 0, "y": 0}, "data": {"name": "maxy", "kind": "val", "val": "3", "subgraph": null}, "type": "CustomNode"}, {"id": "8", "position": {"x": 0, "y": 0}, "data": {"name": "statement", "kind": "stmt", "val": "target_grid = Extract the subgrid with (minx, miny) as the upper left corner and (maxx, maxy) as the lower right corner, and return the grid(ans_grid, minx, miny, maxx, maxy)", "subgraph": null}, "type": "CustomNode"}, {"id": "9", "position": {"x": 0, "y": 0}, "data": {"name": "target_grid", "kind": "matrix", "val": [[0, 4, 4, 0], [3, 4, 3, 3], [0, 0, 3, 0]], "subgraph": null}, "type": "CustomNode"}, {"id": "10", "position": {"x": 0, "y": 0}, "data": {"name": "statement", "kind": "stmt", "val": "mask_grid = Generate a new grid with the same size as the target_grid. If the pixel in the subgrid is non-black, the value in the new grid is teal; otherwise, it is black(target_grid)", "subgraph": null}, "type": "CustomNode"}, {"id": "11", "position": {"x": 0, "y": 0}, "data": {"name": "mask_grid", "kind": "matrix", "val": [[0, 8, 8, 0], [8, 8, 8, 8], [0, 0, 8, 0]], "subgraph": null}, "type": "CustomNode"}, {"id": "12", "position": {"x": 0, "y": 0}, "data": {"name": "statement", "kind": "stmt", "val": "input_grid[minx:maxx + 1, miny:maxy + 1] = black", "subgraph": null}, "type": "CustomNode"}, {"id": "13", "position": {"x": 0, "y": 0}, "data": {"name": "input_grid", "kind": "matrix", "val": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 8, 0, 0, 0, 8, 8, 0, 0], [8, 8, 8, 8, 0, 8, 8, 8, 8, 0], [0, 0, 8, 0, 0, 0, 0, 8, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 8, 8, 0, 0], [0, 0, 0, 0, 0, 8, 8, 8, 8, 0], [0, 0, 0, 0, 0, 0, 0, 8, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "subgraph": null}, "type": "CustomNode"}, {"id": "14", "position": {"x": 0, "y": 0}, "data": {"name": "statement", "kind": "stmt", "val": "ans = Traverse all the elements in the inputgrid, match each pixel with a grid same as mask_grid, if the current pixel is matched, overwrite the position with a grid same as target_grid(input_grid, target_grid, mask_grid)", "subgraph": null}, "type": "CustomNode"}, {"id": "16", "position": {"x": 0, "y": 0}, "data": {"name": "ans", "kind": "matrix", "val": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 4, 4, 0, 0, 0, 4, 4, 0, 0], [3, 4, 3, 3, 0, 3, 4, 3, 3, 0], [0, 0, 3, 0, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 4, 4, 0, 0], [0, 0, 0, 0, 0, 3, 4, 3, 3, 0], [0, 0, 0, 0, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "subgraph": null}, "type": "CustomNode"}, {"id": "17", "position": {"x": 0, "y": 0}, "data": {"name": "statement", "kind": "stmt", "val": "return ans", "subgraph": null}, "type": "CustomNode"}, {"id": "19", "position": {"x": 0, "y": 0}, "data": {"name": "out", "kind": "matrix", "val": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 4, 4, 0, 0, 0, 4, 4, 0, 0], [3, 4, 3, 3, 0, 3, 4, 3, 3, 0], [0, 0, 3, 0, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 4, 4, 0, 0], [0, 0, 0, 0, 0, 3, 4, 3, 3, 0], [0, 0, 0, 0, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "subgraph": null}, "type": "CustomNode"}], "edges": [{"id": "e0-1", "source": "0", "target": "1", "type": "smoothstep", "animated": true}, {"id": "e1-2", "source": "1", "target": "2", "type": "smoothstep", "animated": true}, {"id": "e2-3", "source": "2", "target": "3", "type": "smoothstep", "animated": true}, {"id": "e3-4", "source": "3", "target": "4", "type": "smoothstep", "animated": true}, {"id": "e3-5", "source": "3", "target": "5", "type": "smoothstep", "animated": true}, {"id": "e3-6", "source": "3", "target": "6", "type": "smoothstep", "animated": true}, {"id": "e3-7", "source": "3", "target": "7", "type": "smoothstep", "animated": true}, {"id": "e7-8", "source": "7", "target": "8", "type": "smoothstep", "animated": true}, {"id": "e4-8", "source": "4", "target": "8", "type": "smoothstep", "animated": true}, {"id": "e5-8", "source": "5", "target": "8", "type": "smoothstep", "animated": true}, {"id": "e2-8", "source": "2", "target": "8", "type": "smoothstep", "animated": true}, {"id": "e6-8", "source": "6", "target": "8", "type": "smoothstep", "animated": true}, {"id": "e8-9", "source": "8", "target": "9", "type": "smoothstep", "animated": true}, {"id": "e9-10", "source": "9", "target": "10", "type": "smoothstep", "animated": true}, {"id": "e10-11", "source": "10", "target": "11", "type": "smoothstep", "animated": true}, {"id": "e7-12", "source": "7", "target": "12", "type": "smoothstep", "animated": true}, {"id": "e4-12", "source": "4", "target": "12", "type": "smoothstep", "animated": true}, {"id": "e0-12", "source": "0", "target": "12", "type": "smoothstep", "animated": true}, {"id": "e5-12", "source": "5", "target": "12", "type": "smoothstep", "animated": true}, {"id": "e6-12", "source": "6", "target": "12", "type": "smoothstep", "animated": true}, {"id": "e12-13", "source": "12", "target": "13", "type": "smoothstep", "animated": true}, {"id": "e11-14", "source": "11", "target": "14", "type": "smoothstep", "animated": true}, {"id": "e9-14", "source": "9", "target": "14", "type": "smoothstep", "animated": true}, {"id": "e13-14", "source": "13", "target": "14", "type": "smoothstep", "animated": true}, {"id": "e14-16", "source": "14", "target": "16", "type": "smoothstep", "animated": true}, {"id": "e16-17", "source": "16", "target": "17", "type": "smoothstep", "animated": true}, {"id": "e17-19", "source": "17", "target": "19", "type": "smoothstep", "animated": true}]}