{"nodes": [{"id": "0", "position": {"x": 0, "y": 0}, "data": {"name": "input_grid", "kind": "matrix", "val": [[3, 3, 3, 0, 3, 3, 3, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4], [3, 3, 3, 3, 3, 3, 3, 0, 2, 2, 0, 2, 2, 2, 2, 0, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [0, 3, 0, 0, 3, 3, 0, 0, 2, 2, 0, 0, 2, 2, 2, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [3, 0, 3, 3, 3, 3, 3, 0, 2, 0, 2, 2, 2, 2, 2, 0, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 8, 8, 8, 0, 8, 8, 8, 8, 8, 0, 8, 0], [1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 8, 8, 8, 8, 8, 8, 0, 8, 0, 8, 8, 0], [1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 8, 8, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8], [1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 8, 8, 8, 0, 8, 8, 8, 8, 8, 8, 0, 8], [0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 8, 8, 8, 0, 8, 8, 0, 8, 8, 8], [1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 8, 8, 8, 8, 8, 8, 0, 8, 0, 8, 8, 0], [1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 8, 8, 8, 8, 8, 0, 0, 0, 8, 8, 8, 8], [1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 8, 8, 8, 8, 0, 8, 8, 8, 8, 8, 0, 8], [1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 8, 0], [1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 8, 0, 8, 0, 8, 8, 8, 8, 8, 8, 8, 8], [1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 8, 8, 8, 8, 8, 8, 0, 8, 0, 8, 8, 8], [1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 8, 0, 8, 8, 8, 8, 8, 8, 8, 8, 0, 8], [0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 8, 0, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 7, 0, 7, 7, 0, 7, 0, 3, 3, 0, 0, 3, 3, 3, 0, 2, 0, 2, 2, 2, 2, 0, 2, 2, 0, 2, 2], [7, 7, 7, 0, 7, 7, 7, 0, 0, 3, 3, 0, 3, 0, 0, 0, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 0], [7, 7, 7, 7, 7, 7, 7, 0, 3, 3, 3, 3, 3, 3, 3, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]], "subgraph": null}, "type": "CustomNode"}, {"id": "1", "position": {"x": 0, "y": 0}, "data": {"name": "statement", "kind": "stmt", "val": "(rows, colomns) = find all rows and colomns with all black pixels(input_grid)", "subgraph": null}, "type": "CustomNode"}, {"id": "2", "position": {"x": 0, "y": 0}, "data": {"name": "rows", "kind": "val", "val": "[4, 19]", "subgraph": null}, "type": "CustomNode"}, {"id": "3", "position": {"x": 0, "y": 0}, "data": {"name": "colomns", "kind": "val", "val": "[7, 15]", "subgraph": null}, "type": "CustomNode"}, {"id": "4", "position": {"x": 0, "y": 0}, "data": {"name": "statement", "kind": "stmt", "val": "(rows, colomns) = add 0 at the start of rows and colomns, add the last row numbers of input_grid at the end of rows, add the biggest colomn numbers of input_grid at the end of colomns(rows, colomns, input_grid)", "subgraph": null}, "type": "CustomNode"}, {"id": "5", "position": {"x": 0, "y": 0}, "data": {"name": "rows", "kind": "val", "val": "[0, 5, 20, 23]", "subgraph": null}, "type": "CustomNode"}, {"id": "6", "position": {"x": 0, "y": 0}, "data": {"name": "colomns", "kind": "val", "val": "[0, 8, 16, 28]", "subgraph": null}, "type": "CustomNode"}, {"id": "7", "position": {"x": 0, "y": 0}, "data": {"name": "statement", "kind": "stmt", "val": "sub_grids = divide the input grid in to several subgrids by the rows and colomns(rows, colomns, input_grid)", "subgraph": null}, "type": "CustomNode"}, {"id": "8", "position": {"x": 0, "y": 0}, "data": {"name": "sub_grids", "kind": "val", "val": "[array([[3, 3, 3, 0, 3, 3, 3, 0],\n       [3, 3, 3, 3, 3, 3, 3, 0],\n       [0, 3, 0, 0, 3, 3, 0, 0],\n       [3, 0, 3, 3, 3, 3, 3, 0],\n       [0, 0, 0, 0, 0, 0, 0, 0]]), array([[2, 2, 2, 2, 2, 2, 2, 0],\n       [2, 2, 0, 2, 2, 2, 2, 0],\n       [2, 2, 0, 0, 2, 2, 2, 0],\n       [2, 0, 2, 2, 2, 2, 2, 0],\n       [0, 0, 0, 0, 0, 0, 0, 0]]), array([[0, 0, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4],\n       [4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4],\n       [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4],\n       [4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4],\n       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]), array([[1, 1, 1, 1, 1, 0, 1, 0],\n       [1, 1, 1, 0, 1, 0, 1, 0],\n       [1, 0, 1, 1, 1, 1, 1, 0],\n       [1, 1, 0, 1, 1, 1, 0, 0],\n       [0, 0, 0, 1, 1, 0, 1, 0],\n       [1, 1, 1, 0, 1, 1, 0, 0],\n       [1, 1, 1, 0, 0, 0, 1, 0],\n       [1, 1, 1, 1, 1, 1, 1, 0],\n       [1, 1, 1, 0, 0, 1, 1, 0],\n       [1, 0, 1, 1, 0, 1, 1, 0],\n       [1, 1, 1, 0, 1, 0, 1, 0],\n       [1, 1, 1, 1, 1, 1, 1, 0],\n       [1, 0, 1, 1, 1, 1, 1, 0],\n       [0, 1, 0, 1, 1, 1, 1, 0],\n       [0, 0, 0, 0, 0, 0, 0, 0]]), array([[1, 1, 0, 0, 1, 1, 1, 0],\n       [1, 1, 1, 1, 0, 1, 1, 0],\n       [1, 1, 1, 1, 1, 1, 1, 0],\n       [1, 1, 1, 1, 1, 0, 1, 0],\n       [1, 0, 0, 1, 1, 1, 1, 0],\n       [0, 1, 1, 1, 0, 1, 1, 0],\n       [1, 1, 1, 1, 1, 0, 1, 0],\n       [1, 1, 1, 1, 1, 0, 0, 0],\n       [0, 1, 1, 1, 1, 0, 1, 0],\n       [1, 1, 1, 1, 1, 1, 1, 0],\n       [1, 1, 0, 1, 1, 1, 1, 0],\n       [0, 1, 0, 1, 1, 1, 1, 0],\n       [1, 1, 1, 1, 1, 0, 1, 0],\n       [1, 1, 1, 0, 1, 1, 0, 0],\n       [0, 0, 0, 0, 0, 0, 0, 0]]), array([[8, 8, 8, 0, 8, 8, 8, 8, 8, 0, 8, 0],\n       [8, 8, 8, 8, 8, 8, 0, 8, 0, 8, 8, 0],\n       [8, 8, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8],\n       [8, 8, 8, 0, 8, 8, 8, 8, 8, 8, 0, 8],\n       [0, 0, 8, 8, 8, 0, 8, 8, 0, 8, 8, 8],\n       [8, 8, 8, 8, 8, 8, 0, 8, 0, 8, 8, 0],\n       [8, 8, 8, 8, 8, 0, 0, 0, 8, 8, 8, 8],\n       [8, 8, 8, 8, 0, 8, 8, 8, 8, 8, 0, 8],\n       [0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],\n       [8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 8, 0],\n       [8, 0, 8, 0, 8, 8, 8, 8, 8, 8, 8, 8],\n       [8, 8, 8, 8, 8, 8, 0, 8, 0, 8, 8, 8],\n       [8, 0, 8, 8, 8, 8, 8, 8, 8, 8, 0, 8],\n       [8, 0, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8],\n       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]), array([[7, 7, 0, 7, 7, 0, 7, 0],\n       [7, 7, 7, 0, 7, 7, 7, 0],\n       [7, 7, 7, 7, 7, 7, 7, 0]]), array([[3, 3, 0, 0, 3, 3, 3, 0],\n       [0, 3, 3, 0, 3, 0, 0, 0],\n       [3, 3, 3, 3, 3, 3, 3, 0]]), array([[2, 0, 2, 2, 2, 2, 0, 2, 2, 0, 2, 2],\n       [2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 0],\n       [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]])]", "subgraph": null}, "type": "CustomNode"}, {"id": "9", "position": {"x": 0, "y": 0}, "data": {"name": "statement", "kind": "stmt", "val": "output_grid = create the output grid with row number 1 bigger than number of rows, colomn number 1 bigger than number of colomns(rows, colomns)", "subgraph": null}, "type": "CustomNode"}, {"id": "10", "position": {"x": 0, "y": 0}, "data": {"name": "output_grid", "kind": "matrix", "val": [[0, 0, 0], [0, 0, 0], [0, 0, 0]], "subgraph": null}, "type": "CustomNode"}, {"id": "11", "position": {"x": 0, "y": 0}, "data": {"name": "statement", "kind": "stmt", "val": "output_grid = find the kind of colors in the subgrids, and fill these colors in the output grid(sub_grids, output_grid)", "subgraph": null}, "type": "CustomNode"}, {"id": "12", "position": {"x": 0, "y": 0}, "data": {"name": "output_grid", "kind": "matrix", "val": [[3, 2, 4], [1, 1, 8], [7, 3, 2]], "subgraph": null}, "type": "CustomNode"}, {"id": "13", "position": {"x": 0, "y": 0}, "data": {"name": "statement", "kind": "stmt", "val": "return output_grid", "subgraph": null}, "type": "CustomNode"}, {"id": "15", "position": {"x": 0, "y": 0}, "data": {"name": "out", "kind": "matrix", "val": [[3, 2, 4], [1, 1, 8], [7, 3, 2]], "subgraph": null}, "type": "CustomNode"}], "edges": [{"id": "e0-1", "source": "0", "target": "1", "type": "smoothstep", "animated": true}, {"id": "e1-2", "source": "1", "target": "2", "type": "smoothstep", "animated": true}, {"id": "e1-3", "source": "1", "target": "3", "type": "smoothstep", "animated": true}, {"id": "e2-4", "source": "2", "target": "4", "type": "smoothstep", "animated": true}, {"id": "e0-4", "source": "0", "target": "4", "type": "smoothstep", "animated": true}, {"id": "e3-4", "source": "3", "target": "4", "type": "smoothstep", "animated": true}, {"id": "e4-5", "source": "4", "target": "5", "type": "smoothstep", "animated": true}, {"id": "e4-6", "source": "4", "target": "6", "type": "smoothstep", "animated": true}, {"id": "e5-7", "source": "5", "target": "7", "type": "smoothstep", "animated": true}, {"id": "e0-7", "source": "0", "target": "7", "type": "smoothstep", "animated": true}, {"id": "e6-7", "source": "6", "target": "7", "type": "smoothstep", "animated": true}, {"id": "e7-8", "source": "7", "target": "8", "type": "smoothstep", "animated": true}, {"id": "e5-9", "source": "5", "target": "9", "type": "smoothstep", "animated": true}, {"id": "e6-9", "source": "6", "target": "9", "type": "smoothstep", "animated": true}, {"id": "e9-10", "source": "9", "target": "10", "type": "smoothstep", "animated": true}, {"id": "e8-11", "source": "8", "target": "11", "type": "smoothstep", "animated": true}, {"id": "e10-11", "source": "10", "target": "11", "type": "smoothstep", "animated": true}, {"id": "e11-12", "source": "11", "target": "12", "type": "smoothstep", "animated": true}, {"id": "e12-13", "source": "12", "target": "13", "type": "smoothstep", "animated": true}, {"id": "e13-15", "source": "13", "target": "15", "type": "smoothstep", "animated": true}]}