{"id": 151, "train_io": {"inputs": [[[5, 3, 4], [3, 4, 5], [3, 4, 4]], [[7, 1, 5], [7, 7, 1], [5, 3, 1]], [[2, 5, 2], [2, 6, 4], [2, 2, 2]], [[1, 2, 1], [2, 8, 1], [8, 1, 6]]], "outputs": [[[5, 3, 4, 4, 3, 5], [3, 4, 5, 5, 4, 3], [3, 4, 4, 4, 4, 3], [3, 4, 4, 4, 4, 3], [3, 4, 5, 5, 4, 3], [5, 3, 4, 4, 3, 5]], [[7, 1, 5, 5, 1, 7], [7, 7, 1, 1, 7, 7], [5, 3, 1, 1, 3, 5], [5, 3, 1, 1, 3, 5], [7, 7, 1, 1, 7, 7], [7, 1, 5, 5, 1, 7]], [[2, 5, 2, 2, 5, 2], [2, 6, 4, 4, 6, 2], [2, 2, 2, 2, 2, 2], [2, 2, 2, 2, 2, 2], [2, 6, 4, 4, 6, 2], [2, 5, 2, 2, 5, 2]], [[1, 2, 1, 1, 2, 1], [2, 8, 1, 1, 8, 2], [8, 1, 6, 6, 1, 8], [8, 1, 6, 6, 1, 8], [2, 8, 1, 1, 8, 2], [1, 2, 1, 1, 2, 1]]]}, "test_io": {"inputs": [[[1, 6, 6], [5, 2, 2], [2, 2, 2]]], "outputs": [[[1, 6, 6, 6, 6, 1], [5, 2, 2, 2, 2, 5], [2, 2, 2, 2, 2, 2], [2, 2, 2, 2, 2, 2], [5, 2, 2, 2, 2, 5], [1, 6, 6, 6, 6, 1]]]}, "solved": true, "generalizable": true, "anpl": "def main(input_grid: np.ndarray) -> np.ndarray:\n    output_grid = np.zeros([input_grid.shape[0] * 2, input_grid.shape[1] * 2])\n    output_grid[:input_grid.shape[0], :input_grid.shape[1]] = input_grid\n    output_grid[:input_grid.shape[0], input_grid.shape[1]:] = \"left-right symmetry input_grid\"(input_grid)\n    output_grid[input_grid.shape[0]:, :] = \"up-dowm symmetry output_grid[:input_grid.shape[0], :]\"(output_grid[:input_grid.shape[0], :])\n    return output_grid", "python": "import numpy as np\nfrom typing import *\nblack, blue, red, green, yellow, grey, pink, orange, teal, maroon = range(10)\n\ndef up_down_symmetry(input_grid: np.ndarray) -> np.ndarray:\n    return np.flipud(input_grid)\n\ndef left_right_symmetry(input_grid: np.ndarray) -> np.ndarray:\n    return np.fliplr(input_grid)\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    output_grid = np.zeros([input_grid.shape[0] * 2, input_grid.shape[1] * 2])\n    output_grid[:input_grid.shape[0], :input_grid.shape[1]] = input_grid\n    output_grid[:input_grid.shape[0], input_grid.shape[1]:] = left_right_symmetry(input_grid)\n    output_grid[input_grid.shape[0]:, :] = up_down_symmetry(output_grid[:input_grid.shape[0], :])\n    return output_grid"}