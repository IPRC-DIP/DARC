{"id": 102, "train_io": {"inputs": [[[2, 0, 2], [0, 2, 0], [2, 0, 2]], [[2, 0, 0], [2, 0, 0], [0, 2, 0]], [[2, 0, 2], [2, 0, 2], [2, 0, 2]], [[0, 0, 0], [2, 0, 2], [0, 0, 0]], [[2, 2, 0], [0, 2, 2], [0, 0, 0]], [[2, 2, 0], [0, 2, 0], [0, 0, 0]]], "outputs": [[[1]], [[7]], [[1]], [[1]], [[7]], [[7]]]}, "test_io": {"inputs": [[[2, 0, 2], [2, 2, 2], [2, 0, 2]], [[0, 0, 0], [2, 0, 0], [2, 0, 0]]], "outputs": [[[1]], [[7]]]}, "solved": true, "generalizable": false, "anpl": "def main(input_grid: np.ndarray) -> np.ndarray:\n    output_grid = \"If the input grid is  symmetrical left and right, return blue, else return yellow\"(input_grid)\n    return output_grid", "python": "import numpy as np\nfrom typing import *\nblack, blue, red, green, yellow, grey, pink, orange, teal, maroon = range(10)\n\ndef check_symmetry(input_grid: np.ndarray) -> int:\n    if np.array_equal(input_grid, np.fliplr(input_grid)):\n        return blue\n    else:\n        return yellow\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    output_grid = check_symmetry(input_grid)\n    return output_grid"}