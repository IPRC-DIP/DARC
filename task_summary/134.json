{"id": 134, "train_io": {"inputs": [[[3, 0, 0, 7, 0, 0, 9, 7, 0], [8, 4, 0, 6, 6, 0, 4, 8, 4], [1, 7, 0, 0, 0, 0, 4, 0, 0], [1, 1, 0, 9, 1, 0, 7, 0, 0], [0, 0, 0, 0, 7, 7, 0, 0, 0], [8, 0, 0, 1, 7, 0, 8, 4, 0], [0, 7, 0, 9, 9, 2, 1, 0, 0], [0, 0, 0, 0, 0, 0, 5, 0, 0], [0, 0, 0, 2, 4, 0, 8, 0, 0]], [[9, 0, 0, 0, 0, 0, 0, 6, 0], [0, 4, 0, 7, 0, 5, 0, 8, 1], [0, 2, 0, 0, 7, 1, 4, 4, 5], [0, 6, 0, 0, 4, 0, 0, 0, 0], [8, 3, 0, 4, 2, 0, 0, 9, 7], [0, 0, 2, 3, 0, 2, 0, 6, 7], [4, 0, 4, 0, 3, 4, 7, 0, 7], [7, 1, 0, 0, 0, 0, 3, 0, 0], [3, 2, 0, 0, 4, 0, 0, 0, 0]], [[2, 5, 0, 0, 6, 0, 0, 0, 0], [2, 5, 5, 7, 0, 0, 6, 0, 1], [0, 3, 0, 0, 0, 1, 9, 4, 0], [0, 7, 0, 6, 0, 0, 0, 0, 0], [0, 9, 0, 0, 0, 1, 0, 0, 8], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 4, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 4], [0, 5, 0, 0, 0, 0, 0, 0, 0]], [[0, 5, 0, 0, 8, 0, 0, 0, 4], [0, 0, 0, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 2, 1, 0, 0, 3], [0, 1, 0, 0, 0, 0, 3, 0, 0], [1, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 8, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 9, 4, 0, 0, 0, 0, 0], [3, 0, 7, 0, 0, 2, 0, 0, 6]]], "outputs": [[[9, 7, 0], [4, 8, 4], [4, 0, 0]], [[0, 6, 0], [0, 8, 1], [4, 4, 5]], [[0, 0, 0], [6, 0, 1], [9, 4, 0]], [[0, 0, 4], [3, 0, 0], [0, 0, 3]]]}, "test_io": {"inputs": [[[6, 9, 0, 0, 1, 0, 5, 8, 9], [2, 9, 0, 6, 0, 8, 0, 9, 0], [0, 0, 0, 0, 0, 9, 9, 2, 0], [9, 2, 6, 0, 0, 8, 0, 6, 8], [7, 7, 4, 0, 7, 0, 9, 0, 0], [0, 0, 7, 0, 0, 1, 5, 7, 4], [4, 1, 0, 0, 7, 5, 0, 0, 9], [9, 9, 0, 0, 0, 0, 1, 0, 0], [4, 9, 2, 0, 0, 0, 8, 4, 0]]], "outputs": [[[5, 8, 9], [0, 9, 0], [9, 2, 0]]]}, "solved": true, "generalizable": true, "anpl": "def main(input_grid: np.ndarray) -> np.ndarray:\n    out = np.zeros((3, 3), dtype=int)\n    out = \"find the nine pixels in the upper right corner\"(input_grid)\n    return out", "python": "import numpy as np\nfrom typing import *\nblack, blue, red, green, yellow, grey, pink, orange, teal, maroon = range(10)\n\ndef find_upper_right_corner_pixels(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Given an input grid, this function returns a 3x3 numpy array containing the nine pixels in the upper right corner.\n    \n    Args:\n    input_grid: A numpy array representing the input grid.\n    \n    Returns:\n    A 3x3 numpy array containing the nine pixels in the upper right corner.\n    \"\"\"\n    return input_grid[:3, -3:]\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    out = np.zeros((3, 3), dtype=int)\n    out = find_upper_right_corner_pixels(input_grid)\n    return out"}