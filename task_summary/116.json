{"id": 116, "train_io": {"inputs": [[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 4, 0, 4, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 4, 0, 4, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 8, 8, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 0, 8, 0, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]]], "outputs": [[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 2, 0, 2, 0, 0, 2, 0, 0], [0, 0, 0, 2, 2, 0, 2, 0, 2, 0, 2, 2, 0, 0], [0, 0, 0, 0, 0, 2, 2, 0, 2, 2, 0, 0, 0, 0], [0, 0, 0, 0, 2, 2, 0, 0, 0, 2, 2, 0, 0, 0], [0, 0, 0, 2, 0, 0, 4, 0, 4, 0, 0, 2, 0, 0], [0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 4, 0, 4, 0, 0, 2, 0, 0], [0, 0, 0, 0, 2, 2, 0, 0, 0, 2, 2, 0, 0, 0], [0, 0, 0, 0, 0, 2, 2, 0, 2, 2, 0, 0, 0, 0], [0, 0, 0, 2, 2, 0, 2, 0, 2, 0, 2, 2, 0, 0], [0, 0, 0, 2, 0, 0, 2, 0, 2, 0, 0, 2, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 8, 8, 8, 0, 0, 0, 8, 8, 8, 0, 0, 0, 0], [0, 0, 8, 8, 8, 0, 8, 8, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 8, 8, 0, 8, 8, 8, 0, 0, 0, 0, 0], [0, 8, 8, 8, 0, 0, 0, 8, 8, 8, 0, 0, 0, 0], [0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0], [0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0], [0, 0, 0, 0, 8, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 0, 8, 0, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0], [0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0]]]}, "test_io": {"inputs": [[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 7, 0, 7, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 7, 0, 7, 0, 4, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 4, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]], "outputs": [[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 4, 0, 4, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 4, 0, 4, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 4, 4, 0, 0, 0, 4, 4, 0, 0, 0, 0, 0], [0, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0], [0, 0, 4, 0, 4, 4, 0, 4, 4, 0, 4, 0, 0, 0, 0], [0, 0, 0, 4, 0, 7, 0, 7, 0, 4, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 4, 0, 7, 0, 7, 0, 4, 0, 0, 0, 0, 0], [0, 0, 4, 0, 4, 4, 0, 4, 4, 0, 4, 0, 0, 0, 0], [0, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0], [0, 0, 0, 4, 4, 0, 0, 0, 4, 4, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 4, 0, 4, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 4, 0, 4, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]]}, "solved": true, "generalizable": false, "anpl": "def flip_columns_right(input_grid: np.ndarray, col: int) -> np.ndarray:\n    num = \"find the minimum number of columns left to the corresponding column or columns right to it\"(input_grid, col)\n    sub_grid = input_grid[:, col - num:col + num + 1]\n    sub_grid_flip = \"flip the grid left-right\"(sub_grid)\n    sub_grid_out = \"element-wise maximum\"(sub_grid, sub_grid_flip)\n    output_grid = np.copy(input_grid)\n    output_grid[:, col - num:col + num + 1] = sub_grid_out\n    return output_grid\n\ndef flip_rows_below(input_grid: np.ndarray, row: int) -> np.ndarray:\n    num = \"find the minimum number of rows above the corresponding row or rows below it\"(input_grid, row)\n    sub_grid = input_grid[row - num:row + num + 1, :]\n    sub_grid_flip = \"flip the grid upside down\"(sub_grid)\n    sub_grid_out = \"element-wise maximum\"(sub_grid, sub_grid_flip)\n    output_grid = np.copy(input_grid)\n    output_grid[row - num:row + num + 1, :] = sub_grid_out\n    return output_grid\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    color = \"find the least common color that exists in the grid\"(input_grid)\n    (x, y) = \"find the index of the most top left block that is the corresponding color in the grid\"(input_grid, color)\n    (x, y) = (x + 1, y + 1)\n    output_grid = np.copy(input_grid)\n    output_grid = flip_rows_below(output_grid, x)\n    output_grid = flip_columns_right(output_grid, y)\n    return output_grid", "python": "import numpy as np\nfrom typing import *\nblack, blue, red, green, yellow, grey, pink, orange, teal, maroon = range(10)\n\ndef flip_grid_left_right(input_grid: np.ndarray) -> np.ndarray:\n    return np.fliplr(input_grid)\n\ndef find_min_columns(input_grid: np.ndarray, col: int) -> int:\n    num_cols_left = col\n    num_cols_right = input_grid.shape[1] - col - 1\n    return min(num_cols_left, num_cols_right)\n\ndef elementwise_max(input_grid1: np.ndarray, input_grid2: np.ndarray) -> np.ndarray:\n    return np.maximum(input_grid1, input_grid2)\n\ndef flip_grid_upside_down(input_grid: np.ndarray) -> np.ndarray:\n    return np.flipud(input_grid)\n\ndef find_min_rows(input_grid: np.ndarray, row: int) -> int:\n    num_rows_above = row\n    num_rows_below = input_grid.shape[0] - row - 1\n    return min(num_rows_above, num_rows_below)\n\ndef flip_columns_right(input_grid: np.ndarray, col: int) -> np.ndarray:\n    num = find_min_columns(input_grid, col)\n    sub_grid = input_grid[:, col - num:col + num + 1]\n    sub_grid_flip = flip_grid_left_right(sub_grid)\n    sub_grid_out = elementwise_max(sub_grid, sub_grid_flip)\n    output_grid = np.copy(input_grid)\n    output_grid[:, col - num:col + num + 1] = sub_grid_out\n    return output_grid\n\ndef flip_rows_below(input_grid: np.ndarray, row: int) -> np.ndarray:\n    num = find_min_rows(input_grid, row)\n    sub_grid = input_grid[row - num:row + num + 1, :]\n    sub_grid_flip = flip_grid_upside_down(sub_grid)\n    sub_grid_out = elementwise_max(sub_grid, sub_grid_flip)\n    output_grid = np.copy(input_grid)\n    output_grid[row - num:row + num + 1, :] = sub_grid_out\n    return output_grid\n\ndef find_top_left_color_index(input_grid: np.ndarray, color: int) -> Tuple[int, int]:\n    for i in range(input_grid.shape[0]):\n        for j in range(input_grid.shape[1]):\n            if input_grid[i][j] == color:\n                return (i, j)\n    return (-1, -1)\n\ndef find_least_common_color(input_grid: np.ndarray) -> int:\n    colors, counts = np.unique(input_grid, return_counts=True)\n    return colors[np.argmin(counts)]\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    color = find_least_common_color(input_grid)\n    x, y = find_top_left_color_index(input_grid, color)\n    x, y = (x + 1, y + 1)\n    output_grid = np.copy(input_grid)\n    output_grid = flip_rows_below(output_grid, x)\n    output_grid = flip_columns_right(output_grid, y)\n    return output_grid"}