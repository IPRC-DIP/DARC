{"id": 10, "train_io": {"inputs": [[[2, 0, 0, 5, 0, 6, 2, 5, 0, 0, 4], [0, 4, 3, 5, 4, 0, 8, 5, 3, 0, 6], [6, 0, 0, 5, 3, 0, 0, 5, 8, 0, 2], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [3, 8, 0, 5, 6, 2, 0, 5, 0, 4, 8], [0, 0, 4, 5, 0, 0, 4, 5, 6, 0, 0], [6, 2, 0, 5, 3, 8, 0, 5, 0, 3, 2], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [0, 3, 6, 5, 0, 2, 0, 5, 0, 6, 0], [2, 0, 0, 5, 4, 0, 8, 5, 0, 0, 8], [8, 0, 4, 5, 6, 3, 0, 5, 2, 3, 4]], [[2, 0, 3, 5, 4, 6, 0, 5, 0, 6, 0], [0, 0, 8, 5, 0, 0, 2, 5, 4, 0, 3], [4, 6, 0, 5, 3, 8, 0, 5, 2, 0, 8], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [4, 0, 8, 5, 0, 0, 2, 5, 0, 6, 4], [0, 0, 2, 5, 0, 3, 0, 5, 3, 0, 0], [3, 0, 6, 5, 4, 0, 6, 5, 8, 0, 2], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [3, 6, 0, 5, 0, 8, 4, 5, 2, 0, 0], [0, 8, 4, 5, 2, 0, 0, 5, 8, 0, 3], [2, 0, 0, 5, 0, 3, 6, 5, 6, 4, 0]], [[0, 3, 0, 5, 0, 6, 3, 5, 0, 6, 2], [6, 0, 4, 5, 2, 8, 0, 5, 0, 0, 8], [0, 2, 8, 5, 0, 4, 0, 5, 3, 0, 4], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [0, 2, 0, 5, 4, 0, 3, 5, 3, 4, 0], [4, 0, 8, 5, 2, 0, 6, 5, 0, 0, 2], [3, 6, 0, 5, 0, 8, 0, 5, 8, 6, 0], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [6, 3, 0, 5, 0, 3, 0, 5, 0, 0, 3], [0, 0, 2, 5, 0, 6, 4, 5, 2, 8, 0], [8, 4, 0, 5, 2, 0, 0, 5, 4, 0, 6]], [[3, 8, 4, 5, 4, 6, 0, 5, 2, 0, 8], [0, 0, 0, 5, 8, 0, 3, 5, 6, 0, 3], [6, 2, 0, 5, 0, 2, 0, 5, 4, 0, 0], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [0, 4, 2, 5, 8, 0, 3, 5, 0, 4, 0], [0, 8, 6, 5, 0, 0, 4, 5, 0, 2, 6], [0, 3, 0, 5, 2, 6, 0, 5, 0, 3, 0], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [0, 6, 0, 5, 6, 2, 0, 5, 3, 6, 0], [3, 0, 8, 5, 0, 8, 3, 5, 0, 0, 4], [4, 2, 0, 5, 0, 0, 4, 5, 2, 0, 8]]], "outputs": [[[2, 2, 2, 5, 0, 0, 0, 5, 0, 0, 0], [2, 2, 2, 5, 0, 0, 0, 5, 0, 0, 0], [2, 2, 2, 5, 0, 0, 0, 5, 0, 0, 0], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [0, 0, 0, 5, 4, 4, 4, 5, 3, 3, 3], [0, 0, 0, 5, 4, 4, 4, 5, 3, 3, 3], [0, 0, 0, 5, 4, 4, 4, 5, 3, 3, 3], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [6, 6, 6, 5, 0, 0, 0, 5, 0, 0, 0], [6, 6, 6, 5, 0, 0, 0, 5, 0, 0, 0], [6, 6, 6, 5, 0, 0, 0, 5, 0, 0, 0]], [[0, 0, 0, 5, 0, 0, 0, 5, 2, 2, 2], [0, 0, 0, 5, 0, 0, 0, 5, 2, 2, 2], [0, 0, 0, 5, 0, 0, 0, 5, 2, 2, 2], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [0, 0, 0, 5, 3, 3, 3, 5, 0, 0, 0], [0, 0, 0, 5, 3, 3, 3, 5, 0, 0, 0], [0, 0, 0, 5, 3, 3, 3, 5, 0, 0, 0], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [4, 4, 4, 5, 0, 0, 0, 5, 6, 6, 6], [4, 4, 4, 5, 0, 0, 0, 5, 6, 6, 6], [4, 4, 4, 5, 0, 0, 0, 5, 6, 6, 6]], [[0, 0, 0, 5, 3, 3, 3, 5, 0, 0, 0], [0, 0, 0, 5, 3, 3, 3, 5, 0, 0, 0], [0, 0, 0, 5, 3, 3, 3, 5, 0, 0, 0], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [0, 0, 0, 5, 6, 6, 6, 5, 4, 4, 4], [0, 0, 0, 5, 6, 6, 6, 5, 4, 4, 4], [0, 0, 0, 5, 6, 6, 6, 5, 4, 4, 4], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [2, 2, 2, 5, 0, 0, 0, 5, 0, 0, 0], [2, 2, 2, 5, 0, 0, 0, 5, 0, 0, 0], [2, 2, 2, 5, 0, 0, 0, 5, 0, 0, 0]], [[0, 0, 0, 5, 4, 4, 4, 5, 0, 0, 0], [0, 0, 0, 5, 4, 4, 4, 5, 0, 0, 0], [0, 0, 0, 5, 4, 4, 4, 5, 0, 0, 0], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [0, 0, 0, 5, 2, 2, 2, 5, 6, 6, 6], [0, 0, 0, 5, 2, 2, 2, 5, 6, 6, 6], [0, 0, 0, 5, 2, 2, 2, 5, 6, 6, 6], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [0, 0, 0, 5, 3, 3, 3, 5, 0, 0, 0], [0, 0, 0, 5, 3, 3, 3, 5, 0, 0, 0], [0, 0, 0, 5, 3, 3, 3, 5, 0, 0, 0]]]}, "test_io": {"inputs": [[[6, 4, 0, 5, 0, 3, 0, 5, 0, 4, 0], [0, 0, 3, 5, 2, 8, 6, 5, 8, 0, 2], [2, 0, 8, 5, 4, 0, 0, 5, 6, 3, 0], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [2, 0, 0, 5, 0, 3, 0, 5, 3, 6, 2], [3, 4, 6, 5, 8, 4, 2, 5, 0, 0, 4], [0, 8, 0, 5, 0, 0, 6, 5, 8, 0, 0], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [0, 2, 4, 5, 0, 6, 4, 5, 0, 2, 8], [0, 6, 3, 5, 0, 0, 3, 5, 4, 0, 6], [0, 0, 0, 5, 2, 0, 8, 5, 3, 0, 0]]], "outputs": [[[0, 0, 0, 5, 2, 2, 2, 5, 4, 4, 4], [0, 0, 0, 5, 2, 2, 2, 5, 4, 4, 4], [0, 0, 0, 5, 2, 2, 2, 5, 4, 4, 4], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [0, 0, 0, 5, 6, 6, 6, 5, 3, 3, 3], [0, 0, 0, 5, 6, 6, 6, 5, 3, 3, 3], [0, 0, 0, 5, 6, 6, 6, 5, 3, 3, 3], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [0, 0, 0, 5, 0, 0, 0, 5, 0, 0, 0], [0, 0, 0, 5, 0, 0, 0, 5, 0, 0, 0], [0, 0, 0, 5, 0, 0, 0, 5, 0, 0, 0]]]}, "solved": true, "generalizable": true, "anpl": "def main(input_grid: np.ndarray) -> np.ndarray:\n    output_grid = np.zeros((9, 9))\n    remove_grey_input_grid = \"remove the 4-th, 8-th column and 4-th, 8-th row \"(input_grid)\n    sub_blocks = \"seperate the input grid into 9 3x3 sub block\"(remove_grey_input_grid)\n    output_block = \"find the block contains 4 non black elements \"(sub_blocks)\n    output_grid = \"for elements in output_block, set the i-th 3x3 block in output_grid to the color of the element\"(output_grid, output_block)\n    output_grid = \"add grey lines average 3 rows or column to make the 9x9 input grid to the 11x11 output grid\"(output_grid)\n    return output_grid", "python": "import numpy as np\nfrom typing import *\nblack, blue, red, green, yellow, grey, pink, orange, teal, maroon = range(10)\n\ndef add_grey_lines(input_grid: np.ndarray) -> np.ndarray:\n    output_grid = np.zeros((11, 11))\n    for i in range(11):\n        for j in range(11):\n            if i % 4 == 3 or j % 4 == 3:\n                output_grid[i][j] = grey\n            else:\n                output_grid[i][j] = input_grid[i - i // 4][j - j // 4]\n    return output_grid\n\ndef set_block_colors(output_grid: np.ndarray, output_block: np.ndarray) -> np.ndarray:\n    for i, element in enumerate(output_block.flatten()):\n        if element != black:\n            row = i // 3 * 3\n            col = i % 3 * 3\n            output_grid[row:row + 3, col:col + 3] = element\n    return output_grid\n\ndef find_block_with_4_non_black_elements(sub_blocks: List[np.ndarray]) -> np.ndarray:\n    for block in sub_blocks:\n        if np.count_nonzero(block != black) == 4:\n            return block\n    return np.zeros((3, 3))\n\ndef separate_sub_blocks(input_grid: np.ndarray) -> List[np.ndarray]:\n    sub_blocks = []\n    for i in range(0, 9, 3):\n        for j in range(0, 9, 3):\n            sub_blocks.append(input_grid[i:i + 3, j:j + 3])\n    return sub_blocks\n\ndef remove_rows_cols(input_grid: np.ndarray) -> np.ndarray:\n    return np.delete(np.delete(input_grid, [3, 7], axis=1), [3, 7], axis=0)\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    output_grid = np.zeros((9, 9))\n    remove_grey_input_grid = remove_rows_cols(input_grid)\n    sub_blocks = separate_sub_blocks(remove_grey_input_grid)\n    output_block = find_block_with_4_non_black_elements(sub_blocks)\n    output_grid = set_block_colors(output_grid, output_block)\n    output_grid = add_grey_lines(output_grid)\n    return output_grid"}