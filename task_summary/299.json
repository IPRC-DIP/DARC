{"id": 299, "train_io": {"inputs": [[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 2, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 0, 3, 0, 0, 1, 0, 0, 0], [0, 0, 2, 2, 0, 0, 0, 0, 1, 1, 0, 0, 0], [0, 2, 2, 2, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 6, 6, 0], [0, 3, 0, 0, 4, 4, 0, 0, 6, 0], [3, 3, 3, 0, 4, 4, 0, 0, 0, 0], [0, 3, 0, 0, 4, 4, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 8, 8, 0, 0, 0, 0, 7, 7, 0], [0, 0, 8, 0, 0, 0, 2, 0, 0, 7, 0], [0, 8, 8, 0, 0, 2, 2, 0, 0, 7, 0], [0, 8, 8, 0, 0, 0, 2, 0, 0, 7, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 7, 0, 0, 2, 2, 2], [0, 0, 0, 7, 7, 0, 0, 2, 0], [0, 0, 0, 0, 7, 0, 2, 2, 2], [8, 8, 8, 0, 0, 0, 0, 0, 0], [0, 8, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]]], "outputs": [[[2, 2, 0], [0, 2, 0], [0, 2, 2], [2, 2, 2]], [[4, 4], [4, 4], [4, 4]], [[8, 8, 8], [0, 8, 0], [8, 8, 0], [8, 8, 0]], [[2, 2, 2], [0, 2, 0], [2, 2, 2]]]}, "test_io": {"inputs": [[[0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 0, 0, 0, 0, 0, 0, 0, 0], [4, 4, 0, 3, 3, 3, 0, 0, 0], [0, 4, 0, 3, 3, 3, 0, 0, 0], [0, 0, 0, 3, 0, 3, 0, 0, 0], [0, 0, 0, 3, 0, 3, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 6, 6], [0, 5, 5, 5, 0, 0, 6, 6, 6], [0, 5, 5, 0, 0, 0, 6, 6, 0]]], "outputs": [[[3, 3, 3], [3, 3, 3], [3, 0, 3], [3, 0, 3]]]}, "solved": true, "generalizable": false, "anpl": "import numpy as np\nfrom typing import *\n(black, blue, red, green, yellow, grey, pink, orange, teal, maroon) = range(10)\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    ele_lists = `find the non black element lists, each color element corrsponding to a list, return the final lists `(input_grid)\n    longest_list = `find the longest list in input lists`(ele_lists)\n    output_grid = `find the output block of the max and min position in longest list in input_grid`(input_grid, longest_list)\n    return output_grid", "python": "import numpy as np\nfrom typing import *\nblack, blue, red, green, yellow, grey, pink, orange, teal, maroon = range(10)\n\ndef find_output_block(input_grid: np.ndarray, longest_list: List[Tuple[int, int]]) -> np.ndarray:\n    \"\"\"\n    Given a 2D numpy array and a list of tuples representing positions, returns a new 2D numpy array containing the\n    block of elements defined by the maximum and minimum positions in the input list.\n    \n    Args:\n    input_grid: A 2D numpy array of integers representing the color of each element.\n    longest_list: A list of tuples representing positions of elements in the input array.\n    \n    Returns:\n    A new 2D numpy array containing the block of elements defined by the maximum and minimum positions in the input list.\n    \"\"\"\n    max_pos = max(longest_list)\n    min_pos = min(longest_list)\n    return input_grid[min_pos[0]:max_pos[0] + 1, min_pos[1]:max_pos[1] + 1]\n\ndef find_longest_list(input_lists: List[List]) -> List:\n    \"\"\"\n    Given a list of lists, returns the longest list in the input list.\n    \n    Args:\n    input_lists: A list of lists.\n    \n    Returns:\n    The longest list in the input list.\n    \"\"\"\n    return max(input_lists, key=len)\n\ndef find_color_positions(input_grid: np.ndarray) -> List[List[Tuple[int, int]]]:\n    \"\"\"\n    Given a 2D numpy array, returns a list of lists where each inner list contains the positions of non-black elements\n    of a specific color in the input array.\n    \n    Args:\n    input_grid: A 2D numpy array of integers representing the color of each element.\n    \n    Returns:\n    A list of lists where each inner list contains the positions of non-black elements of a specific color in the input array.\n    \"\"\"\n    color_lists = [[] for _ in range(10)]\n    for i in range(input_grid.shape[0]):\n        for j in range(input_grid.shape[1]):\n            if input_grid[i][j] != black:\n                color_lists[input_grid[i][j]].append((i, j))\n    return color_lists\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    ele_lists = find_color_positions(input_grid)\n    longest_list = find_longest_list(ele_lists)\n    output_grid = find_output_block(input_grid, longest_list)\n    return output_grid"}