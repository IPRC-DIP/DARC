{"id": 120, "train_io": {"inputs": [[[0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0], [0, 3, 3, 3, 0, 0, 0, 0, 0, 4, 8, 4, 0], [0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 6, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 3, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 0, 0, 0, 0, 0, 3, 0, 3, 0, 0], [0, 2, 2, 0, 0, 0, 0, 0, 3, 3, 3, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]], "outputs": [[[0, 4, 0], [4, 4, 4], [0, 4, 0]], [[0, 3, 3], [3, 3, 0], [0, 3, 3]], [[2, 2, 2], [0, 2, 0], [2, 2, 0]]]}, "test_io": {"inputs": [[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 8, 7, 0], [0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0], [0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]], "outputs": [[[0, 7, 7], [7, 7, 7], [0, 7, 0]]]}, "solved": true, "generalizable": true, "anpl": "def main(input_grid: np.ndarray) -> np.ndarray:\n    flag = False\n    for i in range(input_grid.shape[0]):\n        for j in range(input_grid.shape[1]):\n            surroding_pixels = \"Get the (i, j)'s surrouding pixels of the 3x3 grid in the input_grid except for itself\"(i, j, input_grid)\n            if surroding_pixels != [black] * 9 and input_grid[i, j] not in surroding_pixels and (not flag):\n                flag = True\n                special_pixels = (i, j)\n    input_grid = \"change the input grid special_pixels' color to its surrounding pixels' color, except for black\"(input_grid, special_pixels)\n    output_grid = \"extract the 3x3 grid from the input_grid whose center is the special pixles\"(input_grid, special_pixels)\n    return output_grid", "python": "import numpy as np\nfrom typing import *\nblack, blue, red, green, yellow, grey, pink, orange, teal, maroon = range(10)\n\ndef extract_3x3_grid(input_grid: np.ndarray, special_pixels: Tuple[int, int]) -> np.ndarray:\n    \"\"\"\n    This function takes in the input grid as a numpy array and the special pixel's indices as a tuple.\n    It extracts the 3x3 grid from the input_grid whose center is the special pixel.\n    It returns the extracted 3x3 grid.\n    \"\"\"\n    i, j = special_pixels\n    return input_grid[i - 1:i + 2, j - 1:j + 2]\n\ndef change_special_pixel_color(input_grid: np.ndarray, special_pixels: Tuple[int, int]) -> np.ndarray:\n    \"\"\"\n    This function takes in the input grid as a numpy array and the special pixel's indices as a tuple.\n    It changes the color of the special pixel to the color of its surrounding pixels, except for black.\n    It returns the updated input grid.\n    \"\"\"\n    i, j = special_pixels\n    surrounding_pixels = get_surrounding_pixels(i, j, input_grid)\n    new_color = [color for color in surrounding_pixels if color != black][0]\n    input_grid[i, j] = new_color\n    return input_grid\n\ndef get_surrounding_pixels(i: int, j: int, input_grid: np.ndarray) -> List[int]:\n    \"\"\"\n    This function takes in the row index i, column index j, and the input grid as a numpy array.\n    It returns a list of the surrounding pixels of the 3x3 grid in the input_grid except for itself.\n    \"\"\"\n    return [input_grid[x, y] for x in range(i - 1, i + 2) for y in range(j - 1, j + 2) if 0 <= x < input_grid.shape[0] and 0 <= y < input_grid.shape[1] and ((x, y) != (i, j))]\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    flag = False\n    for i in range(input_grid.shape[0]):\n        for j in range(input_grid.shape[1]):\n            surroding_pixels = get_surrounding_pixels(i, j, input_grid)\n            if surroding_pixels != [black] * 9 and input_grid[i, j] not in surroding_pixels and (not flag):\n                flag = True\n                special_pixels = (i, j)\n    input_grid = change_special_pixel_color(input_grid, special_pixels)\n    output_grid = extract_3x3_grid(input_grid, special_pixels)\n    return output_grid"}