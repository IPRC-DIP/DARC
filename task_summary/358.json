{"id": 358, "train_io": {"inputs": [[[1, 1, 1, 1, 1, 8, 8, 8, 3, 3, 3, 3, 2, 2, 2, 8, 2], [9, 5, 1, 5, 1, 8, 8, 8, 3, 3, 3, 3, 2, 2, 2, 2, 2], [4, 1, 1, 2, 1, 8, 8, 5, 3, 3, 8, 3, 2, 8, 2, 2, 7], [1, 1, 1, 1, 1, 8, 8, 2, 3, 3, 3, 3, 2, 2, 2, 2, 2], [9, 1, 1, 1, 8, 8, 8, 8, 3, 3, 4, 3, 8, 2, 2, 2, 2], [4, 1, 2, 1, 1, 7, 8, 8, 3, 3, 3, 3, 2, 2, 6, 2, 9], [1, 1, 1, 1, 9, 8, 8, 8, 9, 3, 3, 3, 4, 2, 6, 2, 2], [1, 1, 1, 1, 1, 8, 5, 8, 3, 3, 3, 4, 2, 2, 2, 2, 3], [1, 1, 1, 9, 1, 8, 8, 8, 3, 3, 3, 3, 2, 2, 2, 2, 2], [6, 1, 1, 8, 1, 5, 8, 8, 4, 3, 3, 3, 6, 4, 2, 2, 7], [1, 1, 1, 1, 1, 8, 8, 8, 3, 3, 3, 3, 2, 2, 6, 2, 2], [1, 1, 1, 1, 1, 8, 8, 8, 3, 3, 7, 3, 2, 2, 2, 2, 2], [1, 2, 1, 4, 1, 8, 8, 8, 3, 3, 3, 3, 2, 9, 2, 1, 2]], [[2, 2, 2, 2, 2, 8, 8, 1, 8, 8, 8, 1, 1, 1], [2, 2, 8, 2, 2, 8, 8, 8, 8, 8, 8, 1, 1, 1], [2, 2, 2, 2, 2, 8, 8, 9, 8, 8, 8, 1, 1, 1], [2, 2, 2, 2, 2, 8, 9, 8, 6, 8, 8, 1, 1, 1], [2, 2, 2, 2, 2, 8, 8, 8, 8, 8, 8, 1, 1, 1], [2, 2, 2, 2, 2, 8, 8, 8, 8, 8, 5, 1, 1, 1], [2, 2, 2, 6, 2, 8, 8, 8, 8, 8, 5, 1, 1, 6], [2, 6, 4, 2, 2, 9, 8, 8, 8, 8, 8, 1, 1, 1], [2, 2, 2, 2, 2, 6, 8, 7, 8, 8, 8, 1, 1, 2], [2, 2, 2, 6, 2, 8, 3, 8, 5, 8, 8, 3, 1, 1], [2, 2, 2, 2, 5, 8, 2, 8, 5, 8, 8, 1, 1, 1], [2, 2, 2, 2, 2, 8, 8, 8, 8, 8, 8, 8, 1, 3], [2, 8, 2, 2, 2, 8, 8, 8, 8, 3, 8, 9, 1, 1]], [[3, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 2, 3, 3, 2, 3, 3, 3, 3, 3], [3, 3, 3, 9, 3, 3, 3, 2, 3, 3, 3, 9, 3, 3], [3, 3, 4, 3, 3, 2, 3, 3, 3, 3, 3, 3, 3, 3], [7, 7, 7, 7, 7, 7, 8, 7, 7, 3, 3, 7, 7, 4], [9, 7, 7, 7, 3, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 2], [7, 7, 7, 7, 7, 5, 7, 7, 7, 7, 7, 7, 5, 8], [7, 7, 7, 7, 7, 7, 3, 7, 7, 7, 7, 2, 7, 7], [7, 7, 7, 4, 6, 7, 7, 7, 7, 7, 9, 7, 7, 7], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 3, 8, 8], [8, 8, 8, 4, 8, 8, 8, 7, 9, 8, 8, 8, 8, 8], [1, 1, 1, 5, 1, 1, 1, 1, 1, 1, 9, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 9, 1, 1, 1]]], "outputs": [[[1, 1, 1, 1, 1, 8, 8, 8, 3, 3, 3, 3, 2, 2, 2, 2, 2], [1, 1, 1, 1, 1, 8, 8, 8, 3, 3, 3, 3, 2, 2, 2, 2, 2], [1, 1, 1, 1, 1, 8, 8, 8, 3, 3, 3, 3, 2, 2, 2, 2, 2], [1, 1, 1, 1, 1, 8, 8, 8, 3, 3, 3, 3, 2, 2, 2, 2, 2], [1, 1, 1, 1, 1, 8, 8, 8, 3, 3, 3, 3, 2, 2, 2, 2, 2], [1, 1, 1, 1, 1, 8, 8, 8, 3, 3, 3, 3, 2, 2, 2, 2, 2], [1, 1, 1, 1, 1, 8, 8, 8, 3, 3, 3, 3, 2, 2, 2, 2, 2], [1, 1, 1, 1, 1, 8, 8, 8, 3, 3, 3, 3, 2, 2, 2, 2, 2], [1, 1, 1, 1, 1, 8, 8, 8, 3, 3, 3, 3, 2, 2, 2, 2, 2], [1, 1, 1, 1, 1, 8, 8, 8, 3, 3, 3, 3, 2, 2, 2, 2, 2], [1, 1, 1, 1, 1, 8, 8, 8, 3, 3, 3, 3, 2, 2, 2, 2, 2], [1, 1, 1, 1, 1, 8, 8, 8, 3, 3, 3, 3, 2, 2, 2, 2, 2], [1, 1, 1, 1, 1, 8, 8, 8, 3, 3, 3, 3, 2, 2, 2, 2, 2]], [[2, 2, 2, 2, 2, 8, 8, 8, 8, 8, 8, 1, 1, 1], [2, 2, 2, 2, 2, 8, 8, 8, 8, 8, 8, 1, 1, 1], [2, 2, 2, 2, 2, 8, 8, 8, 8, 8, 8, 1, 1, 1], [2, 2, 2, 2, 2, 8, 8, 8, 8, 8, 8, 1, 1, 1], [2, 2, 2, 2, 2, 8, 8, 8, 8, 8, 8, 1, 1, 1], [2, 2, 2, 2, 2, 8, 8, 8, 8, 8, 8, 1, 1, 1], [2, 2, 2, 2, 2, 8, 8, 8, 8, 8, 8, 1, 1, 1], [2, 2, 2, 2, 2, 8, 8, 8, 8, 8, 8, 1, 1, 1], [2, 2, 2, 2, 2, 8, 8, 8, 8, 8, 8, 1, 1, 1], [2, 2, 2, 2, 2, 8, 8, 8, 8, 8, 8, 1, 1, 1], [2, 2, 2, 2, 2, 8, 8, 8, 8, 8, 8, 1, 1, 1], [2, 2, 2, 2, 2, 8, 8, 8, 8, 8, 8, 1, 1, 1], [2, 2, 2, 2, 2, 8, 8, 8, 8, 8, 8, 1, 1, 1]], [[3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]]}, "test_io": {"inputs": [[[6, 1, 1, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 4, 1, 1, 9, 1, 1, 1, 1, 5, 1, 1, 1, 1, 1], [5, 1, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [7, 2, 2, 2, 2, 6, 2, 9, 2, 2, 4, 2, 4, 2, 2], [2, 2, 9, 2, 1, 2, 2, 2, 3, 2, 2, 8, 2, 7, 2], [2, 5, 2, 2, 5, 6, 6, 2, 2, 2, 3, 2, 5, 2, 2], [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 6, 2, 8, 2, 2], [1, 8, 8, 8, 8, 8, 9, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 1, 8, 8, 8, 8, 8, 7, 8, 8, 8, 9], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 5, 8, 8, 8, 1, 8, 8], [4, 4, 4, 4, 4, 4, 7, 3, 4, 4, 4, 4, 4, 2, 4], [4, 4, 7, 4, 4, 4, 4, 4, 4, 4, 8, 4, 4, 4, 4], [3, 3, 1, 9, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [8, 6, 3, 3, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]]], "outputs": [[[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]]]}, "solved": true, "generalizable": true, "anpl": null, "python": "import numpy as np\nfrom typing import *\nblack, blue, red, green, yellow, grey, pink, orange, teal, maroon = range(10)\n\ndef rotate_270(grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Rotate the input grid by 270 degrees.\n    :param grid: 2D numpy array representing the input grid\n    :return: 2D numpy array representing the rotated grid\n    \"\"\"\n    return np.rot90(grid, k=3)\n\ndef extend_column_to_grid(column: np.ndarray, n: int) -> np.ndarray:\n    \"\"\"\n    Extend a column to a grid with n columns.\n    :param column: 1D numpy array representing the column to be extended\n    :param n: integer representing the number of columns in the output grid\n    :return: 2D numpy array representing the output grid\n    \"\"\"\n    return np.tile(column, (n, 1)).T\n\ndef rotate_if_needed(input_grid: np.ndarray, colors: List[int]) -> Tuple[bool, np.ndarray]:\n    \"\"\"\n    If the most frequent color in each row occurs less than 50% of the time, rotate the input grid by 90 degrees.\n    :param input_grid: 2D numpy array representing the input grid\n    :param colors: List of most frequent colors in each row\n    :return: Tuple of boolean indicating whether the grid was rotated and the rotated grid\n    \"\"\"\n    threshold = input_grid.shape[1] // 2\n    has_rotate = False\n    for i, row in enumerate(input_grid):\n        if np.count_nonzero(row == colors[i]) < threshold:\n            input_grid = np.rot90(input_grid)\n            has_rotate = True\n            break\n    return (has_rotate, input_grid)\n\ndef find_most_frequent_color_in_row(grid: np.ndarray) -> List[int]:\n    \"\"\"\n    Find the color with the most occurrences in each row of the input grid.\n    :param grid: 2D numpy array representing the input grid\n    :return: List of integers representing the most frequent color in each row\n    \"\"\"\n    return [np.bincount(row).argmax() for row in grid]\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    colors = find_most_frequent_color_in_row(input_grid)\n    has_rotate, input_grid = rotate_if_needed(input_grid, colors)\n    colors = find_most_frequent_color_in_row(input_grid)\n    output_grid = extend_column_to_grid(np.array(colors), n=input_grid.shape[1])\n    if has_rotate:\n        output_grid = rotate_270(output_grid)\n    return output_grid"}