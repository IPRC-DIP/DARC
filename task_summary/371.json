{"id": 371, "train_io": {"inputs": [[[0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 8, 0, 0, 0, 8, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 0, 0, 0, 0, 0, 0, 0, 8, 0], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]], [[0, 3, 0, 0, 0, 3, 0, 0, 0, 3, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 3, 0, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7], [7, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0], [0, 0, 7, 0, 7, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 0, 0, 0, 0, 0, 7, 0, 0, 0, 7]], [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0]]], "outputs": [[[0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0], [0, 0, 0, 8, 0, 0, 0, 8, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0], [1, 8, 0, 0, 0, 0, 0, 0, 0, 8, 1]], [[0, 3, 0, 0, 0, 3, 0, 0, 0, 3, 7], [7, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0], [0, 0, 7, 3, 7, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 3, 0, 0, 0, 0, 7, 0, 0, 0, 7]], [[2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2], [0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0], [2, 0, 0, 0, 2, 0, 0, 0, 2, 0, 1]]]}, "test_io": {"inputs": [[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7], [0, 0, 7, 7, 0, 0, 0, 0, 7, 0, 0], [0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0], [0, 7, 0, 7, 0, 0, 0, 0, 0, 0, 7], [0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [6, 0, 0, 0, 6, 0, 6, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6], [6, 0, 0, 0, 6, 0, 0, 0, 0, 0, 6], [0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0], [6, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0]]], "outputs": [[[6, 0, 0, 0, 6, 0, 6, 0, 0, 0, 7], [0, 0, 7, 7, 0, 0, 0, 0, 7, 0, 6], [6, 0, 0, 0, 6, 0, 7, 0, 0, 0, 6], [0, 7, 0, 7, 0, 0, 0, 0, 0, 6, 7], [6, 0, 0, 6, 0, 0, 7, 0, 0, 0, 0]]]}, "solved": true, "generalizable": true, "anpl": "import numpy as np\nfrom typing import *\n(black, blue, red, green, yellow, grey, pink, orange, teal, maroon) = range(10)\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    (sub1, sub2) = `there is a grey line, find the line, then split the input_grid along the grey line`(input_grid)\n    new = `the 2 grid should have the same shape, and creat a grid in the shape of sub1`(sub1, sub2)\n    out = `copy the not black pixels, grey is ok, in sub2 to new at the same position`(sub1, sub2, new)\n    return out", "python": "import numpy as np\nfrom typing import *\nblack, blue, red, green, yellow, grey, pink, orange, teal, maroon = range(10)\n\ndef copy_non_grey_pixels(sub1: np.ndarray, sub2: np.ndarray, new: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Copies the non-grey pixels from sub2 to new at the same position.\n\n    Args:\n    sub1: A numpy array representing the first sub-grid.\n    sub2: A numpy array representing the second sub-grid.\n    new: A numpy array representing the new grid.\n\n    Returns:\n    A numpy array representing the updated new grid.\n    \"\"\"\n    height, width = sub1.shape\n    for i in range(height):\n        for j in range(width):\n            if sub2[i][j] != black and sub1[i][j] != grey:\n                new[i][j] = sub2[i][j]\n    return new\n\ndef create_new_grid(sub1: np.ndarray, sub2: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Creates a new grid in the shape of sub1 using sub1 and sub2.\n\n    Args:\n    sub1: A numpy array representing the first sub-grid.\n    sub2: A numpy array representing the second sub-grid.\n\n    Returns:\n    A numpy array representing the new grid.\n    \"\"\"\n    height, width = sub1.shape\n    new = np.zeros((height, width), dtype=int)\n    for i in range(height):\n        for j in range(width):\n            if sub1[i][j] == grey:\n                new[i][j] = sub2[i][j]\n            else:\n                new[i][j] = sub1[i][j]\n    return new\n\ndef split_along_grey_line(input_grid: np.ndarray) -> Tuple[np.ndarray, np.ndarray]:\n    \"\"\"\n    Finds the grey line in the input grid and splits it into two sub-grids.\n\n    Args:\n    input_grid: A numpy array representing the input grid.\n\n    Returns:\n    A tuple of two numpy arrays representing the two sub-grids.\n    \"\"\"\n    height, width = input_grid.shape\n    grey_line = None\n    for i in range(height):\n        if grey_line is not None:\n            break\n        for j in range(width):\n            if input_grid[i][j] == grey:\n                grey_line = i\n                break\n    sub1 = input_grid[:grey_line, :]\n    sub2 = input_grid[grey_line + 1:, :]\n    return (sub1, sub2)\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    sub1, sub2 = split_along_grey_line(input_grid)\n    new = create_new_grid(sub1, sub2)\n    out = copy_non_grey_pixels(sub1, sub2, new)\n    return out"}