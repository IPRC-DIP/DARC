{"id": 379, "train_io": {"inputs": [[[9, 0, 0], [9, 9, 9], [9, 9, 9]], [[6, 6, 6], [0, 0, 0], [6, 6, 0]], [[0, 0, 9], [0, 0, 9], [9, 9, 9]], [[2, 0, 2], [0, 0, 2], [0, 2, 2]]], "outputs": [[[0, 9, 9], [0, 9, 9], [9, 9, 9]], [[6, 0, 0], [6, 0, 6], [6, 0, 6]], [[9, 9, 9], [0, 0, 9], [0, 0, 9]], [[2, 2, 2], [0, 0, 2], [2, 0, 0]]]}, "test_io": {"inputs": [[[0, 0, 0], [5, 0, 0], [0, 5, 5]]], "outputs": [[[0, 0, 5], [0, 0, 5], [0, 5, 0]]]}, "solved": true, "generalizable": true, "anpl": "import numpy as np\nfrom typing import *\n(black, blue, red, green, yellow, grey, pink, orange, teal, maroon) = range(10)\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    output_grid = `rotate it 90 degrees counterclockwise`(input_grid)\n    return output_grid", "python": "import numpy as np\nfrom typing import *\nblack, blue, red, green, yellow, grey, pink, orange, teal, maroon = range(10)\n\ndef rotate_90_counterclockwise(input_grid: np.ndarray) -> np.ndarray:\n    return np.rot90(input_grid, k=1)\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    output_grid = rotate_90_counterclockwise(input_grid)\n    return output_grid"}