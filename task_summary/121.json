{"id": 121, "train_io": {"inputs": [[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 3, 2, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0], [2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 3, 0, 0], [0, 0, 0, 2, 2, 2, 0], [0, 0, 0, 2, 3, 2, 0], [0, 0, 0, 2, 2, 2, 0], [0, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 3, 0, 0]], [[0, 0, 3, 0, 0, 0, 0], [0, 2, 2, 2, 0, 0, 0], [0, 2, 3, 2, 0, 0, 0], [0, 2, 2, 2, 0, 0, 0], [0, 0, 3, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 3, 0, 0, 0, 0]]], "outputs": [[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 3, 2, 3, 2, 3, 0, 3, 0, 3, 0, 3, 0], [0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 3, 0, 0], [0, 0, 0, 2, 2, 2, 0], [0, 0, 0, 2, 3, 2, 0], [0, 0, 0, 2, 2, 2, 0], [0, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 3, 0, 0]], [[0, 0, 3, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 3, 0, 0, 0, 0], [0, 2, 2, 2, 0, 0, 0], [0, 2, 3, 2, 0, 0, 0], [0, 2, 2, 2, 0, 0, 0], [0, 0, 3, 0, 0, 0, 0]]]}, "test_io": {"inputs": [[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0], [3, 0, 3, 0, 3, 0, 3, 2, 3, 2, 3, 0, 3, 0, 3, 0, 3], [0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]], "outputs": [[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0], [3, 0, 3, 0, 3, 0, 3, 0, 3, 2, 3, 2, 3, 0, 3, 0, 3], [0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]]}, "solved": true, "generalizable": false, "anpl": "def move_red_pixels(input_grid: np.ndarray, output_grid: np.ndarray, green_directions: List[str]) -> np.ndarray:\n    \"\"\"                                                                                                                                                                   \n    This function takes an input grid, an output grid, and a list of directions of the green pixels.                                                                      \n    It moves the red pixels right for two pixels if the green pixels are in a row.                                                                                        \n    It moves the red pixels down for two pixels if the green pixels are in a column.                                                                                      \n    \"\"\"\n    if 'row' in green_directions:\n        for i in range(input_grid.shape[0]):\n            for j in range(input_grid.shape[1]):\n                if red == input_grid[i, j]:\n                    output_grid[i, j] = 0\n    elif 'col' in green_directions:\n        for j in range(input_grid.shape[1]):\n            for i in range(input_grid.shape[0]):\n                if red == input_grid[i, j]:\n                    output_grid[i, j] = 0\n    if 'row' in green_directions:\n        for i in range(input_grid.shape[0]):\n            for j in range(input_grid.shape[1]):\n                if red == input_grid[i, j]:\n                    output_grid[i, j + 2] = red\n    elif 'col' in green_directions:\n        for j in range(input_grid.shape[1]):\n            for i in range(input_grid.shape[0]):\n                if red == input_grid[i, j]:\n                    output_grid[i + 2, j] = red\n    return output_grid\n\ndef find_green_directions(input_grid: np.ndarray) -> List[str]:\n    \"\"\"                                                                                                                                                                   \n    This function takes an input grid and returns a list of directions of the green pixels.                                                                               \n    If the green pixels are in a row, the direction is 'row'.                                                                                                             \n    If the green pixels are in a column, the direction is 'col'.                                                                                                          \n    \"\"\"\n    green_directions = []\n    for i in range(input_grid.shape[0]):\n        if green in input_grid[i, :]:\n            green_directions.append('row')\n            return green_directions\n    for j in range(input_grid.shape[1]):\n        if green in input_grid[:, j]:\n            green_directions.append('col')\n            return green_directions\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"                                                                                                                                                                   \n    In the input, you should see some green pixels and red pixels, the greens are either in a row or in a col.                                                            \n    the output gird is the same size as the input grid.                                                                                                                   \n    To make the output, copy the green pixels.                                                                                                                            \n    if the green pixels are in a row, move the red pixels right for two pixels.                                                                                           \n    if the green pixels are in a col, move the red pixels down for two pixels.                                                                                            \n    \"\"\"\n    output_grid = input_grid.copy()\n    green_directions = find_green_directions(input_grid)\n    print(green_directions)\n    output_grid = move_red_pixels(input_grid, output_grid, green_directions)\n    return output_grid", "python": "import numpy as np\nfrom typing import *\nblack, blue, red, green, yellow, grey, pink, orange, teal, maroon = range(10)\n\ndef move_red_pixels(input_grid: np.ndarray, output_grid: np.ndarray, green_directions: List[str]) -> np.ndarray:\n    \"\"\"                                                                                                                                                                   \n    This function takes an input grid, an output grid, and a list of directions of the green pixels.                                                                      \n    It moves the red pixels right for two pixels if the green pixels are in a row.                                                                                        \n    It moves the red pixels down for two pixels if the green pixels are in a column.                                                                                      \n    \"\"\"\n    if 'row' in green_directions:\n        for i in range(input_grid.shape[0]):\n            for j in range(input_grid.shape[1]):\n                if red == input_grid[i, j]:\n                    output_grid[i, j] = 0\n    elif 'col' in green_directions:\n        for j in range(input_grid.shape[1]):\n            for i in range(input_grid.shape[0]):\n                if red == input_grid[i, j]:\n                    output_grid[i, j] = 0\n    if 'row' in green_directions:\n        for i in range(input_grid.shape[0]):\n            for j in range(input_grid.shape[1]):\n                if red == input_grid[i, j]:\n                    output_grid[i, j + 2] = red\n    elif 'col' in green_directions:\n        for j in range(input_grid.shape[1]):\n            for i in range(input_grid.shape[0]):\n                if red == input_grid[i, j]:\n                    output_grid[i + 2, j] = red\n    return output_grid\n\ndef find_green_directions(input_grid: np.ndarray) -> List[str]:\n    \"\"\"                                                                                                                                                                   \n    This function takes an input grid and returns a list of directions of the green pixels.                                                                               \n    If the green pixels are in a row, the direction is 'row'.                                                                                                             \n    If the green pixels are in a column, the direction is 'col'.                                                                                                          \n    \"\"\"\n    green_directions = []\n    for i in range(input_grid.shape[0]):\n        if green in input_grid[i, :]:\n            green_directions.append('row')\n            return green_directions\n    for j in range(input_grid.shape[1]):\n        if green in input_grid[:, j]:\n            green_directions.append('col')\n            return green_directions\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"                                                                                                                                                                   \n    In the input, you should see some green pixels and red pixels, the greens are either in a row or in a col.                                                            \n    the output gird is the same size as the input grid.                                                                                                                   \n    To make the output, copy the green pixels.                                                                                                                            \n    if the green pixels are in a row, move the red pixels right for two pixels.                                                                                           \n    if the green pixels are in a col, move the red pixels down for two pixels.                                                                                            \n    \"\"\"\n    output_grid = input_grid.copy()\n    green_directions = find_green_directions(input_grid)\n    print(green_directions)\n    output_grid = move_red_pixels(input_grid, output_grid, green_directions)\n    return output_grid"}