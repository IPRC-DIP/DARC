{"id": 180, "train_io": {"inputs": [[[0, 0, 0, 8, 0, 8, 0, 0, 0], [0, 0, 0, 0, 8, 8, 0, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0], [0, 0, 0, 4, 0, 0, 0, 0, 0], [0, 0, 0, 4, 4, 4, 0, 0, 0], [0, 0, 0, 0, 4, 0, 0, 0, 0]], [[0, 0, 0, 8, 0, 8, 0, 0, 0], [0, 0, 0, 8, 8, 8, 0, 0, 0], [0, 0, 0, 8, 8, 0, 0, 0, 0], [0, 0, 0, 0, 0, 4, 0, 0, 0], [0, 0, 0, 4, 4, 4, 0, 0, 0], [0, 0, 0, 0, 4, 0, 0, 0, 0]], [[0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 8, 0, 0, 0], [0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 4, 0, 0, 0, 0, 0], [0, 0, 0, 4, 4, 4, 0, 0, 0], [0, 0, 0, 0, 4, 0, 0, 0, 0]]], "outputs": [[[8, 0, 8, 8, 0, 8, 0, 0, 0], [8, 8, 0, 0, 8, 8, 0, 0, 0], [8, 0, 0, 0, 0, 8, 0, 0, 0], [0, 0, 0, 4, 0, 0, 0, 0, 0], [0, 0, 0, 4, 4, 4, 0, 0, 0], [0, 0, 0, 0, 4, 0, 0, 0, 0]], [[0, 0, 0, 8, 0, 8, 8, 0, 8], [0, 0, 0, 8, 8, 8, 8, 8, 8], [0, 0, 0, 8, 8, 0, 0, 8, 8], [0, 0, 0, 0, 0, 4, 0, 0, 0], [0, 0, 0, 4, 4, 4, 0, 0, 0], [0, 0, 0, 0, 4, 0, 0, 0, 0]], [[0, 0, 8, 8, 0, 0, 0, 0, 0], [8, 8, 0, 0, 8, 8, 0, 0, 0], [0, 0, 8, 8, 0, 0, 0, 0, 0], [0, 0, 0, 4, 0, 0, 0, 0, 0], [0, 0, 0, 4, 4, 4, 0, 0, 0], [0, 0, 0, 0, 4, 0, 0, 0, 0]]]}, "test_io": {"inputs": [[[0, 0, 0, 8, 0, 8, 0, 0, 0], [0, 0, 0, 0, 8, 8, 0, 0, 0], [0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 4, 0, 0, 0], [0, 0, 0, 4, 4, 4, 0, 0, 0], [0, 0, 0, 0, 4, 0, 0, 0, 0]]], "outputs": [[[0, 0, 0, 8, 0, 8, 8, 0, 8], [0, 0, 0, 0, 8, 8, 8, 8, 0], [0, 0, 0, 8, 0, 0, 0, 0, 8], [0, 0, 0, 0, 0, 4, 0, 0, 0], [0, 0, 0, 4, 4, 4, 0, 0, 0], [0, 0, 0, 0, 4, 0, 0, 0, 0]]]}, "solved": true, "generalizable": true, "anpl": "def main(input_grid: np.ndarray) -> np.ndarray:\n    output_grid = input_grid.copy()\n    origin_area = input_grid[0:3, 3:6]\n    blue_pixels = \"find the tealpixels in the origin_area\"(origin_area)\n    if input_grid[3:6, 3:6][0, 0] == yellow:\n        output_grid = \"left-symmetric the teal pixel in the origin_area to output_grid[0:3, 0:3]\"(blue_pixels, origin_area, output_grid)\n    elif input_grid[3:6, 3:6][0, 2] == yellow:\n        output_grid = \"right-symmetric the teal pixel in the origin_area to output_grid[0:3, 6:9]\"(blue_pixels, origin_area, output_grid)\n    return output_grid", "python": "import numpy as np\nfrom typing import *\nblack, blue, red, green, yellow, grey, pink, orange, teal, maroon = range(10)\n\ndef right_symmetric(blue_pixels: List[Tuple[int, int]], origin_area: np.ndarray, output_grid: np.ndarray) -> np.ndarray:\n    for pixel in blue_pixels:\n        i, j = pixel\n        output_grid[i, 8 - j] = origin_area[i, j]\n    return output_grid\n\ndef left_symmetric(blue_pixels: List[Tuple[int, int]], origin_area: np.ndarray, output_grid: np.ndarray) -> np.ndarray:\n    for pixel in blue_pixels:\n        i, j = pixel\n        output_grid[i, 2 - j] = origin_area[i, j]\n    return output_grid\n\ndef find_teal_pixels(origin_area: np.ndarray) -> List[Tuple[int, int]]:\n    teal_pixels = []\n    for i in range(3):\n        for j in range(3):\n            if origin_area[i, j] == teal:\n                teal_pixels.append((i, j))\n    return teal_pixels\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    output_grid = input_grid.copy()\n    origin_area = input_grid[0:3, 3:6]\n    blue_pixels = find_teal_pixels(origin_area)\n    if input_grid[3:6, 3:6][0, 0] == yellow:\n        output_grid = left_symmetric(blue_pixels, origin_area, output_grid)\n    elif input_grid[3:6, 3:6][0, 2] == yellow:\n        output_grid = right_symmetric(blue_pixels, origin_area, output_grid)\n    return output_grid"}