{"id": 112, "train_io": {"inputs": [[[2, 2, 2], [2, 2, 2], [3, 3, 3], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]], [[2, 2, 2, 2, 2], [8, 8, 8, 8, 8], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]], "outputs": [[[2, 2, 2], [2, 2, 2], [3, 3, 3], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [3, 3, 3], [2, 2, 2], [2, 2, 2]], [[2, 2, 2, 2, 2], [8, 8, 8, 8, 8], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [8, 8, 8, 8, 8], [2, 2, 2, 2, 2]]]}, "test_io": {"inputs": [[[3, 3, 3, 3, 3, 3], [5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]]], "outputs": [[[3, 3, 3, 3, 3, 3], [5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5], [3, 3, 3, 3, 3, 3]]]}, "solved": true, "generalizable": true, "anpl": "def mirror_non_zero_rows(input_grid: np.ndarray, non_zero_rows: List[int]) -> np.ndarray:\n    output = input_grid\n    output[::-1][non_zero_rows] = input_grid[non_zero_rows]\n    return output\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    non_zero_rows = \"find All non-zero rows\"(input_grid)\n    output = mirror_non_zero_rows(input_grid, non_zero_rows)\n    return output", "python": "import numpy as np\nfrom typing import *\nblack, blue, red, green, yellow, grey, pink, orange, teal, maroon = range(10)\n\ndef mirror_non_zero_rows(input_grid: np.ndarray, non_zero_rows: List[int]) -> np.ndarray:\n    output = input_grid\n    output[::-1][non_zero_rows] = input_grid[non_zero_rows]\n    return output\n\ndef find_non_zero_rows(input_grid: np.ndarray) -> List[int]:\n    non_zero_rows = []\n    for i in range(input_grid.shape[0]):\n        if np.any(input_grid[i]):\n            non_zero_rows.append(i)\n    return non_zero_rows\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    non_zero_rows = find_non_zero_rows(input_grid)\n    output = mirror_non_zero_rows(input_grid, non_zero_rows)\n    return output"}