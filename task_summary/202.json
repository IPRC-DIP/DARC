{"id": 202, "train_io": {"inputs": [[[4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4], [4, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 4], [4, 2, 1, 3, 3, 3, 3, 3, 3, 1, 2, 4], [4, 2, 1, 3, 5, 5, 5, 5, 3, 1, 2, 4], [4, 2, 1, 3, 5, 8, 8, 5, 3, 1, 2, 4], [4, 2, 1, 3, 5, 8, 8, 5, 3, 1, 2, 4], [4, 2, 1, 3, 5, 5, 5, 5, 3, 1, 2, 4], [4, 2, 1, 3, 3, 3, 3, 3, 3, 1, 2, 4], [4, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 4], [4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]], [[2, 2, 2, 2, 2, 2], [2, 1, 1, 1, 1, 2], [2, 1, 6, 6, 1, 2], [2, 1, 6, 6, 1, 2], [2, 1, 1, 1, 1, 2], [2, 2, 2, 2, 2, 2]], [[8, 8, 8, 8, 8, 8, 8, 8], [8, 1, 1, 1, 1, 1, 1, 8], [8, 1, 2, 2, 2, 2, 1, 8], [8, 1, 2, 4, 4, 2, 1, 8], [8, 1, 2, 4, 4, 2, 1, 8], [8, 1, 2, 2, 2, 2, 1, 8], [8, 1, 1, 1, 1, 1, 1, 8], [8, 8, 8, 8, 8, 8, 8, 8]], [[7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 2, 2, 2, 2, 2, 2, 2, 2, 7], [7, 2, 4, 4, 4, 4, 4, 4, 2, 7], [7, 2, 4, 1, 1, 1, 1, 4, 2, 7], [7, 2, 4, 1, 3, 3, 1, 4, 2, 7], [7, 2, 4, 1, 3, 3, 1, 4, 2, 7], [7, 2, 4, 1, 1, 1, 1, 4, 2, 7], [7, 2, 4, 4, 4, 4, 4, 4, 2, 7], [7, 2, 2, 2, 2, 2, 2, 2, 2, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7]]], "outputs": [[[8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 8], [8, 5, 3, 3, 3, 3, 3, 3, 3, 3, 5, 8], [8, 5, 3, 1, 1, 1, 1, 1, 1, 3, 5, 8], [8, 5, 3, 1, 2, 2, 2, 2, 1, 3, 5, 8], [8, 5, 3, 1, 2, 4, 4, 2, 1, 3, 5, 8], [8, 5, 3, 1, 2, 4, 4, 2, 1, 3, 5, 8], [8, 5, 3, 1, 2, 2, 2, 2, 1, 3, 5, 8], [8, 5, 3, 1, 1, 1, 1, 1, 1, 3, 5, 8], [8, 5, 3, 3, 3, 3, 3, 3, 3, 3, 5, 8], [8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8]], [[6, 6, 6, 6, 6, 6], [6, 1, 1, 1, 1, 6], [6, 1, 2, 2, 1, 6], [6, 1, 2, 2, 1, 6], [6, 1, 1, 1, 1, 6], [6, 6, 6, 6, 6, 6]], [[4, 4, 4, 4, 4, 4, 4, 4], [4, 2, 2, 2, 2, 2, 2, 4], [4, 2, 1, 1, 1, 1, 2, 4], [4, 2, 1, 8, 8, 1, 2, 4], [4, 2, 1, 8, 8, 1, 2, 4], [4, 2, 1, 1, 1, 1, 2, 4], [4, 2, 2, 2, 2, 2, 2, 4], [4, 4, 4, 4, 4, 4, 4, 4]], [[3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 1, 1, 1, 1, 1, 1, 1, 1, 3], [3, 1, 4, 4, 4, 4, 4, 4, 1, 3], [3, 1, 4, 2, 2, 2, 2, 4, 1, 3], [3, 1, 4, 2, 7, 7, 2, 4, 1, 3], [3, 1, 4, 2, 7, 7, 2, 4, 1, 3], [3, 1, 4, 2, 2, 2, 2, 4, 1, 3], [3, 1, 4, 4, 4, 4, 4, 4, 1, 3], [3, 1, 1, 1, 1, 1, 1, 1, 1, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3]]]}, "test_io": {"inputs": [[[8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 8], [8, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 8], [8, 2, 4, 3, 3, 3, 3, 3, 3, 3, 3, 4, 2, 8], [8, 2, 4, 3, 7, 7, 7, 7, 7, 7, 3, 4, 2, 8], [8, 2, 4, 3, 7, 6, 6, 6, 6, 7, 3, 4, 2, 8], [8, 2, 4, 3, 7, 6, 5, 5, 6, 7, 3, 4, 2, 8], [8, 2, 4, 3, 7, 6, 5, 5, 6, 7, 3, 4, 2, 8], [8, 2, 4, 3, 7, 6, 6, 6, 6, 7, 3, 4, 2, 8], [8, 2, 4, 3, 7, 7, 7, 7, 7, 7, 3, 4, 2, 8], [8, 2, 4, 3, 3, 3, 3, 3, 3, 3, 3, 4, 2, 8], [8, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 8], [8, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8]]], "outputs": [[[5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5], [5, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 5], [5, 6, 7, 3, 3, 3, 3, 3, 3, 3, 3, 7, 6, 5], [5, 6, 7, 3, 4, 4, 4, 4, 4, 4, 3, 7, 6, 5], [5, 6, 7, 3, 4, 2, 2, 2, 2, 4, 3, 7, 6, 5], [5, 6, 7, 3, 4, 2, 8, 8, 2, 4, 3, 7, 6, 5], [5, 6, 7, 3, 4, 2, 8, 8, 2, 4, 3, 7, 6, 5], [5, 6, 7, 3, 4, 2, 2, 2, 2, 4, 3, 7, 6, 5], [5, 6, 7, 3, 4, 4, 4, 4, 4, 4, 3, 7, 6, 5], [5, 6, 7, 3, 3, 3, 3, 3, 3, 3, 3, 7, 6, 5], [5, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 5], [5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]]]}, "solved": true, "generalizable": true, "anpl": "def main(input_grid: np.ndarray) -> np.ndarray:\n    r = \"record the order of color along the middle column, if the color already exists, ignore it\"(input_grid)\n    out = \"Swap the colors of all pixels according to r, for example, turn pixels in the first color to the last color and turn pixels in the second color to the last second color.\"(input_grid, r)\n    return out", "python": "import numpy as np\nfrom typing import *\nblack, blue, red, green, yellow, grey, pink, orange, teal, maroon = range(10)\n\ndef swap_colors_according_to_order(input_grid: np.ndarray, color_order: List[int]) -> np.ndarray:\n    \"\"\"\n    This function takes in a numpy array representing a grid of colors and a list of integers representing the order of\n    colors along the middle column of the grid. It returns a numpy array with the colors of the pixels swapped according\n    to the given order.\n    \n    Args:\n    - input_grid: a numpy array of shape (n, m) representing a grid of colors, where n is the number of rows and m is the\n    number of columns\n    - color_order: a list of integers representing the order of colors along the middle column of the grid\n    \n    Returns:\n    - A numpy array with the colors of the pixels swapped according to the given order.\n    \"\"\"\n    color_map = {color_order[i]: color_order[-i - 1] for i in range(len(color_order))}\n    output_grid = np.vectorize(color_map.get)(input_grid)\n    return output_grid\n\ndef record_middle_column_color_order(input_grid: np.ndarray) -> List[int]:\n    \"\"\"\n    This function takes in a numpy array representing a grid of colors and returns a list of integers representing the\n    order of colors along the middle column of the grid. If a color already exists, it is ignored.\n    \n    Args:\n    - input_grid: a numpy array of shape (n, m) representing a grid of colors, where n is the number of rows and m is the\n    number of columns\n    \n    Returns:\n    - A list of integers representing the order of colors along the middle column of the grid.\n    \"\"\"\n    middle_column = input_grid[:, input_grid.shape[1] // 2]\n    color_order = []\n    for color in middle_column:\n        if color not in color_order:\n            color_order.append(color)\n    return color_order\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    r = record_middle_column_color_order(input_grid)\n    out = swap_colors_according_to_order(input_grid, r)\n    return out"}