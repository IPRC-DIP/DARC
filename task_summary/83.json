{"id": 83, "train_io": {"inputs": [[[6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], [[5, 0, 0], [5, 0, 0], [5, 0, 0]], [[8, 0, 0, 0, 0, 0, 0], [8, 0, 0, 0, 0, 0, 0], [8, 0, 0, 0, 0, 0, 0], [8, 0, 0, 0, 0, 0, 0], [8, 0, 0, 0, 0, 0, 0], [8, 0, 0, 0, 0, 0, 0], [8, 0, 0, 0, 0, 0, 0]]], "outputs": [[[6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], [6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0], [6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0], [6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0], [6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0], [6, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0], [6, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0], [6, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0], [6, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], [6, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]], [[5, 0, 2], [5, 2, 0], [5, 4, 4]], [[8, 0, 0, 0, 0, 0, 2], [8, 0, 0, 0, 0, 2, 0], [8, 0, 0, 0, 2, 0, 0], [8, 0, 0, 2, 0, 0, 0], [8, 0, 2, 0, 0, 0, 0], [8, 2, 0, 0, 0, 0, 0], [8, 4, 4, 4, 4, 4, 4]]]}, "test_io": {"inputs": [[[3, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 0, 0, 0, 0, 0, 0, 0, 0, 0]]], "outputs": [[[3, 0, 0, 0, 0, 0, 0, 0, 0, 2], [3, 0, 0, 0, 0, 0, 0, 0, 2, 0], [3, 0, 0, 0, 0, 0, 0, 2, 0, 0], [3, 0, 0, 0, 0, 0, 2, 0, 0, 0], [3, 0, 0, 0, 0, 2, 0, 0, 0, 0], [3, 0, 0, 0, 2, 0, 0, 0, 0, 0], [3, 0, 0, 2, 0, 0, 0, 0, 0, 0], [3, 0, 2, 0, 0, 0, 0, 0, 0, 0], [3, 2, 0, 0, 0, 0, 0, 0, 0, 0], [3, 4, 4, 4, 4, 4, 4, 4, 4, 4]]]}, "solved": true, "generalizable": false, "anpl": "def main(input_grid):\n    output = \"color the inverse diagonal with red\"(input_grid)\n    output = \"color the last line of input with yellow\"(output)\n    output = \"color the bottom left position with green\"(output)\n    return output", "python": "import numpy as np\nfrom typing import *\nblack, blue, red, green, yellow, grey, pink, orange, teal, maroon = range(10)\n\ndef color_bottom_left_green(input_grid):\n    \"\"\"\n    Given a 2D grid of colors represented as integers, this function colors the bottom left position with green.\n\n    Args:\n    input_grid: A 2D numpy array of integers representing the colors of the grid.\n\n    Returns:\n    A 2D numpy array of integers representing the updated grid with the bottom left position colored green.\n    \"\"\"\n    input_grid[-1][0] = green\n    return input_grid\n\ndef color_last_line_yellow(input_grid):\n    \"\"\"\n    Given a 2D grid of colors represented as integers, this function colors the last line with yellow.\n\n    Args:\n    input_grid: A 2D numpy array of integers representing the colors of the grid.\n\n    Returns:\n    A 2D numpy array of integers representing the updated grid with the last line colored yellow.\n    \"\"\"\n    n = input_grid.shape[0]\n    input_grid[n - 1] = yellow\n    return input_grid\n\ndef color_inverse_diagonal_red(input_grid):\n    \"\"\"\n    Given a 2D grid of colors represented as integers, this function colors the inverse diagonal with red.\n\n    Args:\n    input_grid: A 2D numpy array of integers representing the colors of the grid.\n\n    Returns:\n    A 2D numpy array of integers representing the updated grid with the inverse diagonal colored red.\n    \"\"\"\n    n = input_grid.shape[0]\n    for i in range(n):\n        input_grid[i][n - i - 1] = red\n    return input_grid\n\ndef main(input_grid):\n    output = color_inverse_diagonal_red(input_grid)\n    output = color_last_line_yellow(output)\n    output = color_bottom_left_green(output)\n    return output"}