{"id": 258, "train_io": {"inputs": [[[1, 1, 1, 1, 1, 1, 1], [1, 2, 2, 1, 1, 1, 1], [1, 2, 2, 3, 1, 1, 1], [1, 1, 1, 2, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1]], [[1, 1, 1, 1, 1, 1, 1], [1, 1, 3, 1, 2, 1, 1], [1, 1, 3, 1, 2, 1, 1], [1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1]], [[1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1], [1, 5, 5, 1, 1, 1], [1, 5, 5, 1, 1, 1], [1, 6, 6, 1, 1, 1], [1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1]]], "outputs": [[[2, 2, 0], [2, 2, 3], [0, 0, 2]], [[3, 0, 2], [3, 0, 2]], [[5, 5], [5, 5], [6, 6]]]}, "test_io": {"inputs": [[[1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1], [1, 1, 1, 2, 1, 1], [1, 1, 2, 3, 1, 1], [1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1]]], "outputs": [[[0, 2], [2, 3]]]}, "solved": true, "generalizable": false, "anpl": "def main(input_grid: np.ndarray) -> np.ndarray:\n    output_grid = input_grid.copy()\n    (upper_left, lower_right) = \"find the upper right corner and the lower left corner of non-blue pixels in input_grid\"(input_grid)\n    output_grid = \"output pixels from upper_left ro lower_right in input_grid, the output shape should be(2,2)\"(upper_left, lower_right, input_grid)\n    output_grid = \"make blue pixels black\"(output_grid)\n    return output_grid", "python": "import numpy as np\nfrom typing import *\nblack, blue, red, green, yellow, grey, pink, orange, teal, maroon = range(10)\n\ndef make_blue_pixels_black(input_grid: np.ndarray) -> np.ndarray:\n    output_grid = input_grid.copy()\n    blue_pixels = np.where(output_grid == blue)\n    output_grid[blue_pixels] = black\n    return output_grid\n\ndef extract_pixels(upper_left: Tuple[int, int], lower_right: Tuple[int, int], input_grid: np.ndarray) -> np.ndarray:\n    return input_grid[upper_left[0]:upper_left[0] + 2, upper_left[1]:upper_left[1] + 2]\n\ndef find_corners(input_grid: np.ndarray) -> Tuple[Tuple[int, int], Tuple[int, int]]:\n    non_blue_pixels = np.where(input_grid != blue)\n    upper_left = (np.min(non_blue_pixels[0]), np.min(non_blue_pixels[1]))\n    lower_right = (np.max(non_blue_pixels[0]), np.max(non_blue_pixels[1]))\n    return (upper_left, lower_right)\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    output_grid = input_grid.copy()\n    upper_left, lower_right = find_corners(input_grid)\n    output_grid = extract_pixels(upper_left, lower_right, input_grid)\n    output_grid = make_blue_pixels_black(output_grid)\n    return output_grid"}