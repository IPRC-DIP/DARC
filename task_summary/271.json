{"id": 271, "train_io": {"inputs": [[[0, 2, 2], [0, 2, 2], [2, 0, 0]], [[2, 2, 2, 0], [0, 2, 0, 0], [0, 0, 0, 2], [0, 2, 0, 0]], [[2, 2, 0, 0], [0, 2, 0, 0], [2, 2, 0, 2], [0, 0, 0, 0], [0, 2, 2, 2]], [[2, 2, 0], [2, 0, 2], [0, 2, 0]]], "outputs": [[[0, 2, 2], [0, 2, 2], [1, 0, 0]], [[2, 2, 2, 0], [0, 2, 0, 0], [0, 0, 0, 1], [0, 1, 0, 0]], [[2, 2, 0, 0], [0, 2, 0, 0], [2, 2, 0, 1], [0, 0, 0, 0], [0, 2, 2, 2]], [[2, 2, 0], [2, 0, 1], [0, 1, 0]]]}, "test_io": {"inputs": [[[2, 2, 0, 2], [0, 2, 0, 0], [0, 0, 2, 0], [2, 0, 0, 0], [0, 0, 2, 2]]], "outputs": [[[2, 2, 0, 1], [0, 2, 0, 0], [0, 0, 1, 0], [1, 0, 0, 0], [0, 0, 2, 2]]]}, "solved": true, "generalizable": true, "anpl": "def main(input_grid: np.ndarray) -> np.ndarray:\n    output_grid = \"Traverse each red pixel, if it has no red pixel up or down or left or right, turn it blue.\"(input_grid)\n    return output_grid", "python": "import numpy as np\nfrom typing import *\nblack, blue, red, green, yellow, grey, pink, orange, teal, maroon = range(10)\n\ndef change_red_pixels(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    This function returns a new grid after changing the color of some red pixels to blue.\n    If a red pixel has no red pixel up or down or left or right, then it is turned to blue.\n\n    Args:\n    input_grid (numpy.ndarray) : a two-dimensional numpy array containing the grid of pixels.\n\n    Returns:\n    numpy.ndarray : a new two-dimensional numpy array containing the updated grid.\n    \"\"\"\n    for i in range(input_grid.shape[0]):\n        for j in range(input_grid.shape[1]):\n            if input_grid[i][j] == red:\n                if i == 0 or input_grid[i - 1][j] != red:\n                    if i == input_grid.shape[0] - 1 or input_grid[i + 1][j] != red:\n                        if j == 0 or input_grid[i][j - 1] != red:\n                            if j == input_grid.shape[1] - 1 or input_grid[i][j + 1] != red:\n                                input_grid[i][j] = blue\n    return input_grid\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    output_grid = change_red_pixels(input_grid)\n    return output_grid"}