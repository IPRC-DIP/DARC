{"id": 46, "train_io": {"inputs": [[[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 7, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 7, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]]], "outputs": [[[0, 0, 8, 0, 0, 0, 7, 0, 0], [0, 0, 8, 0, 0, 0, 7, 0, 0], [8, 8, 8, 8, 8, 8, 2, 8, 8], [0, 0, 8, 0, 0, 0, 7, 0, 0], [0, 0, 8, 0, 0, 0, 7, 0, 0], [0, 0, 8, 0, 0, 0, 7, 0, 0], [7, 7, 2, 7, 7, 7, 7, 7, 7], [0, 0, 8, 0, 0, 0, 7, 0, 0], [0, 0, 8, 0, 0, 0, 7, 0, 0]], [[0, 0, 0, 8, 0, 0, 7, 0, 0], [8, 8, 8, 8, 8, 8, 2, 8, 8], [0, 0, 0, 8, 0, 0, 7, 0, 0], [0, 0, 0, 8, 0, 0, 7, 0, 0], [0, 0, 0, 8, 0, 0, 7, 0, 0], [0, 0, 0, 8, 0, 0, 7, 0, 0], [0, 0, 0, 8, 0, 0, 7, 0, 0], [7, 7, 7, 2, 7, 7, 7, 7, 7], [0, 0, 0, 8, 0, 0, 7, 0, 0]]]}, "test_io": {"inputs": [[[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 7, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]]], "outputs": [[[0, 7, 0, 0, 8, 0, 0, 0, 0], [8, 2, 8, 8, 8, 8, 8, 8, 8], [0, 7, 0, 0, 8, 0, 0, 0, 0], [0, 7, 0, 0, 8, 0, 0, 0, 0], [0, 7, 0, 0, 8, 0, 0, 0, 0], [0, 7, 0, 0, 8, 0, 0, 0, 0], [7, 7, 7, 7, 2, 7, 7, 7, 7], [0, 7, 0, 0, 8, 0, 0, 0, 0], [0, 7, 0, 0, 8, 0, 0, 0, 0]]]}, "solved": true, "generalizable": true, "anpl": "def paint_orange(input_grid: np.ndarray) -> Tuple[np.ndarray, int, int]:\n    (x2, y2) = (-1, -1)\n    for i in range(input_grid.shape[0]):\n        for j in range(input_grid.shape[1]):\n            if input_grid[i][j] == orange:\n                if x2 == -1 and y2 == -1:\n                    (x2, y2) = (i, j)\n                    input_grid[i, :] = orange\n                    input_grid[:, j] = orange\n    return (input_grid, x2, y2)\n\ndef paint_teal(input_grid: np.ndarray) -> Tuple[np.ndarray, int, int]:\n    (x1, y1) = (-1, -1)\n    for i in range(input_grid.shape[0]):\n        for j in range(input_grid.shape[1]):\n            if input_grid[i][j] == teal:\n                if x1 == -1 and y1 == -1:\n                    (x1, y1) = (i, j)\n                    input_grid[i, :] = teal\n                    input_grid[:, j] = teal\n    return (input_grid, x1, y1)\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    (input_grid, x1, y1) = paint_teal(input_grid)\n    (input_grid, x2, y2) = paint_orange(input_grid)\n    input_grid = \"Paint the pixels at coordinates (x1,y2) and (x2,y1) in red.\"(input_grid, x1, y1, x2, y2)\n    return input_grid", "python": "import numpy as np\nfrom typing import *\nblack, blue, red, green, yellow, grey, pink, orange, teal, maroon = range(10)\n\ndef paint_red(input_grid: np.ndarray, x1: int, y1: int, x2: int, y2: int) -> np.ndarray:\n    input_grid[x1, y2] = red\n    input_grid[x2, y1] = red\n    return input_grid\n\ndef paint_orange(input_grid: np.ndarray) -> Tuple[np.ndarray, int, int]:\n    x2, y2 = (-1, -1)\n    for i in range(input_grid.shape[0]):\n        for j in range(input_grid.shape[1]):\n            if input_grid[i][j] == orange:\n                if x2 == -1 and y2 == -1:\n                    x2, y2 = (i, j)\n                    input_grid[i, :] = orange\n                    input_grid[:, j] = orange\n    return (input_grid, x2, y2)\n\ndef paint_teal(input_grid: np.ndarray) -> Tuple[np.ndarray, int, int]:\n    x1, y1 = (-1, -1)\n    for i in range(input_grid.shape[0]):\n        for j in range(input_grid.shape[1]):\n            if input_grid[i][j] == teal:\n                if x1 == -1 and y1 == -1:\n                    x1, y1 = (i, j)\n                    input_grid[i, :] = teal\n                    input_grid[:, j] = teal\n    return (input_grid, x1, y1)\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    input_grid, x1, y1 = paint_teal(input_grid)\n    input_grid, x2, y2 = paint_orange(input_grid)\n    input_grid = paint_red(input_grid, x1, y1, x2, y2)\n    return input_grid"}