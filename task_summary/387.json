{"id": 387, "train_io": {"inputs": [[[2, 0, 0], [0, 0, 0], [0, 0, 2]], [[0, 5, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [5, 0, 0, 0, 0, 5], [0, 0, 0, 0, 0, 0]], [[0, 4], [0, 0]]], "outputs": [[[2, 0, 8, 2, 0, 8], [8, 0, 8, 8, 0, 8], [8, 0, 2, 8, 0, 2], [2, 0, 8, 2, 0, 8], [8, 0, 8, 8, 0, 8], [8, 0, 2, 8, 0, 2]], [[8, 5, 0, 0, 0, 8, 8, 5, 0, 0, 0, 8], [8, 8, 0, 0, 0, 8, 8, 8, 0, 0, 0, 8], [8, 8, 0, 0, 0, 8, 8, 8, 0, 0, 0, 8], [8, 8, 0, 0, 0, 8, 8, 8, 0, 0, 0, 8], [5, 8, 0, 0, 0, 5, 5, 8, 0, 0, 0, 5], [8, 8, 0, 0, 0, 8, 8, 8, 0, 0, 0, 8], [8, 5, 0, 0, 0, 8, 8, 5, 0, 0, 0, 8], [8, 8, 0, 0, 0, 8, 8, 8, 0, 0, 0, 8], [8, 8, 0, 0, 0, 8, 8, 8, 0, 0, 0, 8], [8, 8, 0, 0, 0, 8, 8, 8, 0, 0, 0, 8], [5, 8, 0, 0, 0, 5, 5, 8, 0, 0, 0, 5], [8, 8, 0, 0, 0, 8, 8, 8, 0, 0, 0, 8]], [[0, 4, 0, 4], [0, 8, 0, 8], [0, 4, 0, 4], [0, 8, 0, 8]]]}, "test_io": {"inputs": [[[0, 0, 3, 0], [0, 0, 0, 0], [0, 0, 0, 3], [3, 0, 0, 0]]], "outputs": [[[8, 0, 3, 8, 8, 0, 3, 8], [8, 0, 8, 8, 8, 0, 8, 8], [8, 0, 8, 3, 8, 0, 8, 3], [3, 0, 8, 8, 3, 0, 8, 8], [8, 0, 3, 8, 8, 0, 3, 8], [8, 0, 8, 8, 8, 0, 8, 8], [8, 0, 8, 3, 8, 0, 8, 3], [3, 0, 8, 8, 3, 0, 8, 8]]]}, "solved": true, "generalizable": true, "anpl": "import numpy as np\nfrom typing import *\n(black, blue, red, green, yellow, grey, pink, orange, teal, maroon) = range(10)\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    output_grid = np.concatenate((input_grid, input_grid), axis=0)\n    output_grid = np.concatenate((output_grid, output_grid), axis=1)\n    index = `find columns index where there is a not black squares`(output_grid)\n    output_grid = `replace the black squares with teal in the index column`(index, output_grid)\n    return output_grid", "python": "import numpy as np\nfrom typing import *\nblack, blue, red, green, yellow, grey, pink, orange, teal, maroon = range(10)\n\ndef replace_black_with_teal_in_index_column(index: List[int], grid: np.ndarray) -> np.ndarray:\n    for i in index:\n        for j in range(grid.shape[0]):\n            if grid[j][i] == black:\n                grid[j][i] = teal\n    return grid\n\ndef find_non_black_columns(grid: np.ndarray) -> List[int]:\n    non_black_columns = []\n    for i in range(grid.shape[1]):\n        if not np.all(grid[:, i] == black):\n            non_black_columns.append(i)\n    return non_black_columns\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    output_grid = np.concatenate((input_grid, input_grid), axis=0)\n    output_grid = np.concatenate((output_grid, output_grid), axis=1)\n    index = find_non_black_columns(output_grid)\n    output_grid = replace_black_with_teal_in_index_column(index, output_grid)\n    return output_grid"}