{"id": 213, "train_io": {"inputs": [[[1, 1, 2, 5, 0, 0, 0, 5, 0, 0, 0], [4, 1, 1, 5, 0, 0, 0, 5, 0, 0, 0], [4, 4, 1, 5, 0, 0, 0, 5, 0, 0, 0]], [[6, 3, 3, 5, 0, 0, 0, 5, 0, 0, 0], [6, 3, 3, 5, 0, 0, 0, 5, 0, 0, 0], [6, 3, 2, 5, 0, 0, 0, 5, 0, 0, 0]], [[2, 7, 8, 5, 0, 0, 0, 5, 0, 0, 0], [7, 7, 8, 5, 0, 0, 0, 5, 0, 0, 0], [8, 8, 8, 5, 0, 0, 0, 5, 0, 0, 0]]], "outputs": [[[1, 1, 2, 5, 4, 4, 1, 5, 1, 4, 4], [4, 1, 1, 5, 4, 1, 1, 5, 1, 1, 4], [4, 4, 1, 5, 1, 1, 2, 5, 2, 1, 1]], [[6, 3, 3, 5, 6, 6, 6, 5, 2, 3, 6], [6, 3, 3, 5, 3, 3, 3, 5, 3, 3, 6], [6, 3, 2, 5, 2, 3, 3, 5, 3, 3, 6]], [[2, 7, 8, 5, 8, 7, 2, 5, 8, 8, 8], [7, 7, 8, 5, 8, 7, 7, 5, 8, 7, 7], [8, 8, 8, 5, 8, 8, 8, 5, 8, 7, 2]]]}, "test_io": {"inputs": [[[3, 3, 9, 5, 0, 0, 0, 5, 0, 0, 0], [9, 9, 9, 5, 0, 0, 0, 5, 0, 0, 0], [2, 9, 9, 5, 0, 0, 0, 5, 0, 0, 0]]], "outputs": [[[3, 3, 9, 5, 2, 9, 3, 5, 9, 9, 2], [9, 9, 9, 5, 9, 9, 3, 5, 9, 9, 9], [2, 9, 9, 5, 9, 9, 9, 5, 9, 3, 3]]]}, "solved": true, "generalizable": true, "anpl": "def main(input_grid: np.ndarray) -> np.ndarray:\n    pattern_grid = \"Extract a 3*3 matrix from the image matrix with (0,0) as the upper left corner and (2,2) as the lower right corner\"(input_grid)\n    pattern_grid1 = \"Rotate grid clockwise by 90 degrees\"(pattern_grid)\n    pattern_grid2 = \"Rotate grid clockwise by 90 degrees\"(pattern_grid1)\n    output_grid = \"Cover the 3*3 matrix in the image matrix with (0,4) as the upper left corner and (2,6) as the lower right corner with pattern_grid1, and cover the 3*3 matrix in the image matrix with (0,8) as the upper left corner and (2,10) as the lower right corner with pattern_grid2\"(input_grid, pattern_grid1, pattern_grid2)\n    return output_grid", "python": "import numpy as np\nfrom typing import *\nblack, blue, red, green, yellow, grey, pink, orange, teal, maroon = range(10)\n\ndef cover_pattern(input_grid: np.ndarray, pattern_grid1: np.ndarray, pattern_grid2: np.ndarray) -> np.ndarray:\n    input_grid[0:3, 4:7] = pattern_grid1\n    input_grid[0:3, 8:11] = pattern_grid2\n    return input_grid\n\ndef rotate_grid_90(input_grid: np.ndarray) -> np.ndarray:\n    return np.rot90(input_grid, k=-1)\n\ndef extract_3x3_matrix(input_grid: np.ndarray) -> np.ndarray:\n    return input_grid[:3, :3]\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    pattern_grid = extract_3x3_matrix(input_grid)\n    pattern_grid1 = rotate_grid_90(pattern_grid)\n    pattern_grid2 = rotate_grid_90(pattern_grid1)\n    output_grid = cover_pattern(input_grid, pattern_grid1, pattern_grid2)\n    return output_grid"}