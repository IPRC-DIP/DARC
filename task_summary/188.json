{"id": 188, "train_io": {"inputs": [[[2, 4, 8, 0, 0, 0, 0, 0, 0], [1, 6, 8, 0, 0, 0, 0, 0, 0], [8, 8, 8, 8, 8, 8, 8, 8, 8], [0, 0, 8, 0, 3, 0, 0, 3, 0], [0, 0, 8, 3, 3, 3, 3, 3, 3], [0, 0, 8, 0, 3, 0, 0, 3, 0], [0, 0, 8, 0, 3, 0, 0, 3, 0], [0, 0, 8, 3, 3, 3, 3, 3, 3], [0, 0, 8, 0, 3, 0, 0, 3, 0]], [[0, 0, 0, 0, 0, 0, 8, 1, 2], [0, 0, 0, 0, 0, 0, 8, 4, 1], [8, 8, 8, 8, 8, 8, 8, 8, 8], [0, 0, 3, 3, 0, 3, 8, 0, 0], [3, 3, 0, 0, 0, 0, 8, 0, 0], [3, 3, 0, 3, 0, 3, 8, 0, 0], [0, 0, 0, 0, 3, 0, 8, 0, 0], [3, 3, 3, 3, 3, 3, 8, 0, 0], [0, 0, 0, 0, 3, 0, 8, 0, 0]], [[0, 0, 8, 0, 0, 3, 0, 0, 3], [0, 0, 8, 0, 0, 3, 0, 0, 3], [0, 0, 8, 3, 3, 0, 3, 3, 0], [0, 0, 8, 0, 0, 0, 0, 3, 0], [0, 0, 8, 0, 3, 0, 3, 0, 0], [0, 0, 8, 0, 3, 0, 0, 0, 3], [8, 8, 8, 8, 8, 8, 8, 8, 8], [2, 4, 8, 0, 0, 0, 0, 0, 0], [6, 5, 8, 0, 0, 0, 0, 0, 0]]], "outputs": [[[0, 2, 0, 0, 4, 0], [2, 2, 2, 4, 4, 4], [0, 2, 0, 0, 4, 0], [0, 1, 0, 0, 6, 0], [1, 1, 1, 6, 6, 6], [0, 1, 0, 0, 6, 0]], [[0, 0, 1, 2, 0, 2], [1, 1, 0, 0, 0, 0], [1, 1, 0, 2, 0, 2], [0, 0, 0, 0, 1, 0], [4, 4, 4, 1, 1, 1], [0, 0, 0, 0, 1, 0]], [[0, 0, 2, 0, 0, 4], [0, 0, 2, 0, 0, 4], [2, 2, 0, 4, 4, 0], [0, 0, 0, 0, 5, 0], [0, 6, 0, 5, 0, 0], [0, 6, 0, 0, 0, 5]]]}, "test_io": {"inputs": [[[0, 0, 0, 3, 0, 0, 8, 0, 0], [3, 3, 0, 3, 0, 3, 8, 0, 0], [0, 3, 0, 3, 0, 3, 8, 0, 0], [0, 3, 3, 3, 0, 0, 8, 0, 0], [0, 3, 0, 0, 0, 3, 8, 0, 0], [0, 0, 3, 0, 0, 0, 8, 0, 0], [8, 8, 8, 8, 8, 8, 8, 8, 8], [0, 0, 0, 0, 0, 0, 8, 2, 1], [0, 0, 0, 0, 0, 0, 8, 4, 7]]], "outputs": [[[0, 0, 0, 1, 0, 0], [2, 2, 0, 1, 0, 1], [0, 2, 0, 1, 0, 1], [0, 4, 4, 7, 0, 0], [0, 4, 0, 0, 0, 7], [0, 0, 4, 0, 0, 0]]]}, "solved": true, "generalizable": true, "anpl": "def main(input_grid: np.ndarray) -> np.ndarray:\n    m = \"Return the smallest matrix containing all pixels that are not black, green, or teal\"(input_grid)\n    n = \"Return the smallest matrix containing all green pixels\"(input_grid)\n    out = \"m is a 2x2 matrix. Devide matrix n into 4 submatrices. For each submatrix, replace all green pixels with the color of the corresponding pixel in m\"(m, n)\n    return out", "python": "import numpy as np\nfrom typing import *\nblack, blue, red, green, yellow, grey, pink, orange, teal, maroon = range(10)\n\ndef replace_green_pixels(m: np.ndarray, n: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Given two input grids m and n, this function divides n into 4 submatrices. For each submatrix, it replaces all green pixels with the color of the corresponding pixel in m.\n\n    Args:\n    m: A numpy array representing the 2x2 matrix.\n    n: A numpy array representing the input grid.\n\n    Returns:\n    A numpy array representing the modified n grid.\n    \"\"\"\n    submatrices = np.split(n, 2)\n    for i in range(2):\n        submatrices[i] = np.split(submatrices[i], 2, axis=1)\n        for j in range(2):\n            submatrices[i][j][submatrices[i][j] == green] = m[i][j]\n        submatrices[i] = np.concatenate(submatrices[i], axis=1)\n    return np.concatenate(submatrices)\n\ndef get_smallest_green_matrix(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Given an input grid, this function returns the smallest matrix containing all green pixels.\n\n    Args:\n    input_grid: A numpy array representing the input grid.\n\n    Returns:\n    A numpy array representing the smallest matrix containing all green pixels.\n    \"\"\"\n    m = np.where(input_grid == green)\n    return input_grid[m[0].min():m[0].max() + 1, m[1].min():m[1].max() + 1]\n\ndef get_smallest_matrix(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Given an input grid, this function returns the smallest matrix containing all pixels that are not black, green, or teal.\n\n    Args:\n    input_grid: A numpy array representing the input grid.\n\n    Returns:\n    A numpy array representing the smallest matrix containing all pixels that are not black, green, or teal.\n    \"\"\"\n    m = np.where((input_grid != black) & (input_grid != green) & (input_grid != teal))\n    return input_grid[m[0].min():m[0].max() + 1, m[1].min():m[1].max() + 1]\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    m = get_smallest_matrix(input_grid)\n    n = get_smallest_green_matrix(input_grid)\n    out = replace_green_pixels(m, n)\n    return out"}