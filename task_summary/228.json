{"id": 228, "train_io": {"inputs": [[[2, 2, 2], [2, 1, 8], [2, 8, 8]], [[1, 1, 1], [8, 1, 3], [8, 2, 2]], [[2, 2, 2], [8, 8, 2], [2, 2, 2]], [[3, 3, 8], [4, 4, 4], [8, 1, 1]]], "outputs": [[[2, 2, 2], [2, 5, 5], [2, 5, 5]], [[1, 1, 1], [5, 1, 5], [5, 5, 5]], [[2, 2, 2], [5, 5, 2], [2, 2, 2]], [[5, 5, 5], [4, 4, 4], [5, 5, 5]]]}, "test_io": {"inputs": [[[1, 3, 2], [3, 3, 2], [1, 3, 2]]], "outputs": [[[5, 3, 5], [3, 3, 5], [5, 3, 5]]]}, "solved": true, "generalizable": true, "anpl": "def main(input_grid: np.ndarray) -> np.ndarray:\n    Record = \"record the colors of all non black patterns on the grid and the number of pixels in the color.\"(input_grid)\n    p = \"Find one colors with the maximum number of pixels.\"(Record)\n    out = \"Turn pixels in other color to grey\"(p, input_grid)\n    return out", "python": "import numpy as np\nfrom typing import *\nblack, blue, red, green, yellow, grey, pink, orange, teal, maroon = range(10)\n\ndef turn_other_colors_to_grey(color: int, input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Given an input grid and a color, this function turns all pixels in colors other than the given color to grey.\n\n    Args:\n    color: An integer representing the color to keep.\n    input_grid: A numpy array representing the input grid.\n\n    Returns:\n    A numpy array representing the output grid with all pixels in colors other than the given color turned to grey.\n    \"\"\"\n    output_grid = np.copy(input_grid)\n    for i in range(output_grid.shape[0]):\n        for j in range(output_grid.shape[1]):\n            if output_grid[i][j] != color and output_grid[i][j] != black:\n                output_grid[i][j] = grey\n    return output_grid\n\ndef find_max_color(color_counts: Dict[int, int]) -> int:\n    \"\"\"\n    Given a dictionary of color counts, this function returns the color with the maximum number of pixels.\n\n    Args:\n    color_counts: A dictionary where the keys are the colors of non-black patterns and the values are the number of pixels in the color.\n\n    Returns:\n    The color with the maximum number of pixels.\n    \"\"\"\n    max_color = None\n    max_count = 0\n    for color, count in color_counts.items():\n        if count > max_count:\n            max_color = color\n            max_count = count\n    return max_color\n\ndef record_colors(input_grid: np.ndarray) -> Dict[int, int]:\n    \"\"\"\n    Given an input grid, this function records the colors of all non-black patterns on the grid and the number of pixels\n    in the color.\n\n    Args:\n    input_grid: A numpy array representing the input grid.\n\n    Returns:\n    A dictionary where the keys are the colors of non-black patterns and the values are the number of pixels in the color.\n    \"\"\"\n    color_counts = {}\n    for row in input_grid:\n        for pixel in row:\n            if pixel != black:\n                if pixel in color_counts:\n                    color_counts[pixel] += 1\n                else:\n                    color_counts[pixel] = 1\n    return color_counts\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    Record = record_colors(input_grid)\n    p = find_max_color(Record)\n    out = turn_other_colors_to_grey(p, input_grid)\n    return out"}