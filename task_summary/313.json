{"id": 313, "train_io": {"inputs": [[[1, 4, 0, 1, 1, 0, 1, 4], [1, 1, 0, 1, 1, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 0, 1, 1, 0, 1, 1], [2, 1, 0, 1, 1, 0, 2, 1], [0, 0, 0, 0, 0, 0, 0, 0], [1, 4, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 1, 1]], [[1, 1, 0, 7, 1, 0, 1, 1], [1, 3, 0, 1, 1, 0, 1, 3], [0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 0, 7, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 1, 3]], [[1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 0, 1, 1, 0, 1, 1], [3, 1, 0, 1, 1, 0, 3, 1], [0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 1, 1]]], "outputs": [[[1, 4, 0, 1, 4, 0, 1, 4], [1, 1, 0, 1, 1, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0], [1, 4, 0, 1, 1, 0, 1, 1], [2, 1, 0, 2, 1, 0, 2, 1], [0, 0, 0, 0, 0, 0, 0, 0], [1, 4, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 1, 1]], [[1, 1, 0, 7, 1, 0, 1, 1], [1, 3, 0, 1, 3, 0, 1, 3], [0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 0, 7, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 1, 3], [0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 0, 7, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 1, 3]], [[1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 0, 1, 1, 0, 1, 1], [3, 1, 0, 3, 1, 0, 3, 1], [0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 1, 1]]]}, "test_io": {"inputs": [[[1, 1, 0, 1, 1, 0, 1, 1], [1, 8, 0, 1, 1, 0, 1, 8], [0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0], [6, 1, 0, 1, 1, 0, 6, 1], [1, 1, 0, 1, 1, 0, 1, 8]]], "outputs": [[[1, 1, 0, 1, 1, 0, 1, 1], [1, 8, 0, 1, 8, 0, 1, 8], [0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 1, 8], [0, 0, 0, 0, 0, 0, 0, 0], [6, 1, 0, 6, 1, 0, 6, 1], [1, 1, 0, 1, 1, 0, 1, 8]]]}, "solved": true, "generalizable": true, "anpl": "import numpy as np\nfrom typing import *\n(black, blue, red, green, yellow, grey, pink, orange, teal, maroon) = range(10)\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    out = input_grid\n    for color in range(2, 10):\n        loc1 = `locations of the color`(color, out)\n        if loc1:\n            loc2 = `middle locations of the locations at same row or same column`(loc1)\n            out = `change the color at locations of out`(loc2, color, out)\n    return out", "python": "import numpy as np\nfrom typing import *\nblack, blue, red, green, yellow, grey, pink, orange, teal, maroon = range(10)\n\ndef change_color_at_locations(locations: List[Tuple[int, int]], color: int, grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Changes the color of the cells at the given locations in the grid to the given color.\n    Returns the updated grid.\n    \"\"\"\n    for row, col in locations:\n        grid[row][col] = color\n    return grid\n\ndef get_middle_locations(locations: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    \"\"\"\n    Returns a list of tuples representing the middle locations of the given locations.\n    Each tuple contains the row and column indices of the middle cell of a group of cells\n    that are either in the same row or the same column.\n    \"\"\"\n    middle_locations = []\n    for i in range(len(locations)):\n        row, col = locations[i]\n        same_row = [loc for loc in locations if loc[0] == row]\n        same_col = [loc for loc in locations if loc[1] == col]\n        if len(same_row) > 1:\n            same_row.sort(key=lambda loc: loc[1])\n            middle_col = (same_row[0][1] + same_row[-1][1]) // 2\n            middle_locations.append((row, middle_col))\n        elif len(same_col) > 1:\n            same_col.sort(key=lambda loc: loc[0])\n            middle_row = (same_col[0][0] + same_col[-1][0]) // 2\n            middle_locations.append((middle_row, col))\n    return middle_locations\n\ndef get_color_locations(color: int, grid: np.ndarray) -> List[Tuple[int, int]]:\n    \"\"\"\n    Returns a list of tuples representing the locations of the given color in the grid.\n    Each tuple contains the row and column indices of a cell with the given color.\n    \"\"\"\n    return list(zip(*np.where(grid == color)))\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    out = input_grid\n    for color in range(2, 10):\n        loc1 = get_color_locations(color, out)\n        if loc1:\n            loc2 = get_middle_locations(loc1)\n            out = change_color_at_locations(loc2, color, out)\n    return out"}