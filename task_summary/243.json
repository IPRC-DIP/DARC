{"id": 243, "train_io": {"inputs": [[[3, 3, 3, 3, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0], [3, 3, 3, 3, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0], [3, 3, 3, 3, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0], [3, 3, 3, 3, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0], [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [0, 0, 0, 0, 2, 3, 3, 3, 3, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 2, 3, 3, 3, 3, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 2, 3, 3, 3, 3, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 2, 3, 3, 3, 3, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0], [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 3, 3, 3, 3, 2, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 3, 3, 3, 3, 2, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 3, 3, 3, 3, 2, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 3, 3, 3, 3, 2, 0, 0, 0, 0], [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [3, 3, 3, 3, 2, 3, 3, 3, 3, 2, 3, 3, 3, 3, 2, 0, 0, 0, 0], [3, 3, 3, 3, 2, 3, 3, 3, 3, 2, 3, 3, 3, 3, 2, 0, 0, 0, 0], [3, 3, 3, 3, 2, 3, 3, 3, 3, 2, 3, 3, 3, 3, 2, 0, 0, 0, 0], [3, 3, 3, 3, 2, 3, 3, 3, 3, 2, 3, 3, 3, 3, 2, 0, 0, 0, 0]], [[0, 0, 0, 0, 8, 2, 2, 2, 2, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0], [0, 0, 0, 0, 8, 2, 2, 2, 2, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0], [0, 0, 0, 0, 8, 2, 2, 2, 2, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0], [0, 0, 0, 0, 8, 2, 2, 2, 2, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [2, 2, 2, 2, 8, 1, 1, 1, 1, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0], [2, 2, 2, 2, 8, 1, 1, 1, 1, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0], [2, 2, 2, 2, 8, 1, 1, 1, 1, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0], [2, 2, 2, 2, 8, 1, 1, 1, 1, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 1, 1, 1, 1, 8, 0, 0, 0, 0], [0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 1, 1, 1, 1, 8, 0, 0, 0, 0], [0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 1, 1, 1, 1, 8, 0, 0, 0, 0], [0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 1, 1, 1, 1, 8, 0, 0, 0, 0], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 3, 3, 3, 3], [0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 3, 3, 3, 3], [0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 3, 3, 3, 3], [0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 3, 3, 3, 3]], [[0, 0, 0, 2, 8, 8, 8, 2, 0, 0, 0], [0, 0, 0, 2, 8, 8, 8, 2, 0, 0, 0], [0, 0, 0, 2, 8, 8, 8, 2, 0, 0, 0], [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [8, 8, 8, 2, 8, 8, 8, 2, 0, 0, 0], [8, 8, 8, 2, 8, 8, 8, 2, 0, 0, 0], [8, 8, 8, 2, 8, 8, 8, 2, 0, 0, 0], [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [0, 0, 0, 2, 0, 0, 0, 2, 4, 4, 4], [0, 0, 0, 2, 0, 0, 0, 2, 4, 4, 4], [0, 0, 0, 2, 0, 0, 0, 2, 4, 4, 4]]], "outputs": [[[0, 0, 0, 3], [0, 0, 3, 0], [0, 3, 0, 0], [0, 3, 3, 3]], [[0, 0, 2, 0], [0, 0, 1, 2], [0, 1, 0, 0], [3, 0, 0, 0]], [[0, 8, 0], [0, 8, 8], [4, 0, 0]]]}, "test_io": {"inputs": [[[1, 1, 1, 1, 1, 8, 3, 3, 3, 3, 3, 8, 1, 1, 1, 1, 1, 8, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 8, 3, 3, 3, 3, 3, 8, 1, 1, 1, 1, 1, 8, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 8, 3, 3, 3, 3, 3, 8, 1, 1, 1, 1, 1, 8, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 8, 3, 3, 3, 3, 3, 8, 1, 1, 1, 1, 1, 8, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 8, 3, 3, 3, 3, 3, 8, 1, 1, 1, 1, 1, 8, 1, 1, 1, 1, 1], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [0, 0, 0, 0, 0, 8, 3, 3, 3, 3, 3, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 3, 3, 3, 3, 3, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 3, 3, 3, 3, 3, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 3, 3, 3, 3, 3, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 3, 3, 3, 3, 3, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [2, 2, 2, 2, 2, 8, 3, 3, 3, 3, 3, 8, 0, 0, 0, 0, 0, 8, 2, 2, 2, 2, 2], [2, 2, 2, 2, 2, 8, 3, 3, 3, 3, 3, 8, 0, 0, 0, 0, 0, 8, 2, 2, 2, 2, 2], [2, 2, 2, 2, 2, 8, 3, 3, 3, 3, 3, 8, 0, 0, 0, 0, 0, 8, 2, 2, 2, 2, 2], [2, 2, 2, 2, 2, 8, 3, 3, 3, 3, 3, 8, 0, 0, 0, 0, 0, 8, 2, 2, 2, 2, 2], [2, 2, 2, 2, 2, 8, 3, 3, 3, 3, 3, 8, 0, 0, 0, 0, 0, 8, 2, 2, 2, 2, 2], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [0, 0, 0, 0, 0, 8, 3, 3, 3, 3, 3, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 3, 3, 3, 3, 3, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 3, 3, 3, 3, 3, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 3, 3, 3, 3, 3, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 3, 3, 3, 3, 3, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0]]], "outputs": [[[1, 1, 3, 1], [0, 0, 3, 0], [2, 0, 3, 2], [0, 0, 3, 0]]]}, "solved": true, "generalizable": true, "anpl": "def does_not_meet_other_color(row, len, color):\n    return row[len] == color\n\ndef get_input_coordinate(i, j, len):\n    return (i * (len + 1), j * (len + 1))\n\ndef find_square_side_length(row):\n    (len, color) = (0, row[0])\n    while does_not_meet_other_color(row, len, color):\n        len += 1\n    return len\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    square_side_length = find_square_side_length(input_grid[0])\n    output_len = input_grid.shape[0] // square_side_length\n    output_grid = np.zeros((output_len, output_len), dtype=int)\n    for i in range(output_len):\n        for j in range(output_len):\n            (x, y) = get_input_coordinate(i, j, square_side_length)\n            output_grid[i][j] = input_grid[x][y]\n    return \"flip the grid left and right\"(output_grid)", "python": "import numpy as np\nfrom typing import *\nblack, blue, red, green, yellow, grey, pink, orange, teal, maroon = range(10)\n\ndef does_not_meet_other_color(row, len, color):\n    return row[len] == color\n\ndef flip_grid_left_right(grid: np.ndarray) -> np.ndarray:\n    return np.fliplr(grid)\n\ndef get_input_coordinate(i, j, len):\n    return (i * (len + 1), j * (len + 1))\n\ndef find_square_side_length(row):\n    len, color = (0, row[0])\n    while does_not_meet_other_color(row, len, color):\n        len += 1\n    return len\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    square_side_length = find_square_side_length(input_grid[0])\n    output_len = input_grid.shape[0] // square_side_length\n    output_grid = np.zeros((output_len, output_len), dtype=int)\n    for i in range(output_len):\n        for j in range(output_len):\n            x, y = get_input_coordinate(i, j, square_side_length)\n            output_grid[i][j] = input_grid[x][y]\n    return flip_grid_left_right(output_grid)"}