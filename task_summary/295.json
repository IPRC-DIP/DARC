{"id": 295, "train_io": {"inputs": [[[0, 8, 0, 0, 0, 8, 0], [8, 8, 0, 0, 0, 8, 8], [0, 0, 0, 0, 0, 0, 0], [8, 8, 0, 0, 0, 8, 8], [0, 8, 0, 0, 0, 8, 0]], [[2, 2, 0, 0, 0, 2, 2], [0, 0, 0, 0, 0, 0, 2], [0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 2, 0], [2, 0, 0, 0, 0, 0, 2]], [[4, 4, 0, 0, 0, 4, 0], [0, 0, 0, 0, 0, 4, 4], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [4, 0, 0, 0, 0, 0, 4]], [[4, 0, 0, 0, 0, 0, 4], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [4, 0, 0, 0, 0, 4, 4]], [[0, 3, 0, 0, 0, 3, 0], [3, 0, 0, 0, 0, 0, 3], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 3]]], "outputs": [[[0, 8, 0], [8, 8, 8], [0, 8, 0]], [[2, 2, 2], [0, 2, 2], [2, 0, 2]], [[4, 4, 0], [0, 4, 4], [4, 0, 4]], [[4, 0, 4], [0, 0, 0], [4, 4, 4]], [[0, 3, 0], [3, 0, 3], [0, 0, 3]]]}, "test_io": {"inputs": [[[0, 0, 0, 0, 0, 1, 1], [1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1]]], "outputs": [[[0, 1, 1], [1, 0, 0], [0, 1, 1]]]}, "solved": true, "generalizable": false, "anpl": "import numpy as np\nfrom typing import *\n(black, blue, red, green, yellow, grey, pink, orange, teal, maroon) = range(10)\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    corners = `get the four corners's 2x2 grid in the input_grid`(input_grid)\n    output_grid = np.zeros([3, 3], dtype=np.int32)\n    for i in range(len(corners)):\n        non_black_pixels = `get the non_black_pixels' indices in corners[i]`(corners[i])\n        color = corners[i][non_black_pixels[0][0], non_black_pixels[0][1]]\n        for p in non_black_pixels:\n            (x, y) = p\n            output_grid[i // 2:2 + i // 2, i % 2:2 + i % 2][x, y] = color\n    return output_grid", "python": "import numpy as np\nfrom typing import *\nblack, blue, red, green, yellow, grey, pink, orange, teal, maroon = range(10)\n\ndef get_non_black_pixels_indices(grid: np.ndarray) -> List[Tuple[int, int]]:\n    non_black_pixels = []\n    for i in range(grid.shape[0]):\n        for j in range(grid.shape[1]):\n            if grid[i, j] != black:\n                non_black_pixels.append((i, j))\n    return non_black_pixels\n\ndef get_corners(input_grid: np.ndarray) -> List[np.ndarray]:\n    corners = []\n    corners.append(input_grid[:2, :2])\n    corners.append(input_grid[:2, -2:])\n    corners.append(input_grid[-2:, :2])\n    corners.append(input_grid[-2:, -2:])\n    return corners\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    corners = get_corners(input_grid)\n    output_grid = np.zeros([3, 3], dtype=np.int32)\n    for i in range(len(corners)):\n        non_black_pixels = get_non_black_pixels_indices(corners[i])\n        color = corners[i][non_black_pixels[0][0], non_black_pixels[0][1]]\n        for p in non_black_pixels:\n            x, y = p\n            output_grid[i // 2:2 + i // 2, i % 2:2 + i % 2][x, y] = color\n    return output_grid"}