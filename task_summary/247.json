{"id": 247, "train_io": {"inputs": [[[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [1, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [1, 0, 0]], [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [1, 0, 0, 0]]], "outputs": [[[0, 1], [1, 0], [0, 1], [1, 0], [0, 1], [1, 0], [0, 1], [1, 0], [0, 1], [1, 0]], [[0, 1, 0], [1, 0, 0], [0, 1, 0], [0, 0, 1], [0, 1, 0], [1, 0, 0], [0, 1, 0], [0, 0, 1], [0, 1, 0], [1, 0, 0]], [[0, 0, 0, 1], [0, 0, 1, 0], [0, 1, 0, 0], [1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1], [0, 0, 1, 0], [0, 1, 0, 0], [1, 0, 0, 0]]]}, "test_io": {"inputs": [[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [1, 0, 0, 0, 0]]], "outputs": [[[0, 1, 0, 0, 0], [1, 0, 0, 0, 0], [0, 1, 0, 0, 0], [0, 0, 1, 0, 0], [0, 0, 0, 1, 0], [0, 0, 0, 0, 1], [0, 0, 0, 1, 0], [0, 0, 1, 0, 0], [0, 1, 0, 0, 0], [1, 0, 0, 0, 0]]]}, "solved": true, "generalizable": false, "anpl": "def copy_blue_pixel_left_up(input_grid: np.ndarray) -> np.ndarray:\n    blue_pixel_position = np.where(input_grid == blue)\n    (row, col) = (blue_pixel_position[0][0], blue_pixel_position[1][0])\n    while col > 0:\n        input_grid[row - 1, col - 1] = blue\n        (row, col) = (row - 1, col - 1)\n    return input_grid\n\ndef copy_blue_pixel_right_up(input_grid: np.ndarray) -> np.ndarray:\n    blue_pixel_position = np.where(input_grid == blue)\n    (row, col) = (blue_pixel_position[0][0], blue_pixel_position[1][0])\n    while col < input_grid.shape[1] - 1 and row > 0:\n        input_grid[row - 1, col + 1] = blue\n        (row, col) = (row - 1, col + 1)\n    return input_grid\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    flag = \"Is blue pixel reach the top\"(input_grid)\n    while not flag:\n        copy_blue_pixel_right_up(input_grid)\n        copy_blue_pixel_left_up(input_grid)\n        flag = \"Is blue pixel reach the top\"(input_grid)\n    return input_grid", "python": "import numpy as np\nfrom typing import *\nblack, blue, red, green, yellow, grey, pink, orange, teal, maroon = range(10)\n\ndef copy_blue_pixel_left_up(input_grid: np.ndarray) -> np.ndarray:\n    blue_pixel_position = np.where(input_grid == blue)\n    row, col = (blue_pixel_position[0][0], blue_pixel_position[1][0])\n    while col > 0:\n        input_grid[row - 1, col - 1] = blue\n        row, col = (row - 1, col - 1)\n    return input_grid\n\ndef copy_blue_pixel_right_up(input_grid: np.ndarray) -> np.ndarray:\n    blue_pixel_position = np.where(input_grid == blue)\n    row, col = (blue_pixel_position[0][0], blue_pixel_position[1][0])\n    while col < input_grid.shape[1] - 1 and row > 0:\n        input_grid[row - 1, col + 1] = blue\n        row, col = (row - 1, col + 1)\n    return input_grid\n\ndef is_blue_pixel_reached_top(input_grid: np.ndarray) -> bool:\n    \"\"\"\n    This function checks if the blue pixel has reached the top of the grid.\n\n    Args:\n    input_grid: A numpy array representing the grid.\n\n    Returns:\n    A boolean value indicating if the blue pixel has reached the top of the grid.\n    \"\"\"\n    return blue in input_grid[0]\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    flag = is_blue_pixel_reached_top(input_grid)\n    while not flag:\n        copy_blue_pixel_right_up(input_grid)\n        copy_blue_pixel_left_up(input_grid)\n        flag = is_blue_pixel_reached_top(input_grid)\n    return input_grid"}