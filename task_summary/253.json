{"id": 253, "train_io": {"inputs": [[[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 5, 0, 0, 0, 0, 0, 0], [0, 0, 5, 0, 0, 0, 5, 0, 0], [5, 0, 5, 0, 0, 0, 5, 0, 0], [5, 0, 5, 0, 0, 0, 5, 0, 0], [5, 0, 5, 0, 5, 0, 5, 0, 0], [5, 0, 5, 0, 5, 0, 5, 0, 5], [5, 0, 5, 0, 5, 0, 5, 0, 5], [5, 0, 5, 0, 5, 0, 5, 0, 5]], [[0, 0, 0, 0, 5, 0, 0, 0, 0], [0, 0, 0, 0, 5, 0, 0, 0, 0], [5, 0, 0, 0, 5, 0, 0, 0, 0], [5, 0, 0, 0, 5, 0, 5, 0, 0], [5, 0, 0, 0, 5, 0, 5, 0, 0], [5, 0, 0, 0, 5, 0, 5, 0, 0], [5, 0, 0, 0, 5, 0, 5, 0, 0], [5, 0, 5, 0, 5, 0, 5, 0, 0], [5, 0, 5, 0, 5, 0, 5, 0, 0]]], "outputs": [[[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0, 2], [0, 0, 1, 0, 0, 0, 0, 0, 2], [0, 0, 1, 0, 0, 0, 0, 0, 2]], [[0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 2, 0, 1, 0, 0, 0, 0], [0, 0, 2, 0, 1, 0, 0, 0, 0]]]}, "test_io": {"inputs": [[[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 5, 0], [0, 0, 0, 5, 0, 0, 0, 5, 0], [0, 0, 0, 5, 0, 0, 0, 5, 0], [0, 0, 0, 5, 0, 5, 0, 5, 0], [0, 0, 0, 5, 0, 5, 0, 5, 0], [0, 0, 0, 5, 0, 5, 0, 5, 0], [0, 0, 0, 5, 0, 5, 0, 5, 0], [0, 5, 0, 5, 0, 5, 0, 5, 0]]], "outputs": [[[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0], [0, 2, 0, 0, 0, 0, 0, 1, 0]]]}, "solved": true, "generalizable": true, "anpl": "def main(input_grid: np.ndarray) -> np.ndarray:\n    a = \"Return the column with the highest gray pixels\"(input_grid)\n    b = \"Return the column with the lowest grey pixels, and the number of grey pixels is not zero\"(input_grid)\n    out = \"Replace grey pixels in column a with blue\"(input_grid, a)\n    out = \"Replace grey pixels in column b with red\"(out, b)\n    out = \"Replace grey pixels with black\"(out)\n    return out", "python": "import numpy as np\nfrom typing import *\nblack, blue, red, green, yellow, grey, pink, orange, teal, maroon = range(10)\n\ndef replace_grey_with_black(input_grid: np.ndarray) -> np.ndarray:\n    input_grid[input_grid == grey] = black\n    return input_grid\n\ndef replace_grey_with_red_in_column(input_grid: np.ndarray, column: int) -> np.ndarray:\n    input_grid[:, column][input_grid[:, column] == grey] = red\n    return input_grid\n\ndef replace_grey_with_blue_in_column(input_grid: np.ndarray, column: int) -> np.ndarray:\n    input_grid[:, column][input_grid[:, column] == grey] = blue\n    return input_grid\n\ndef get_column_with_lowest_nonzero_gray_pixels(input_grid: np.ndarray) -> int:\n    gray_pixels_per_column = np.sum(input_grid == grey, axis=0)\n    nonzero_gray_pixels_per_column = np.where(gray_pixels_per_column > 0, gray_pixels_per_column, np.inf)\n    return np.argmin(nonzero_gray_pixels_per_column)\n\ndef get_column_with_highest_gray_pixels(input_grid: np.ndarray) -> int:\n    gray_pixels_per_column = np.sum(input_grid == grey, axis=0)\n    return np.argmax(gray_pixels_per_column)\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    a = get_column_with_highest_gray_pixels(input_grid)\n    b = get_column_with_lowest_nonzero_gray_pixels(input_grid)\n    out = replace_grey_with_blue_in_column(input_grid, a)\n    out = replace_grey_with_red_in_column(out, b)\n    out = replace_grey_with_black(out)\n    return out"}