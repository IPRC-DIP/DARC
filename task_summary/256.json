{"id": 256, "train_io": {"inputs": [[[0, 7, 7, 7, 1, 0, 4, 0, 4], [7, 7, 7, 0, 1, 4, 4, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 4], [7, 0, 0, 0, 1, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 1, 6, 6, 6, 0], [0, 0, 8, 8, 1, 0, 0, 0, 0], [8, 0, 8, 0, 1, 6, 0, 0, 6], [0, 0, 0, 8, 1, 0, 0, 0, 0]], [[7, 7, 7, 0, 1, 0, 4, 0, 0], [7, 0, 7, 0, 1, 4, 0, 4, 4], [0, 7, 0, 7, 1, 4, 0, 4, 4], [0, 0, 0, 7, 1, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 8, 0, 1, 6, 0, 0, 6], [0, 0, 0, 0, 1, 6, 0, 0, 0], [0, 0, 0, 0, 1, 6, 6, 0, 6], [8, 8, 8, 0, 1, 6, 0, 6, 6]], [[0, 0, 7, 7, 1, 0, 4, 4, 0], [0, 0, 0, 7, 1, 0, 0, 4, 4], [7, 7, 7, 7, 1, 0, 0, 0, 4], [0, 7, 0, 0, 1, 0, 4, 4, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 8, 8, 1, 0, 6, 6, 6], [0, 0, 0, 0, 1, 0, 0, 6, 0], [0, 0, 0, 8, 1, 6, 0, 6, 0], [8, 0, 0, 0, 1, 6, 6, 0, 0]], [[7, 7, 0, 0, 1, 4, 4, 0, 4], [7, 0, 7, 0, 1, 4, 0, 0, 0], [7, 0, 0, 7, 1, 4, 4, 4, 0], [7, 0, 7, 7, 1, 4, 0, 4, 4], [1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 8, 0, 1, 0, 0, 0, 0], [0, 0, 8, 0, 1, 6, 6, 0, 0], [0, 0, 8, 0, 1, 0, 6, 6, 6], [0, 8, 0, 8, 1, 0, 6, 6, 0]], [[7, 7, 0, 0, 1, 0, 0, 0, 4], [7, 0, 0, 0, 1, 4, 4, 4, 4], [7, 0, 7, 0, 1, 4, 0, 0, 0], [0, 7, 7, 0, 1, 4, 4, 4, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1], [8, 0, 8, 0, 1, 6, 6, 6, 6], [0, 0, 8, 8, 1, 0, 0, 6, 0], [0, 0, 0, 0, 1, 0, 6, 0, 6], [8, 8, 8, 8, 1, 0, 0, 0, 6]], [[7, 0, 0, 7, 1, 4, 4, 4, 0], [0, 7, 7, 7, 1, 4, 4, 0, 4], [7, 7, 7, 0, 1, 4, 4, 0, 4], [7, 7, 7, 0, 1, 0, 4, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1], [8, 8, 0, 8, 1, 6, 6, 6, 6], [0, 8, 8, 8, 1, 0, 0, 0, 6], [0, 8, 0, 8, 1, 0, 0, 6, 0], [8, 8, 0, 8, 1, 0, 6, 0, 0]]], "outputs": [[[6, 7, 7, 7], [7, 7, 7, 8], [8, 0, 8, 4], [7, 0, 0, 8]], [[7, 7, 7, 6], [7, 0, 7, 4], [4, 7, 4, 7], [8, 8, 8, 7]], [[0, 4, 7, 7], [0, 0, 4, 7], [7, 7, 7, 7], [8, 7, 4, 0]], [[7, 7, 8, 4], [7, 6, 7, 0], [7, 4, 4, 7], [7, 8, 7, 7]], [[7, 7, 8, 4], [7, 4, 4, 4], [7, 6, 7, 6], [4, 7, 7, 8]], [[7, 4, 4, 7], [4, 7, 7, 7], [7, 7, 7, 4], [7, 7, 7, 8]]]}, "test_io": {"inputs": [[[7, 7, 7, 0, 1, 0, 0, 4, 0], [0, 7, 7, 0, 1, 4, 4, 0, 4], [7, 7, 7, 7, 1, 0, 4, 0, 4], [7, 0, 0, 0, 1, 4, 0, 4, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 8, 1, 0, 6, 0, 6], [8, 0, 0, 8, 1, 6, 0, 0, 6], [8, 0, 8, 0, 1, 6, 6, 6, 6], [0, 8, 0, 8, 1, 0, 6, 0, 0]]], "outputs": [[[7, 7, 7, 8], [4, 7, 7, 4], [7, 7, 7, 7], [7, 8, 4, 8]]]}, "solved": true, "generalizable": true, "anpl": "def separate_grids(input):\n    grids = []\n    for i in range(2):\n        for j in range(2):\n            grid = input[i * 5:(i + 1) * 5 - 1, j * 5:(j + 1) * 5 - 1]\n            grids.append(grid)\n    return grids\n\ndef main(input_grid):\n    grids = separate_grids(input_grid)\n    output = np.zeros((4, 4), dtype=np.int32)\n    for i in range(4):\n        output = \"if the position in input two is not black, color the input one according to the corresponding position in input two\"(output, grids[3 - i])\n    return output", "python": "import numpy as np\nfrom typing import *\nblack, blue, red, green, yellow, grey, pink, orange, teal, maroon = range(10)\n\ndef color_output(output: np.ndarray, color_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Colors the output grid according to the color grid.\n\n    Args:\n    output: A 4x4 numpy array representing the output grid.\n    color_grid: A 4x4 numpy array representing the color grid.\n\n    Returns:\n    A 4x4 numpy array with colored cells.\n    \"\"\"\n    for i in range(4):\n        for j in range(4):\n            if color_grid[i][j] != black:\n                output[i][j] = color_grid[i][j]\n    return output\n\ndef separate_grids(input):\n    grids = []\n    for i in range(2):\n        for j in range(2):\n            grid = input[i * 5:(i + 1) * 5 - 1, j * 5:(j + 1) * 5 - 1]\n            grids.append(grid)\n    return grids\n\ndef main(input_grid):\n    grids = separate_grids(input_grid)\n    output = np.zeros((4, 4), dtype=np.int32)\n    for i in range(4):\n        output = color_output(output, grids[3 - i])\n    return output"}