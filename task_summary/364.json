{"id": 364, "train_io": {"inputs": [[[0, 0, 0, 0, 0, 0, 8, 8, 8, 8], [0, 8, 8, 8, 8, 0, 8, 2, 2, 8], [0, 8, 1, 8, 8, 0, 8, 8, 8, 8], [0, 8, 8, 2, 8, 0, 8, 2, 1, 8], [0, 8, 8, 8, 8, 0, 8, 8, 8, 8], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 8, 8, 8, 8, 8, 8, 0], [0, 0, 0, 8, 8, 8, 2, 8, 8, 0], [0, 0, 0, 8, 2, 8, 1, 8, 8, 0], [0, 0, 0, 8, 1, 8, 8, 8, 8, 0]], [[1, 1, 1, 8, 0, 0, 0, 0, 0, 0], [1, 8, 1, 1, 0, 1, 8, 8, 1, 8], [8, 2, 8, 1, 0, 8, 1, 8, 2, 8], [1, 1, 1, 8, 0, 8, 8, 8, 8, 1], [8, 1, 8, 8, 0, 8, 1, 2, 8, 2], [0, 0, 0, 0, 0, 8, 8, 8, 1, 8], [0, 0, 0, 0, 0, 1, 1, 8, 1, 8], [0, 8, 2, 2, 0, 8, 1, 1, 8, 2], [0, 2, 2, 1, 0, 0, 0, 0, 0, 0], [0, 2, 1, 8, 0, 0, 0, 0, 0, 0]], [[2, 8, 8, 8, 0, 0, 0, 0, 0, 0], [8, 8, 1, 8, 0, 0, 0, 0, 0, 0], [1, 8, 8, 8, 0, 0, 0, 0, 0, 0], [8, 8, 8, 2, 0, 0, 1, 8, 8, 2], [8, 2, 8, 1, 0, 0, 8, 8, 1, 8], [8, 1, 8, 8, 0, 0, 8, 2, 8, 8], [0, 0, 0, 0, 0, 0, 8, 8, 8, 1], [0, 0, 0, 0, 0, 0, 1, 8, 8, 8], [0, 0, 0, 0, 0, 0, 8, 8, 1, 8], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]], "outputs": [[[8, 8, 8, 8], [8, 2, 2, 8], [8, 8, 8, 8], [8, 2, 1, 8], [8, 8, 8, 8]], [[8, 2, 2], [2, 2, 1], [2, 1, 8]], [[2, 8, 8, 8], [8, 8, 1, 8], [1, 8, 8, 8], [8, 8, 8, 2], [8, 2, 8, 1], [8, 1, 8, 8]]]}, "test_io": {"inputs": [[[2, 8, 8, 8, 0, 0, 0, 0, 0, 0], [8, 8, 1, 8, 0, 0, 2, 8, 1, 0], [1, 2, 8, 1, 0, 0, 8, 8, 8, 0], [8, 8, 8, 8, 0, 0, 2, 1, 8, 0], [0, 0, 0, 0, 0, 0, 8, 8, 2, 0], [0, 0, 0, 0, 0, 0, 2, 8, 1, 0], [0, 1, 2, 8, 2, 0, 1, 8, 8, 0], [0, 8, 8, 1, 8, 0, 0, 0, 0, 0], [0, 1, 2, 8, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]], "outputs": [[[2, 8, 1], [8, 8, 8], [2, 1, 8], [8, 8, 2], [2, 8, 1], [1, 8, 8]]]}, "solved": true, "generalizable": true, "anpl": null, "python": "import numpy as np\nfrom typing import *\nblack, blue, red, green, yellow, grey, pink, orange, teal, maroon = range(10)\n\ndef find_max_red_rectangle(input_grid: np.ndarray, teal_rectangles: List[Tuple[int, int, int, int]]) -> np.ndarray:\n    \"\"\"\n    Given an input grid and a list of teal rectangles, this function finds the rectangle with the most red pixels.\n\n    Args:\n    - input_grid (np.ndarray): a 2D numpy array representing the input grid\n    - teal_rectangles (List[Tuple[int, int, int, int]]): a list of tuples containing the starting row index, starting column index, height, and width of each teal rectangle\n\n    Returns:\n    - np.ndarray: a 2D numpy array representing the rectangle with the most red pixels\n    \"\"\"\n    max_red_rectangle = np.zeros([1, 1])\n    max_red_pixels = 0\n    for i, j, h, w in teal_rectangles:\n        red_pixels = np.sum(input_grid[i:i + h, j:j + w] == red)\n        if red_pixels > max_red_pixels:\n            max_red_pixels = red_pixels\n            max_red_rectangle = input_grid[i:i + h, j:j + w]\n    return max_red_rectangle\n\ndef find_teal_rectangle(input_grid: np.ndarray, i: int, j: int) -> Tuple[int, int]:\n    \"\"\"\n    Given an input grid, starting indices i and j, this function finds the height and width of the teal rectangle\n    starting at (i, j) and may contain blue and red pixels.\n\n    Args:\n    - input_grid (np.ndarray): a 2D numpy array representing the input grid\n    - i (int): the starting row index\n    - j (int): the starting column index\n\n    Returns:\n    - Tuple[int, int]: a tuple containing the height and width of the teal rectangle\n    \"\"\"\n    height, width = (0, 0)\n    if input_grid[i][j] == teal or input_grid[i][j] == red or input_grid[i][j] == blue:\n        height, width = (1, 1)\n        for k in range(i + 1, input_grid.shape[0]):\n            if input_grid[k][j] == teal or input_grid[k][j] == blue or input_grid[k][j] == red:\n                height += 1\n            else:\n                break\n        for k in range(j + 1, input_grid.shape[1]):\n            if input_grid[i][k] == teal or input_grid[i][k] == blue or input_grid[i][k] == red:\n                width += 1\n            else:\n                break\n    return (height, width)\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    teal_rectangles = []\n    rows, cols = input_grid.shape\n    flag = np.zeros([rows, cols])\n    for i in range(rows):\n        for j in range(cols):\n            if (input_grid[i][j] == teal or input_grid[i][j] == red or input_grid[i][j] == blue) and (not flag[i, j]):\n                h, w = find_teal_rectangle(input_grid, i, j)\n                if h > 0 and w > 0:\n                    teal_rectangles.append((i, j, h, w))\n                    flag[i:i + h, j:j + w] = 1\n    max_red_rectangle = find_max_red_rectangle(input_grid, teal_rectangles)\n    return max_red_rectangle"}