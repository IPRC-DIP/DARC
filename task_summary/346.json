{"id": 346, "train_io": {"inputs": [[[4, 4, 0, 3, 3, 0], [4, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 3]], [[4, 0, 4, 3, 3, 0], [4, 0, 0, 3, 0, 0], [0, 0, 4, 3, 0, 0]], [[0, 0, 4, 0, 3, 0], [0, 4, 4, 3, 0, 3], [4, 4, 0, 0, 0, 3]], [[4, 4, 0, 3, 0, 0], [0, 0, 0, 0, 0, 3], [4, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 3, 0], [4, 0, 0, 0, 0, 0], [0, 0, 4, 3, 3, 0]]], "outputs": [[[6, 6, 0], [6, 0, 0], [0, 0, 6]], [[6, 6, 6], [6, 0, 0], [6, 0, 6]], [[0, 6, 6], [6, 6, 6], [6, 6, 6]], [[6, 6, 0], [0, 0, 6], [6, 0, 0]], [[0, 6, 0], [6, 0, 0], [6, 6, 6]]]}, "test_io": {"inputs": [[[0, 4, 4, 3, 0, 0], [4, 0, 0, 3, 3, 0], [0, 4, 0, 3, 0, 0]], [[0, 0, 4, 0, 3, 0], [0, 4, 0, 3, 3, 3], [4, 0, 0, 3, 0, 0]]], "outputs": [[[6, 6, 6], [6, 6, 0], [6, 6, 0]], [[0, 6, 6], [6, 6, 6], [6, 0, 0]]]}, "solved": true, "generalizable": true, "anpl": "import numpy as np\nfrom typing import *\n(black, blue, red, green, yellow, grey, pink, orange, teal, maroon) = range(10)\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    (sub1, sub2) = `split the 3x6 input_grid into two 3x3 grid`(input_grid)\n    new = `creat a grid same as sub1`(sub1)\n    copy = `copy the not black pixels in sub2 to new at the same position`(sub1, sub2, new)\n    out = `turn all not black pixels in copy to pink`(copy)\n    return out", "python": "import numpy as np\nfrom typing import *\nblack, blue, red, green, yellow, grey, pink, orange, teal, maroon = range(10)\n\ndef turn_non_black_to_pink(copy: np.ndarray) -> np.ndarray:\n    copy[copy != black] = pink\n    return copy\n\ndef copy_non_black_pixels(sub1: np.ndarray, sub2: np.ndarray, new: np.ndarray) -> np.ndarray:\n    mask = sub2 != black\n    new[mask] = sub2[mask]\n    return new\n\ndef create_sub1_grid(input_grid: np.ndarray) -> np.ndarray:\n    sub1 = input_grid[:, :3]\n    return sub1\n\ndef split_grid(input_grid: np.ndarray) -> Tuple[np.ndarray, np.ndarray]:\n    sub1 = input_grid[:, :3]\n    sub2 = input_grid[:, 3:]\n    return (sub1, sub2)\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    sub1, sub2 = split_grid(input_grid)\n    new = create_sub1_grid(sub1)\n    copy = copy_non_black_pixels(sub1, sub2, new)\n    out = turn_non_black_to_pink(copy)\n    return out"}