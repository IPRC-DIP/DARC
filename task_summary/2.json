{"id": 2, "train_io": {"inputs": [[[0, 1, 0], [1, 1, 0], [0, 1, 0], [0, 1, 1], [0, 1, 0], [1, 1, 0]], [[0, 1, 0], [1, 0, 1], [0, 1, 0], [1, 0, 1], [0, 1, 0], [1, 0, 1]], [[0, 1, 0], [1, 1, 0], [0, 1, 0], [0, 1, 0], [1, 1, 0], [0, 1, 0]]], "outputs": [[[0, 2, 0], [2, 2, 0], [0, 2, 0], [0, 2, 2], [0, 2, 0], [2, 2, 0], [0, 2, 0], [0, 2, 2], [0, 2, 0]], [[0, 2, 0], [2, 0, 2], [0, 2, 0], [2, 0, 2], [0, 2, 0], [2, 0, 2], [0, 2, 0], [2, 0, 2], [0, 2, 0]], [[0, 2, 0], [2, 2, 0], [0, 2, 0], [0, 2, 0], [2, 2, 0], [0, 2, 0], [0, 2, 0], [2, 2, 0], [0, 2, 0]]]}, "test_io": {"inputs": [[[1, 1, 1], [0, 1, 0], [0, 1, 0], [1, 1, 1], [0, 1, 0], [0, 1, 0]]], "outputs": [[[2, 2, 2], [0, 2, 0], [0, 2, 0], [2, 2, 2], [0, 2, 0], [0, 2, 0], [2, 2, 2], [0, 2, 0], [0, 2, 0]]]}, "solved": true, "generalizable": false, "anpl": "def main(input_grid: np.ndarray) -> np.ndarray:\n    output = \"create black 9*3 array\"()\n    output = \"input is 6*3, output is 9*3, copy input to output in top six rows\"(input_grid, output)\n    bottom = \"Symmetrical left and right for the first three lines of input\"(input_grid)\n    output = \"copy bottom to output bottom three rows\"(bottom, output)\n    output = \"turn blue to red\"(output)\n    return output", "python": "import numpy as np\nfrom typing import *\nblack, blue, red, green, yellow, grey, pink, orange, teal, maroon = range(10)\n\ndef turn_blue_to_red(input_grid: np.ndarray) -> np.ndarray:\n    output = np.copy(input_grid)\n    output[output == blue] = red\n    return output\n\ndef copy_bottom_to_output_bottom_three_rows(bottom: np.ndarray, output: np.ndarray) -> np.ndarray:\n    output[-3:, :] = bottom[:3, :]\n    return output\n\ndef symmetrical_left_right(input_grid: np.ndarray) -> np.ndarray:\n    return np.concatenate((input_grid[:, ::-1], input_grid), axis=1)[:, :3]\n\ndef copy_up_six_rows(input_grid: np.ndarray, output: np.ndarray) -> np.ndarray:\n    output[:6, :] = input_grid\n    return output\n\ndef create_array() -> np.ndarray:\n    return np.zeros((9, 3), dtype=int)\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    output = create_array()\n    output = copy_up_six_rows(input_grid, output)\n    bottom = symmetrical_left_right(input_grid)\n    output = copy_bottom_to_output_bottom_three_rows(bottom, output)\n    output = turn_blue_to_red(output)\n    return output"}