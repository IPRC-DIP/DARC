{"id": 315, "train_io": {"inputs": [[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 6, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 7, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 9], [0, 0, 8, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 4, 0, 0, 0, 0, 0, 0, 2], [0, 0, 0, 0, 0, 0, 8, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 6, 0, 0, 0, 0, 0], [9, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 5, 0], [0, 3, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0, 0, 3], [0, 0, 5, 0, 0, 9, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [0, 4, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 5, 0, 0], [0, 0, 0, 0, 3, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]], "outputs": [[[3, 1, 8], [9, 7, 6], [0, 0, 0]], [[9, 3, 4], [5, 8, 6], [2, 0, 0]], [[2, 4, 5], [1, 9, 3], [5, 1, 3]]]}, "test_io": {"inputs": [[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 5, 0, 9, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 6, 0, 0], [0, 0, 0, 3, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 4, 0, 0, 0, 0], [0, 0, 9, 0, 0, 0, 0, 0, 0, 0]]], "outputs": [[[5, 2, 9], [4, 5, 3], [9, 6, 1]]]}, "solved": true, "generalizable": false, "anpl": "import numpy as np\nfrom typing import *\n(black, blue, red, green, yellow, grey, pink, orange, teal, maroon) = range(10)\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    In the input, you should see a n*n grid with multiple color pixels.\n    \"\"\"\n    color_list = `Traverse each column, if there is a non-black pixel in this column, add the color of the pixel to the return list. After the traversal is complete, return the answer list`(input_grid)\n    ans_grid = `Arrange the pixels in the color_list in order in the 3*3 grid. After the arrangement is completed,  return to the grid`(color_list)\n    ans_grid[1, :] = ans_grid[1, ::-1]\n    return ans_grid", "python": "import numpy as np\nfrom typing import *\nblack, blue, red, green, yellow, grey, pink, orange, teal, maroon = range(10)\n\ndef arrange_pixels(color_list: List[int]) -> np.ndarray:\n    \"\"\"\n    Given a list of colors, arrange them in a 3x3 grid in order and return the resulting grid.\n    \"\"\"\n    ans_grid = np.zeros((3, 3), dtype=int)\n    for i in range(9):\n        ans_grid[i // 3][i % 3] = color_list[i]\n    return ans_grid\n\ndef get_column_colors(grid: np.ndarray) -> List[int]:\n    \"\"\"\n    Traverse each column, if there is a non-black pixel in this column, add the color of the pixel to the return list.\n    After the traversal is complete, return the answer list.\n    \"\"\"\n    color_list = []\n    for col in range(grid.shape[1]):\n        for row in range(grid.shape[0]):\n            if grid[row][col] != black:\n                color_list.append(grid[row][col])\n                break\n    return color_list\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    In the input, you should see a n*n grid with multiple color pixels.\n    \"\"\"\n    color_list = get_column_colors(input_grid)\n    ans_grid = arrange_pixels(color_list)\n    ans_grid[1, :] = ans_grid[1, ::-1]\n    return ans_grid"}