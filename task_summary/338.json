{"id": 338, "train_io": {"inputs": [[[0, 0, 0], [1, 0, 0], [0, 1, 0]], [[0, 2, 0], [2, 0, 0], [0, 2, 0]], [[0, 7, 0], [0, 0, 0], [0, 0, 0]], [[0, 8, 0], [8, 8, 0], [8, 0, 0]]], "outputs": [[[1, 1]], [[2, 2, 2]], [[7]], [[8, 8, 8, 8]]]}, "test_io": {"inputs": [[[4, 4, 0], [4, 0, 4], [0, 0, 4]]], "outputs": [[[4, 4, 4, 4, 4]]]}, "solved": true, "generalizable": true, "anpl": null, "python": "import numpy as np\nfrom typing import *\nblack, blue, red, green, yellow, grey, pink, orange, teal, maroon = range(10)\n\ndef change_all_squares_to_color(input_grid: np.ndarray, color: int) -> np.ndarray:\n    \"\"\"\n    Given an input grid and a color, this function returns the grid with all squares changed to the input color.\n    \n    Args:\n    input_grid: A numpy array representing the input grid.\n    color: An integer representing the input color.\n    \n    Returns:\n    A numpy array representing the grid with all squares changed to the input color.\n    \"\"\"\n    for i in range(input_grid.shape[0]):\n        for j in range(input_grid.shape[1]):\n            input_grid[i][j] = color\n    return input_grid\n\ndef find_num_non_black_squares(input_grid: np.ndarray) -> int:\n    \"\"\"\n    Given an input grid, this function returns the number of non-black squares.\n    \n    Args:\n    input_grid: A numpy array representing the input grid.\n    \n    Returns:\n    An integer representing the number of non-black squares.\n    \"\"\"\n    count = 0\n    for i in range(input_grid.shape[0]):\n        for j in range(input_grid.shape[1]):\n            if input_grid[i][j] != black:\n                count += 1\n    return count\n\ndef find_non_black_color(input_grid: np.ndarray) -> int:\n    \"\"\"\n    Given an input grid, this function returns the color of a non-black square.\n    \n    Args:\n    input_grid: A numpy array representing the input grid.\n    \n    Returns:\n    An integer representing the color of a non-black square.\n    \"\"\"\n    for i in range(input_grid.shape[0]):\n        for j in range(input_grid.shape[1]):\n            if input_grid[i][j] != black:\n                return input_grid[i][j]\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    color = find_non_black_color(input_grid)\n    number = find_num_non_black_squares(input_grid)\n    output_grid = np.zeros((1, number), dtype=int)\n    output_grid = change_all_squares_to_color(output_grid, color)\n    return output_grid"}