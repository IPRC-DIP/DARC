{"id": 141, "train_io": {"inputs": [[[3, 3, 3], [0, 2, 2], [1, 1, 0]], [[3, 3, 1], [1, 3, 0], [0, 2, 2]], [[2, 1, 0], [0, 2, 3], [0, 3, 0]]], "outputs": [[[3, 3, 3, 3, 3, 3], [0, 2, 2, 2, 2, 0], [1, 1, 0, 0, 1, 1], [1, 1, 0, 0, 1, 1], [0, 2, 2, 2, 2, 0], [3, 3, 3, 3, 3, 3]], [[3, 3, 1, 1, 3, 3], [1, 3, 0, 0, 3, 1], [0, 2, 2, 2, 2, 0], [0, 2, 2, 2, 2, 0], [1, 3, 0, 0, 3, 1], [3, 3, 1, 1, 3, 3]], [[2, 1, 0, 0, 1, 2], [0, 2, 3, 3, 2, 0], [0, 3, 0, 0, 3, 0], [0, 3, 0, 0, 3, 0], [0, 2, 3, 3, 2, 0], [2, 1, 0, 0, 1, 2]]]}, "test_io": {"inputs": [[[1, 1, 0], [0, 3, 2], [3, 3, 0]]], "outputs": [[[1, 1, 0, 0, 1, 1], [0, 3, 2, 2, 3, 0], [3, 3, 0, 0, 3, 3], [3, 3, 0, 0, 3, 3], [0, 3, 2, 2, 3, 0], [1, 1, 0, 0, 1, 1]]]}, "solved": true, "generalizable": true, "anpl": "def main(input_grid: np.ndarray) -> np.ndarray:\n    grid1 = \"the horizontal combination of the input grid with its horizontal mirrored version\"(input_grid)\n    output_grid = \"the vertical combination of grid A with its vertical mirrored version\"(grid1)\n    return output_grid", "python": "import numpy as np\nfrom typing import *\nblack, blue, red, green, yellow, grey, pink, orange, teal, maroon = range(10)\n\ndef vertical_mirror(input_grid: np.ndarray) -> np.ndarray:\n    return np.concatenate((input_grid, np.flipud(input_grid)), axis=0)\n\ndef horizontal_mirror(input_grid: np.ndarray) -> np.ndarray:\n    return np.concatenate((input_grid, np.fliplr(input_grid)), axis=1)\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    grid1 = horizontal_mirror(input_grid)\n    output_grid = vertical_mirror(grid1)\n    return output_grid"}