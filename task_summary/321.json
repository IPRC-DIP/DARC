{"id": 321, "train_io": {"inputs": [[[0, 0, 6], [0, 4, 0], [3, 0, 0]], [[0, 2, 0], [7, 0, 8], [0, 0, 0]], [[4, 0, 0], [0, 2, 0], [0, 0, 0]]], "outputs": [[[0, 0, 6], [0, 4, 6], [3, 4, 6]], [[0, 2, 0], [7, 2, 8], [7, 2, 8]], [[4, 0, 0], [4, 2, 0], [4, 2, 0]]]}, "test_io": {"inputs": [[[4, 0, 8], [0, 0, 0], [0, 7, 0]]], "outputs": [[[4, 0, 8], [4, 0, 8], [4, 7, 8]]]}, "solved": true, "generalizable": true, "anpl": null, "python": "import numpy as np\nfrom typing import *\nblack, blue, red, green, yellow, grey, pink, orange, teal, maroon = range(10)\n\ndef fill_blocks_below(input_grid: np.ndarray, x: int, y: int) -> np.ndarray:\n    \"\"\"\n    This function takes a numpy array and the indexes of a colored block as input and fills the blocks below it with its color.\n    \n    Args:\n    input_grid: A numpy array representing the input grid.\n    x: An integer representing the row index of the colored block.\n    y: An integer representing the column index of the colored block.\n    \n    Returns:\n    A numpy array with the blocks below the colored block filled with its color.\n    \"\"\"\n    color = input_grid[x][y]\n    for i in range(x + 1, input_grid.shape[0]):\n        if input_grid[i][y] == black:\n            input_grid[i][y] = color\n        else:\n            break\n    return input_grid\n\ndef find_non_black_indexes(input_grid: np.ndarray) -> List[Tuple[int, int]]:\n    \"\"\"\n    This function takes a numpy array as input and returns a list of tuples containing the indexes of non-black blocks in the grid.\n    \n    Args:\n    input_grid: A numpy array representing the input grid.\n    \n    Returns:\n    A list of tuples containing the indexes of non-black blocks in the grid.\n    \"\"\"\n    non_black_indexes = []\n    for i in range(input_grid.shape[0]):\n        for j in range(input_grid.shape[1]):\n            if input_grid[i][j] != black:\n                non_black_indexes.append((i, j))\n    return non_black_indexes\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    colored_index_list = find_non_black_indexes(input_grid)\n    for x, y in colored_index_list:\n        input_grid = fill_blocks_below(input_grid, x, y)\n    return input_grid"}