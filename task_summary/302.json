{"id": 302, "train_io": {"inputs": [[[1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1], [1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0], [1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1], [1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0], [1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1], [1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1], [1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1]], [[8, 8, 8, 8, 0, 8, 8, 8, 8, 8, 0, 0, 8, 8], [0, 8, 0, 0, 0, 0, 8, 8, 8, 8, 0, 8, 8, 8], [8, 8, 0, 8, 0, 8, 8, 8, 8, 8, 0, 0, 8, 8], [8, 0, 8, 8, 0, 8, 8, 0, 0, 8, 0, 8, 8, 0], [8, 8, 8, 8, 0, 8, 8, 0, 0, 0, 0, 8, 8, 8], [8, 8, 8, 0, 0, 8, 8, 0, 8, 0, 0, 8, 8, 8], [8, 0, 8, 8, 0, 8, 8, 8, 8, 8, 0, 0, 0, 8], [8, 8, 0, 0, 0, 8, 0, 0, 8, 8, 0, 0, 8, 8], [8, 0, 0, 8, 0, 8, 8, 8, 0, 8, 0, 8, 8, 8], [8, 8, 0, 8, 0, 8, 8, 8, 8, 8, 0, 0, 8, 0], [0, 8, 0, 8, 0, 0, 0, 0, 0, 0, 0, 8, 0, 8], [8, 8, 8, 8, 0, 8, 8, 8, 8, 8, 0, 0, 8, 0]], [[3, 0, 3, 3, 3, 3, 3, 0, 3, 3, 3, 0, 3, 0, 3], [3, 0, 3, 0, 3, 3, 3, 0, 3, 0, 3, 0, 0, 3, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 0, 0, 3, 0, 0, 3, 3, 0, 3, 0, 3, 3, 0, 0], [3, 0, 3, 3, 3, 3, 3, 3, 3, 3, 0, 3, 3, 3, 3], [3, 0, 3, 3, 3, 3, 3, 3, 0, 0, 3, 3, 0, 3, 3], [0, 0, 3, 0, 3, 0, 3, 0, 3, 0, 0, 3, 3, 3, 0], [3, 0, 0, 3, 3, 3, 0, 0, 3, 0, 3, 3, 0, 0, 3], [3, 0, 3, 3, 3, 3, 3, 0, 3, 3, 3, 3, 3, 0, 3], [3, 0, 0, 3, 3, 0, 3, 3, 3, 3, 3, 3, 3, 3, 0], [3, 0, 3, 3, 3, 3, 3, 3, 0, 3, 3, 3, 0, 3, 3], [3, 0, 3, 3, 3, 0, 3, 0, 0, 3, 0, 3, 3, 3, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 0, 3, 0, 0, 3, 0, 3, 3, 0, 3, 3, 3, 3, 0], [3, 0, 0, 3, 0, 3, 3, 0, 3, 0, 3, 3, 0, 0, 3], [3, 0, 0, 3, 3, 3, 3, 3, 0, 3, 3, 0, 0, 3, 3], [0, 0, 3, 3, 0, 3, 3, 0, 0, 3, 0, 3, 0, 3, 0]]], "outputs": [[[1, 0, 0, 0, 1, 1, 1, 1, 2, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [1, 0, 1, 0, 1, 1, 1, 1, 2, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1], [1, 1, 1, 1, 0, 0, 1, 1, 2, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0], [1, 0, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 1, 1, 0, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 0, 1, 0, 1, 1, 0, 2, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1], [1, 0, 0, 1, 1, 0, 1, 0, 2, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0], [1, 1, 0, 0, 1, 1, 1, 1, 2, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [1, 1, 1, 0, 0, 1, 1, 1, 2, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1], [1, 1, 0, 0, 1, 1, 0, 0, 2, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1], [1, 0, 1, 0, 1, 0, 0, 1, 2, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1]], [[8, 8, 8, 8, 2, 8, 8, 8, 8, 8, 2, 0, 8, 8], [0, 8, 0, 0, 2, 0, 8, 8, 8, 8, 2, 8, 8, 8], [8, 8, 0, 8, 2, 8, 8, 8, 8, 8, 2, 0, 8, 8], [8, 0, 8, 8, 2, 8, 8, 0, 0, 8, 2, 8, 8, 0], [8, 8, 8, 8, 2, 8, 8, 0, 0, 0, 2, 8, 8, 8], [8, 8, 8, 0, 2, 8, 8, 0, 8, 0, 2, 8, 8, 8], [8, 0, 8, 8, 2, 8, 8, 8, 8, 8, 2, 0, 0, 8], [8, 8, 0, 0, 2, 8, 0, 0, 8, 8, 2, 0, 8, 8], [8, 0, 0, 8, 2, 8, 8, 8, 0, 8, 2, 8, 8, 8], [8, 8, 0, 8, 2, 8, 8, 8, 8, 8, 2, 0, 8, 0], [0, 8, 0, 8, 2, 0, 0, 0, 0, 0, 2, 8, 0, 8], [8, 8, 8, 8, 2, 8, 8, 8, 8, 8, 2, 0, 8, 0]], [[3, 2, 3, 3, 3, 3, 3, 0, 3, 3, 3, 0, 3, 0, 3], [3, 2, 3, 0, 3, 3, 3, 0, 3, 0, 3, 0, 0, 3, 0], [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [3, 2, 0, 3, 0, 0, 3, 3, 0, 3, 0, 3, 3, 0, 0], [3, 2, 3, 3, 3, 3, 3, 3, 3, 3, 0, 3, 3, 3, 3], [3, 2, 3, 3, 3, 3, 3, 3, 0, 0, 3, 3, 0, 3, 3], [0, 2, 3, 0, 3, 0, 3, 0, 3, 0, 0, 3, 3, 3, 0], [3, 2, 0, 3, 3, 3, 0, 0, 3, 0, 3, 3, 0, 0, 3], [3, 2, 3, 3, 3, 3, 3, 0, 3, 3, 3, 3, 3, 0, 3], [3, 2, 0, 3, 3, 0, 3, 3, 3, 3, 3, 3, 3, 3, 0], [3, 2, 3, 3, 3, 3, 3, 3, 0, 3, 3, 3, 0, 3, 3], [3, 2, 3, 3, 3, 0, 3, 0, 0, 3, 0, 3, 3, 3, 0], [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [3, 2, 3, 0, 0, 3, 0, 3, 3, 0, 3, 3, 3, 3, 0], [3, 2, 0, 3, 0, 3, 3, 0, 3, 0, 3, 3, 0, 0, 3], [3, 2, 0, 3, 3, 3, 3, 3, 0, 3, 3, 0, 0, 3, 3], [0, 2, 3, 3, 0, 3, 3, 0, 0, 3, 0, 3, 0, 3, 0]]]}, "test_io": {"inputs": [[[4, 0, 4, 0, 4, 4, 0, 0, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 0, 4, 4, 0, 4, 0, 0], [4, 4, 4, 0, 0, 4, 0, 4, 4, 0, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 0, 4, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 0, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 0], [4, 4, 0, 4, 4, 4, 0, 0, 0, 0, 4, 4, 4, 4, 0, 4, 4, 4, 0, 4, 4, 0, 4, 4, 4], [4, 4, 4, 0, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 0, 4, 0, 4, 0, 4], [4, 0, 0, 4, 0, 4, 0, 4, 4, 4, 4, 4, 4, 0, 4, 0, 4, 4, 4, 0, 4, 0, 4, 4, 4], [4, 4, 4, 4, 4, 0, 0, 4, 0, 4, 0, 0, 4, 4, 0, 0, 4, 4, 4, 0, 0, 0, 0, 4, 0], [0, 4, 4, 0, 4, 4, 0, 4, 4, 0, 4, 4, 0, 4, 4, 0, 0, 4, 0, 4, 0, 0, 4, 0, 4], [4, 4, 4, 0, 4, 4, 0, 0, 4, 4, 4, 4, 4, 0, 0, 4, 0, 4, 4, 4, 0, 0, 4, 4, 4], [4, 0, 4, 4, 4, 0, 0, 4, 0, 4, 4, 0, 4, 4, 0, 4, 4, 0, 4, 4, 0, 0, 0, 0, 4], [4, 4, 0, 4, 0, 0, 0, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 0, 4, 4, 4], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 4, 4, 0, 0, 0, 0, 0, 4, 4, 4, 4, 0, 4, 4, 0, 0, 4, 4, 4, 4, 0, 0, 4, 4], [4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 0, 4, 0, 4, 4, 0, 4, 4, 4, 4, 0, 4, 4, 4], [4, 4, 4, 4, 4, 0, 0, 4, 0, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 0, 4], [0, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 0, 4, 0, 4, 4, 0, 4, 4, 4, 0, 4, 4, 0], [0, 4, 4, 4, 4, 0, 0, 4, 4, 4, 0, 4, 0, 4, 0, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4], [4, 4, 4, 0, 4, 4, 0, 0, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0], [4, 4, 0, 4, 4, 4, 0, 4, 4, 0, 4, 4, 4, 0, 4, 4, 4, 0, 4, 4, 0, 0, 0, 4, 4], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 4, 4, 4, 0, 4, 0, 4, 0, 4, 4, 4, 0, 0, 0, 0, 4, 0, 4, 4, 4, 0, 4, 4, 4], [0, 4, 4, 4, 4, 4, 0, 4, 0, 4, 0, 4, 4, 0, 4, 4, 0, 4, 4, 0, 4, 0, 4, 4, 4], [4, 4, 4, 4, 4, 4, 0, 4, 4, 0, 0, 0, 0, 4, 4, 4, 0, 0, 4, 4, 4, 0, 4, 4, 0], [4, 0, 4, 0, 4, 4, 0, 4, 0, 0, 0, 4, 4, 4, 4, 4, 0, 4, 0, 4, 4, 0, 0, 4, 0], [4, 4, 0, 4, 0, 4, 0, 0, 4, 0, 4, 4, 0, 4, 4, 0, 0, 0, 4, 0, 4, 0, 4, 4, 4], [4, 0, 0, 4, 4, 4, 0, 4, 0, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 0, 0, 0, 4, 4, 4]]], "outputs": [[[4, 0, 4, 0, 4, 4, 2, 0, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 0, 4, 4, 2, 4, 0, 0], [4, 4, 4, 0, 0, 4, 2, 4, 4, 0, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 2, 4, 0, 0], [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [4, 0, 4, 4, 4, 0, 2, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 2, 4, 4, 0], [4, 4, 0, 4, 4, 4, 2, 0, 0, 0, 4, 4, 4, 4, 0, 4, 4, 4, 0, 4, 4, 2, 4, 4, 4], [4, 4, 4, 0, 4, 4, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 0, 4, 2, 4, 0, 4], [4, 0, 0, 4, 0, 4, 2, 4, 4, 4, 4, 4, 4, 0, 4, 0, 4, 4, 4, 0, 4, 2, 4, 4, 4], [4, 4, 4, 4, 4, 0, 2, 4, 0, 4, 0, 0, 4, 4, 0, 0, 4, 4, 4, 0, 0, 2, 0, 4, 0], [0, 4, 4, 0, 4, 4, 2, 4, 4, 0, 4, 4, 0, 4, 4, 0, 0, 4, 0, 4, 0, 2, 4, 0, 4], [4, 4, 4, 0, 4, 4, 2, 0, 4, 4, 4, 4, 4, 0, 0, 4, 0, 4, 4, 4, 0, 2, 4, 4, 4], [4, 0, 4, 4, 4, 0, 2, 4, 0, 4, 4, 0, 4, 4, 0, 4, 4, 0, 4, 4, 0, 2, 0, 0, 4], [4, 4, 0, 4, 0, 0, 2, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 2, 4, 4, 4], [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [0, 4, 4, 0, 0, 0, 2, 0, 4, 4, 4, 4, 0, 4, 4, 0, 0, 4, 4, 4, 4, 2, 0, 4, 4], [4, 4, 4, 4, 4, 4, 2, 4, 4, 4, 4, 0, 4, 0, 4, 4, 0, 4, 4, 4, 4, 2, 4, 4, 4], [4, 4, 4, 4, 4, 0, 2, 4, 0, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 0, 2, 4, 0, 4], [0, 4, 4, 4, 4, 4, 2, 4, 4, 4, 4, 4, 0, 4, 0, 4, 4, 0, 4, 4, 4, 2, 4, 4, 0], [0, 4, 4, 4, 4, 0, 2, 4, 4, 4, 0, 4, 0, 4, 0, 4, 4, 4, 4, 4, 4, 2, 0, 4, 4], [4, 4, 4, 0, 4, 4, 2, 0, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 0, 0, 0], [4, 4, 0, 4, 4, 4, 2, 4, 4, 0, 4, 4, 4, 0, 4, 4, 4, 0, 4, 4, 0, 2, 0, 4, 4], [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [4, 4, 4, 4, 0, 4, 2, 4, 0, 4, 4, 4, 0, 0, 0, 0, 4, 0, 4, 4, 4, 2, 4, 4, 4], [0, 4, 4, 4, 4, 4, 2, 4, 0, 4, 0, 4, 4, 0, 4, 4, 0, 4, 4, 0, 4, 2, 4, 4, 4], [4, 4, 4, 4, 4, 4, 2, 4, 4, 0, 0, 0, 0, 4, 4, 4, 0, 0, 4, 4, 4, 2, 4, 4, 0], [4, 0, 4, 0, 4, 4, 2, 4, 0, 0, 0, 4, 4, 4, 4, 4, 0, 4, 0, 4, 4, 2, 0, 4, 0], [4, 4, 0, 4, 0, 4, 2, 0, 4, 0, 4, 4, 0, 4, 4, 0, 0, 0, 4, 0, 4, 2, 4, 4, 4], [4, 0, 0, 4, 4, 4, 2, 4, 0, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 0, 0, 2, 4, 4, 4]]]}, "solved": true, "generalizable": true, "anpl": "import numpy as np\nfrom typing import *\n(black, blue, red, green, yellow, grey, pink, orange, teal, maroon) = range(10)\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    In the input, you should see a n*n grid with multiple color pixels.\n    \"\"\"\n    ngrid = input_grid.copy()\n    ans_grid = `Traverse each row in the inputgrid, if the row is all black, paint the corresponding row in the ngrid red. Traverse each column in inputgrid, if the column is all black, paint the corresponding column in ngrid red;`(input_grid, ngrid)\n    return ans_grid", "python": "import numpy as np\nfrom typing import *\nblack, blue, red, green, yellow, grey, pink, orange, teal, maroon = range(10)\n\ndef paint_rows_and_columns(input_grid: np.ndarray, ngrid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Traverse each row in the inputgrid, if the row is all black, paint the corresponding row in the ngrid red.\n    Traverse each column in inputgrid, if the column is all black, paint the corresponding column in ngrid red.\n    \"\"\"\n    for i in range(input_grid.shape[0]):\n        if np.all(input_grid[i] == black):\n            ngrid[i] = red\n    for j in range(input_grid.shape[1]):\n        if np.all(input_grid[:, j] == black):\n            ngrid[:, j] = red\n    return ngrid\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    \"\"\"\n    In the input, you should see a n*n grid with multiple color pixels.\n    \"\"\"\n    ngrid = input_grid.copy()\n    ans_grid = paint_rows_and_columns(input_grid, ngrid)\n    return ans_grid"}