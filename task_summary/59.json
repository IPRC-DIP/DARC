{"id": 59, "train_io": {"inputs": [[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]], "outputs": [[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 5, 2, 2, 2, 2, 2], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 3, 3, 3, 3, 5, 7, 7, 7, 7, 7], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]]}, "test_io": {"inputs": [[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9]]], "outputs": [[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 4, 4, 4, 4, 5, 8, 8, 8, 8, 8], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 6, 6, 6, 6, 5, 9, 9, 9, 9, 9]]]}, "solved": true, "generalizable": true, "anpl": "def replace_middle_color_with_gray(inp: np.ndarray) -> np.ndarray:\n    out = \"Replace the color in the sixth column that is not black with gray\"(inp)\n    return out\n\ndef copy_first_column_to_next_four_columns(inp: np.ndarray) -> np.ndarray:\n    out = \"Keep the input shape unchanged and replace the content of the last five columns with the last column\"(inp)\n    return out\n\ndef copy_first_column(inp: np.ndarray) -> np.ndarray:\n    out = \"Keep the input shape unchanged and replace the contents of the first six columns with the first column\"(inp)\n    return out\n\ndef main(inp: np.ndarray) -> np.ndarray:\n    out = copy_first_column(inp)\n    out = copy_first_column_to_next_four_columns(out)\n    out = replace_middle_color_with_gray(out)\n    return out", "python": "import numpy as np\nfrom typing import *\nblack, blue, red, green, yellow, grey, pink, orange, teal, maroon = range(10)\n\ndef replace_non_black_color_with_gray(inp: np.ndarray) -> np.ndarray:\n    out = inp.copy()\n    non_black_mask = out[:, 5] != black\n    out[non_black_mask, 5] = grey\n    return out\n\ndef replace_last_five_columns_with_last_column(inp: np.ndarray) -> np.ndarray:\n    out = inp.copy()\n    out[:, -5:] = out[:, -1:]\n    return out\n\ndef replace_first_six_columns_with_first_column(inp: np.ndarray) -> np.ndarray:\n    out = inp.copy()\n    out[:, :6] = out[:, :1]\n    return out\n\ndef replace_middle_color_with_gray(inp: np.ndarray) -> np.ndarray:\n    out = replace_non_black_color_with_gray(inp)\n    return out\n\ndef copy_first_column_to_next_four_columns(inp: np.ndarray) -> np.ndarray:\n    out = replace_last_five_columns_with_last_column(inp)\n    return out\n\ndef copy_first_column(inp: np.ndarray) -> np.ndarray:\n    out = replace_first_six_columns_with_first_column(inp)\n    return out\n\ndef main(inp: np.ndarray) -> np.ndarray:\n    out = copy_first_column(inp)\n    out = copy_first_column_to_next_four_columns(out)\n    out = replace_middle_color_with_gray(out)\n    return out"}