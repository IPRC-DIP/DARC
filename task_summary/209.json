{"id": 209, "train_io": {"inputs": [[[1, 1, 0], [1, 1, 1], [0, 0, 0]], [[0, 0, 0], [1, 0, 1], [1, 1, 0]], [[0, 0, 0], [0, 0, 1], [0, 0, 1]]], "outputs": [[[1, 1, 0], [1, 1, 1], [0, 0, 0], [0, 0, 0], [1, 1, 1], [1, 1, 0]], [[0, 0, 0], [1, 0, 1], [1, 1, 0], [1, 1, 0], [1, 0, 1], [0, 0, 0]], [[0, 0, 0], [0, 0, 1], [0, 0, 1], [0, 0, 1], [0, 0, 1], [0, 0, 0]]]}, "test_io": {"inputs": [[[0, 0, 0], [0, 0, 1], [1, 0, 0]]], "outputs": [[[0, 0, 0], [0, 0, 1], [1, 0, 0], [1, 0, 0], [0, 0, 1], [0, 0, 0]]]}, "solved": true, "generalizable": true, "anpl": "def main(input_grid: np.ndarray) -> np.ndarray:\n    output_grid = \"Create a 6x3 image matrix\"()\n    output_grid = \"Assign input_grid to the top half of output_grid\"(output_grid, input_grid)\n    input_grid = \"Flip input_grid upside down\"(input_grid)\n    output_grid = \"Assign input_grid to the bottom half of output_grid\"(output_grid, input_grid)\n    return output_grid", "python": "import numpy as np\nfrom typing import *\nblack, blue, red, green, yellow, grey, pink, orange, teal, maroon = range(10)\n\ndef assign_input_to_bottom_half(output_grid: np.ndarray, input_grid: np.ndarray) -> np.ndarray:\n    output_grid[3:, :] = input_grid\n    return output_grid\n\ndef flip_input_grid(input_grid: np.ndarray) -> np.ndarray:\n    return np.flipud(input_grid)\n\ndef assign_input_to_top_half(output_grid: np.ndarray, input_grid: np.ndarray) -> np.ndarray:\n    output_grid[:3, :] = input_grid\n    return output_grid\n\ndef create_image_matrix() -> np.ndarray:\n    return np.zeros((6, 3))\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    output_grid = create_image_matrix()\n    output_grid = assign_input_to_top_half(output_grid, input_grid)\n    input_grid = flip_input_grid(input_grid)\n    output_grid = assign_input_to_bottom_half(output_grid, input_grid)\n    return output_grid"}