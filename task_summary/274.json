{"id": 274, "train_io": {"inputs": [[[2, 0, 4, 0, 8, 0], [0, 3, 0, 8, 8, 8], [0, 0, 0, 0, 8, 0]], [[0, 0, 8, 0, 4, 0], [8, 0, 0, 1, 2, 4], [8, 8, 0, 0, 1, 0]], [[2, 0, 0, 4, 0, 0, 8, 0], [0, 2, 4, 0, 8, 8, 8, 8], [0, 4, 2, 0, 0, 0, 8, 0], [4, 0, 0, 2, 0, 0, 8, 0]]], "outputs": [[[0, 2, 0, 0, 0, 0, 0, 4, 0], [2, 2, 2, 0, 0, 0, 4, 4, 4], [0, 2, 0, 0, 0, 0, 0, 4, 0], [0, 0, 0, 0, 3, 0, 0, 0, 0], [0, 0, 0, 3, 3, 3, 0, 0, 0], [0, 0, 0, 0, 3, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 4, 0, 0, 0], [0, 0, 0, 4, 0, 0, 0, 0, 0], [0, 0, 0, 4, 4, 0, 0, 0, 0], [0, 0, 1, 0, 0, 2, 0, 0, 4], [1, 0, 0, 2, 0, 0, 4, 0, 0], [1, 1, 0, 2, 2, 0, 4, 4, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 0, 0, 0]], [[0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0], [2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4], [0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0], [0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0], [0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 0, 0], [0, 0, 0, 0, 2, 2, 2, 2, 4, 4, 4, 4, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 4, 4, 4, 4, 2, 2, 2, 2, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 2, 0, 0, 0, 0, 0], [0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0], [4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2], [0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0], [0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0]]]}, "test_io": {"inputs": [[[3, 0, 0, 1], [0, 2, 2, 0], [0, 2, 2, 0], [3, 0, 0, 3], [0, 8, 8, 0], [8, 8, 8, 8], [8, 0, 0, 8], [8, 8, 8, 8]]], "outputs": [[[0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0], [3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1], [3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1], [3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1], [0, 0, 0, 0, 0, 2, 2, 0, 0, 2, 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 2, 2, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 2, 0, 0, 2, 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 2, 2, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0], [0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0], [3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3], [3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3], [3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3]]]}, "solved": true, "generalizable": false, "anpl": "import numpy as np\nfrom typing import *\n(black, blue, red, green, yellow, grey, pink, orange, teal, maroon) = range(10)\n\ndef merge_grids(large_grid: np.ndarray, h: int, small_grid: np.ndarray) -> np.ndarray:\n    for i in range(h):\n        for j in range(h):\n            ii = i * h\n            jj = j * h\n            print('ii=', ii, ' jj=', jj)\n            c = `\u627e\u51falarge_grid\u4e2d\u4f4d\u4e8e(ii,jj)\u7684\u5143\u7d20\u989c\u8272`(large_grid, ii, jj)\n            print('c=', c)\n            temp_grid = small_grid.copy()\n            temp_grid = `\u5c06temp_grid\u4e2d\u975e\u9ed1\u8272\u50cf\u7d20\u7684\u989c\u8272\u4fee\u6539\u4e3ac`(temp_grid, c)\n            print('modified temp_grid=\\n', temp_grid)\n            large_grid = `\u7528temp_grid\u8986\u76d6large_grid\u4e2d\u4ee5(ii,jj)\u4e3a\u5de6\u4e0a\u89d2\u7684h*h\u533a\u57df\uff08\u9ed1\u8272\u533a\u57df\u540c\u6837\u6267\u884c\u8986\u76d6\uff09`(large_grid, temp_grid, ii, jj)\n            print('modified large_grid=\\n', large_grid)\n    return large_grid\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    (h, w) = `Get the height and width of the image matrix, denoted as h and w.`(input_grid)\n    (grid1, grid2) = `If h <w, divide the image matrix into left and right halves, else if h>w, divide the image matrix into up and down halves (both are squares with a size of h*h).`(input_grid)\n    if h < w:\n        large_grid = `Enlarging grid1 proportionally by h times.`(grid1, h)\n        output_grid = merge_grids(large_grid, h, grid2)\n    else:\n        large_grid = `Enlarging grid1 proportionally by h times.`(grid1, w)\n        output_grid = merge_grids(large_grid, w, grid2)\n    return output_grid", "python": "import numpy as np\nfrom typing import *\nblack, blue, red, green, yellow, grey, pink, orange, teal, maroon = range(10)\n\ndef replace_subgrid(large_grid: np.ndarray, temp_grid: np.ndarray, ii: int, jj: int) -> np.ndarray:\n    large_grid[ii:ii + temp_grid.shape[0], jj:jj + temp_grid.shape[1]] = temp_grid\n    return large_grid\n\ndef modify_non_black_pixels(temp_grid: np.ndarray, c: int) -> np.ndarray:\n    temp_grid[temp_grid != black] = c\n    return temp_grid\n\ndef find_color_at(large_grid: np.ndarray, ii: int, jj: int) -> int:\n    return large_grid[ii][jj]\n\ndef merge_grids(large_grid: np.ndarray, h: int, small_grid: np.ndarray) -> np.ndarray:\n    for i in range(h):\n        for j in range(h):\n            ii = i * h\n            jj = j * h\n            print('ii=', ii, ' jj=', jj)\n            c = find_color_at(large_grid, ii, jj)\n            print('c=', c)\n            temp_grid = small_grid.copy()\n            temp_grid = modify_non_black_pixels(temp_grid, c)\n            print('modified temp_grid=\\n', temp_grid)\n            large_grid = replace_subgrid(large_grid, temp_grid, ii, jj)\n            print('modified large_grid=\\n', large_grid)\n    return large_grid\n\ndef enlarge_grid(grid1: np.ndarray, h: int) -> np.ndarray:\n    return np.repeat(np.repeat(grid1, h, axis=0), h, axis=1)\n\ndef divide_image(input_grid: np.ndarray) -> Tuple[np.ndarray, np.ndarray]:\n    h, w = get_height_and_width(input_grid)\n    if h < w:\n        mid = w // 2\n        left_half = input_grid[:, :mid]\n        right_half = input_grid[:, mid:]\n        return (left_half, right_half)\n    else:\n        mid = h // 2\n        upper_half = input_grid[:mid, :]\n        lower_half = input_grid[mid:, :]\n        return (upper_half, lower_half)\n\ndef get_height_and_width(input_grid: np.ndarray) -> Tuple[int, int]:\n    h, w = input_grid.shape\n    return (h, w)\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    h, w = get_height_and_width(input_grid)\n    grid1, grid2 = divide_image(input_grid)\n    if h < w:\n        large_grid = enlarge_grid(grid1, h)\n        output_grid = merge_grids(large_grid, h, grid2)\n    else:\n        large_grid = enlarge_grid(grid1, w)\n        output_grid = merge_grids(large_grid, w, grid2)\n    return output_grid"}