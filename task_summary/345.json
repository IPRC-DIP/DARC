{"id": 345, "train_io": {"inputs": [[[2, 0, 0, 0, 0, 2, 0, 0, 2], [0, 4, 4, 4, 0, 0, 0, 0, 0], [0, 4, 2, 4, 0, 0, 2, 0, 0], [0, 4, 4, 4, 0, 0, 0, 2, 0], [2, 0, 0, 0, 0, 2, 0, 0, 0]], [[8, 0, 8, 0, 0, 0, 0, 0, 8], [0, 0, 0, 0, 8, 0, 0, 0, 0], [0, 0, 8, 0, 0, 3, 3, 3, 0], [8, 0, 0, 3, 0, 3, 8, 3, 0], [0, 0, 0, 0, 0, 3, 3, 3, 0], [0, 0, 8, 0, 0, 0, 0, 0, 0], [3, 0, 0, 8, 0, 0, 0, 8, 0]], [[1, 2, 0, 0, 0, 2, 0, 0, 0], [0, 0, 2, 0, 0, 0, 0, 0, 0], [2, 0, 1, 2, 0, 2, 0, 1, 1], [0, 1, 0, 0, 2, 0, 0, 0, 2], [0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 2, 2, 0, 0, 0, 0, 0], [1, 2, 1, 2, 0, 0, 0, 2, 0], [0, 2, 2, 2, 0, 0, 0, 0, 2], [0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 0, 0, 0]], [[0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 3, 8], [3, 0, 0, 0, 0, 0, 0, 8, 0, 3, 0, 0], [0, 3, 3, 8, 0, 0, 0, 0, 0, 0, 0, 8], [0, 0, 0, 3, 8, 0, 0, 0, 0, 0, 0, 0], [3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0], [0, 0, 0, 3, 8, 0, 0, 0, 0, 0, 0, 0], [0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 3, 3, 3, 0, 0, 8, 0, 3, 0], [0, 0, 3, 3, 8, 3, 0, 0, 0, 0, 0, 0], [0, 0, 0, 3, 3, 3, 0, 0, 0, 0, 0, 0], [0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0]]], "outputs": [[[2]], [[8]], [[1]], [[8]]]}, "test_io": {"inputs": [[[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [1, 0, 0, 0, 0, 0, 4, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 4, 0, 0, 4, 0, 0, 0], [0, 4, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 4, 4, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0], [0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 4], [4, 0, 0, 0, 1, 4, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 4], [0, 0, 4, 4, 0, 0, 0, 1, 0, 0, 0, 0]]], "outputs": [[[4]]]}, "solved": true, "generalizable": false, "anpl": null, "python": "import numpy as np\nfrom typing import *\nblack, blue, red, green, yellow, grey, pink, orange, teal, maroon = range(10)\n\ndef find_surrounded_element(input_grid: np.ndarray) -> int:\n    \"\"\"\n    Given a 2D numpy array, this function finds the non-zero element that is surrounded by other non-zero elements.\n    \n    Args:\n    input_grid: A 2D numpy array of integers\n    \n    Returns:\n    An integer representing the non-zero element that is surrounded by other non-zero elements. If no such element is found, returns -1.\n    \"\"\"\n    rows, cols = input_grid.shape\n    for i in range(1, rows - 1):\n        for j in range(1, cols - 1):\n            if input_grid[i][j] != 0:\n                if input_grid[i - 1][j] != 0 and input_grid[i + 1][j] != 0 and (input_grid[i][j - 1] != 0) and (input_grid[i][j + 1] != 0):\n                    return input_grid[i][j]\n    return -1\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    surround_element = find_surrounded_element(input_grid)\n    return np.array([[surround_element]])"}