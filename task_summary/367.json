{"id": 367, "train_io": {"inputs": [[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 2, 2, 0, 0, 0, 0, 0, 0], [0, 2, 4, 4, 0, 0, 0, 0, 0, 0], [0, 4, 4, 4, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 5, 5, 5, 0], [0, 0, 0, 0, 0, 0, 5, 5, 5, 0], [0, 0, 0, 0, 0, 0, 5, 5, 5, 0], [0, 0, 5, 5, 5, 0, 0, 0, 0, 0], [0, 0, 5, 5, 5, 0, 0, 0, 0, 0], [0, 0, 5, 5, 5, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 5, 5, 5, 5], [0, 6, 6, 6, 6, 0, 5, 5, 5, 5], [0, 8, 8, 6, 8, 0, 5, 5, 5, 5], [0, 6, 8, 8, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 5, 5, 5, 5, 0, 0], [0, 0, 0, 0, 5, 5, 5, 5, 0, 0], [0, 0, 0, 0, 5, 5, 5, 5, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]], "outputs": [[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 2, 2, 0, 0, 0, 0, 0, 0], [0, 2, 4, 4, 0, 0, 0, 0, 0, 0], [0, 4, 4, 4, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 2, 2, 2, 0], [0, 0, 0, 0, 0, 0, 2, 4, 4, 0], [0, 0, 0, 0, 0, 0, 4, 4, 4, 0], [0, 0, 2, 2, 2, 0, 0, 0, 0, 0], [0, 0, 2, 4, 4, 0, 0, 0, 0, 0], [0, 0, 4, 4, 4, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 6, 6, 6, 6], [0, 6, 6, 6, 6, 0, 8, 8, 6, 8], [0, 8, 8, 6, 8, 0, 6, 8, 8, 8], [0, 6, 8, 8, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 6, 6, 6, 6, 0, 0], [0, 0, 0, 0, 8, 8, 6, 8, 0, 0], [0, 0, 0, 0, 6, 8, 8, 8, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]]}, "test_io": {"inputs": [[[0, 4, 4, 4, 0, 0, 0, 0, 0, 0], [0, 1, 4, 4, 0, 0, 5, 5, 5, 0], [0, 1, 4, 1, 0, 0, 5, 5, 5, 0], [0, 1, 1, 1, 0, 0, 5, 5, 5, 0], [0, 0, 0, 0, 0, 0, 5, 5, 5, 0], [0, 0, 5, 5, 5, 0, 0, 0, 0, 0], [0, 0, 5, 5, 5, 0, 0, 5, 5, 5], [0, 0, 5, 5, 5, 0, 0, 5, 5, 5], [0, 0, 5, 5, 5, 0, 0, 5, 5, 5], [0, 0, 0, 0, 0, 0, 0, 5, 5, 5]]], "outputs": [[[0, 4, 4, 4, 0, 0, 0, 0, 0, 0], [0, 1, 4, 4, 0, 0, 4, 4, 4, 0], [0, 1, 4, 1, 0, 0, 1, 4, 4, 0], [0, 1, 1, 1, 0, 0, 1, 4, 1, 0], [0, 0, 0, 0, 0, 0, 1, 1, 1, 0], [0, 0, 4, 4, 4, 0, 0, 0, 0, 0], [0, 0, 1, 4, 4, 0, 0, 4, 4, 4], [0, 0, 1, 4, 1, 0, 0, 1, 4, 4], [0, 0, 1, 1, 1, 0, 0, 1, 4, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1]]]}, "solved": true, "generalizable": true, "anpl": "import numpy as np\nfrom typing import *\n(black, blue, red, green, yellow, grey, pink, orange, teal, maroon) = range(10)\n\ndef replace_grey_area_with_non_grey_area(input_grid):\n    (rows, cols) = input_grid.shape\n    for i in range(rows - 1, -1, -1):\n        for j in range(cols - 1, -1, -1):\n            if input_grid[i][j] != black and input_grid[i][j] != grey:\n                non_grey_position = (i, j)\n                break\n        else:\n            continue\n        break\n    return non_grey_position\n\ndef find_positions(input):\n    p1 = `find the first top left position which is not black and grey in the input`(input)\n    p2 = replace_grey_area_with_non_grey_area(input)\n    return [p1, p2]\n\ndef main(input_grid):\n    input = input_grid\n    positions = find_positions(input)\n    while True:\n        grey_position = `find the first top left position which is not black and grey in the input`(input)\n        x = positions[1][0] - positions[0][0] + 1\n        y = positions[1][1] - positions[0][1] + 1\n        input[grey_position[0]:grey_position[0] + x, grey_position[1]:grey_position[1] + y] = input[positions[0][0]:positions[1][0] + 1, positions[0][1]:positions[1][1] + 1]\n        if not `the input does not have grey color`(input):\n            break\n    return input", "python": "import numpy as np\nfrom typing import *\nblack, blue, red, green, yellow, grey, pink, orange, teal, maroon = range(10)\n\ndef replace_grey_area_with_non_grey_area(input_grid):\n    rows, cols = input_grid.shape\n    for i in range(rows - 1, -1, -1):\n        for j in range(cols - 1, -1, -1):\n            if input_grid[i][j] != black and input_grid[i][j] != grey:\n                non_grey_position = (i, j)\n                break\n        else:\n            continue\n        break\n    return non_grey_position\n\ndef find_first_non_black_or_grey_position(input_grid):\n    rows, cols = input_grid.shape\n    for i in range(rows):\n        for j in range(cols):\n            if input_grid[i][j] != black and input_grid[i][j] != grey:\n                return (i, j)\n    return None\n\ndef has_grey_color(input_grid):\n    rows, cols = input_grid.shape\n    for i in range(rows):\n        for j in range(cols):\n            if input_grid[i][j] == grey:\n                return True\n    return False\n\ndef find_grey_position(input_grid):\n    rows, cols = input_grid.shape\n    for i in range(rows):\n        for j in range(cols):\n            if input_grid[i][j] == grey:\n                return (i, j)\n    return None\n\ndef find_positions(input):\n    p1 = find_first_non_black_or_grey_position(input)\n    p2 = replace_grey_area_with_non_grey_area(input)\n    return [p1, p2]\n\ndef main(input_grid):\n    input = input_grid\n    positions = find_positions(input)\n    while True:\n        grey_position = find_grey_position(input)\n        x = positions[1][0] - positions[0][0] + 1\n        y = positions[1][1] - positions[0][1] + 1\n        input[grey_position[0]:grey_position[0] + x, grey_position[1]:grey_position[1] + y] = input[positions[0][0]:positions[1][0] + 1, positions[0][1]:positions[1][1] + 1]\n        if not has_grey_color(input):\n            break\n    return input"}