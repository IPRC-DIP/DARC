{"id": 286, "train_io": {"inputs": [[[9, 9, 6, 5, 9, 6, 7, 7, 7, 7, 6, 9, 5, 6, 9, 9], [9, 1, 5, 5, 6, 1, 7, 9, 9, 7, 1, 6, 5, 5, 1, 9], [6, 5, 1, 9, 7, 7, 3, 3, 3, 3, 7, 7, 9, 1, 5, 6], [5, 5, 9, 3, 7, 9, 3, 3, 3, 3, 9, 7, 3, 9, 5, 5], [9, 6, 7, 7, 3, 8, 9, 1, 1, 9, 8, 3, 7, 7, 6, 9], [6, 1, 7, 9, 8, 3, 1, 1, 1, 1, 4, 4, 4, 4, 1, 6], [7, 7, 3, 3, 9, 1, 6, 6, 6, 6, 4, 4, 4, 4, 7, 7], [7, 9, 3, 3, 1, 1, 6, 1, 1, 6, 4, 4, 4, 4, 9, 7], [7, 9, 3, 3, 1, 1, 6, 1, 1, 6, 1, 1, 3, 3, 9, 7], [7, 7, 3, 3, 9, 1, 6, 6, 6, 6, 1, 9, 3, 3, 7, 7], [6, 1, 7, 9, 8, 3, 1, 1, 1, 1, 4, 4, 4, 7, 1, 6], [9, 6, 7, 7, 3, 8, 9, 1, 1, 9, 4, 4, 4, 7, 6, 9], [5, 5, 9, 3, 7, 9, 3, 3, 3, 3, 4, 4, 4, 9, 5, 5], [6, 5, 1, 9, 7, 7, 3, 3, 3, 3, 4, 4, 4, 1, 5, 6], [9, 1, 5, 5, 6, 1, 7, 9, 9, 7, 1, 6, 5, 5, 1, 9], [9, 9, 6, 5, 9, 6, 7, 7, 7, 7, 6, 9, 5, 6, 9, 9]], [[9, 9, 6, 1, 8, 9, 6, 6, 6, 6, 9, 8, 1, 6, 9, 9], [9, 6, 1, 3, 9, 6, 6, 1, 1, 6, 6, 9, 3, 1, 6, 9], [6, 4, 4, 2, 6, 6, 8, 8, 8, 8, 6, 6, 2, 5, 1, 6], [1, 4, 4, 8, 6, 1, 8, 2, 2, 8, 1, 6, 8, 2, 3, 1], [8, 4, 4, 6, 7, 1, 5, 5, 5, 5, 1, 7, 6, 6, 9, 8], [9, 6, 6, 1, 1, 1, 5, 5, 5, 5, 1, 1, 1, 6, 6, 9], [6, 6, 8, 8, 5, 5, 9, 5, 5, 9, 5, 5, 8, 8, 6, 6], [6, 1, 8, 2, 5, 5, 5, 8, 8, 5, 5, 5, 2, 8, 1, 6], [6, 1, 8, 2, 5, 5, 5, 8, 8, 5, 5, 4, 4, 4, 1, 6], [6, 6, 8, 8, 5, 5, 9, 5, 5, 9, 5, 4, 4, 4, 6, 6], [9, 6, 6, 1, 1, 1, 5, 5, 5, 5, 1, 1, 1, 6, 6, 9], [8, 9, 6, 6, 7, 1, 5, 5, 5, 5, 1, 7, 6, 6, 9, 8], [1, 3, 2, 8, 6, 1, 8, 2, 2, 8, 1, 6, 8, 2, 3, 1], [6, 1, 5, 2, 6, 6, 8, 8, 8, 8, 6, 6, 2, 5, 1, 6], [9, 6, 1, 3, 9, 6, 6, 1, 1, 6, 6, 9, 3, 1, 6, 9], [9, 9, 6, 1, 8, 9, 6, 6, 6, 6, 9, 8, 1, 6, 9, 9]], [[9, 3, 9, 9, 2, 8, 7, 8, 8, 7, 8, 2, 9, 9, 3, 9], [3, 9, 9, 3, 8, 8, 8, 5, 5, 8, 8, 8, 3, 9, 9, 3], [9, 9, 2, 8, 7, 8, 2, 2, 2, 2, 8, 7, 8, 2, 9, 9], [9, 3, 8, 8, 8, 5, 2, 1, 1, 2, 5, 8, 8, 8, 3, 9], [2, 8, 7, 8, 2, 5, 9, 7, 7, 9, 5, 2, 8, 7, 8, 2], [8, 8, 8, 5, 5, 5, 7, 6, 6, 7, 5, 5, 5, 8, 8, 8], [7, 8, 2, 2, 9, 7, 1, 1, 1, 1, 7, 9, 4, 4, 8, 7], [8, 5, 2, 1, 7, 6, 1, 3, 3, 1, 6, 7, 4, 4, 5, 8], [8, 5, 2, 1, 7, 6, 1, 3, 3, 1, 6, 7, 4, 4, 5, 8], [7, 8, 2, 2, 9, 7, 1, 1, 1, 1, 7, 9, 4, 4, 8, 7], [8, 8, 8, 5, 5, 5, 7, 6, 6, 7, 5, 5, 5, 8, 8, 8], [2, 8, 4, 4, 4, 4, 9, 7, 7, 9, 5, 2, 8, 7, 8, 2], [9, 3, 4, 4, 4, 4, 2, 1, 1, 2, 5, 8, 8, 8, 3, 9], [9, 9, 4, 4, 4, 4, 2, 2, 2, 2, 8, 7, 8, 2, 9, 9], [3, 9, 4, 4, 4, 4, 8, 5, 5, 8, 8, 8, 3, 9, 9, 3], [9, 3, 9, 9, 2, 8, 7, 8, 8, 7, 8, 2, 9, 9, 3, 9]], [[2, 2, 7, 6, 8, 9, 9, 1, 1, 9, 9, 8, 6, 7, 2, 2], [2, 1, 6, 2, 9, 5, 1, 1, 1, 1, 4, 4, 4, 4, 1, 2], [7, 6, 3, 3, 9, 1, 6, 6, 6, 6, 4, 4, 4, 4, 6, 7], [6, 2, 3, 8, 1, 1, 6, 6, 6, 6, 4, 4, 4, 4, 2, 6], [8, 9, 9, 1, 1, 7, 1, 1, 1, 1, 7, 1, 1, 9, 9, 8], [9, 5, 1, 1, 7, 7, 1, 3, 3, 1, 7, 7, 1, 1, 5, 9], [9, 1, 6, 6, 1, 1, 3, 3, 3, 3, 1, 1, 6, 6, 1, 9], [1, 1, 6, 6, 1, 3, 3, 2, 2, 3, 3, 1, 6, 6, 1, 1], [1, 1, 6, 4, 4, 3, 3, 2, 2, 3, 3, 1, 6, 6, 1, 1], [9, 1, 6, 4, 4, 1, 3, 3, 3, 3, 1, 1, 6, 6, 1, 9], [9, 5, 1, 4, 4, 7, 1, 3, 3, 1, 7, 7, 1, 1, 5, 9], [8, 9, 9, 1, 1, 7, 1, 1, 1, 1, 7, 1, 1, 9, 9, 8], [6, 2, 3, 8, 1, 1, 6, 6, 6, 6, 1, 1, 8, 3, 2, 6], [7, 6, 3, 3, 9, 1, 6, 6, 6, 6, 1, 9, 3, 3, 6, 7], [2, 1, 6, 2, 9, 5, 1, 1, 1, 1, 5, 9, 2, 6, 1, 2], [2, 2, 7, 6, 8, 9, 9, 1, 1, 9, 9, 8, 6, 7, 2, 2]]], "outputs": [[[9, 9, 6, 5, 9, 6, 7, 7, 7, 7, 6, 9, 5, 6, 9, 9], [9, 1, 5, 5, 6, 1, 7, 9, 9, 7, 1, 6, 5, 5, 1, 9], [6, 5, 1, 9, 7, 7, 3, 3, 3, 3, 7, 7, 9, 1, 5, 6], [5, 5, 9, 3, 7, 9, 3, 3, 3, 3, 9, 7, 3, 9, 5, 5], [9, 6, 7, 7, 3, 8, 9, 1, 1, 9, 8, 3, 7, 7, 6, 9], [6, 1, 7, 9, 8, 3, 1, 1, 1, 1, 3, 8, 9, 7, 1, 6], [7, 7, 3, 3, 9, 1, 6, 6, 6, 6, 1, 9, 3, 3, 7, 7], [7, 9, 3, 3, 1, 1, 6, 1, 1, 6, 1, 1, 3, 3, 9, 7], [7, 9, 3, 3, 1, 1, 6, 1, 1, 6, 1, 1, 3, 3, 9, 7], [7, 7, 3, 3, 9, 1, 6, 6, 6, 6, 1, 9, 3, 3, 7, 7], [6, 1, 7, 9, 8, 3, 1, 1, 1, 1, 3, 8, 9, 7, 1, 6], [9, 6, 7, 7, 3, 8, 9, 1, 1, 9, 8, 3, 7, 7, 6, 9], [5, 5, 9, 3, 7, 9, 3, 3, 3, 3, 9, 7, 3, 9, 5, 5], [6, 5, 1, 9, 7, 7, 3, 3, 3, 3, 7, 7, 9, 1, 5, 6], [9, 1, 5, 5, 6, 1, 7, 9, 9, 7, 1, 6, 5, 5, 1, 9], [9, 9, 6, 5, 9, 6, 7, 7, 7, 7, 6, 9, 5, 6, 9, 9]], [[9, 9, 6, 1, 8, 9, 6, 6, 6, 6, 9, 8, 1, 6, 9, 9], [9, 6, 1, 3, 9, 6, 6, 1, 1, 6, 6, 9, 3, 1, 6, 9], [6, 1, 5, 2, 6, 6, 8, 8, 8, 8, 6, 6, 2, 5, 1, 6], [1, 3, 2, 8, 6, 1, 8, 2, 2, 8, 1, 6, 8, 2, 3, 1], [8, 9, 6, 6, 7, 1, 5, 5, 5, 5, 1, 7, 6, 6, 9, 8], [9, 6, 6, 1, 1, 1, 5, 5, 5, 5, 1, 1, 1, 6, 6, 9], [6, 6, 8, 8, 5, 5, 9, 5, 5, 9, 5, 5, 8, 8, 6, 6], [6, 1, 8, 2, 5, 5, 5, 8, 8, 5, 5, 5, 2, 8, 1, 6], [6, 1, 8, 2, 5, 5, 5, 8, 8, 5, 5, 5, 2, 8, 1, 6], [6, 6, 8, 8, 5, 5, 9, 5, 5, 9, 5, 5, 8, 8, 6, 6], [9, 6, 6, 1, 1, 1, 5, 5, 5, 5, 1, 1, 1, 6, 6, 9], [8, 9, 6, 6, 7, 1, 5, 5, 5, 5, 1, 7, 6, 6, 9, 8], [1, 3, 2, 8, 6, 1, 8, 2, 2, 8, 1, 6, 8, 2, 3, 1], [6, 1, 5, 2, 6, 6, 8, 8, 8, 8, 6, 6, 2, 5, 1, 6], [9, 6, 1, 3, 9, 6, 6, 1, 1, 6, 6, 9, 3, 1, 6, 9], [9, 9, 6, 1, 8, 9, 6, 6, 6, 6, 9, 8, 1, 6, 9, 9]], [[9, 3, 9, 9, 2, 8, 7, 8, 8, 7, 8, 2, 9, 9, 3, 9], [3, 9, 9, 3, 8, 8, 8, 5, 5, 8, 8, 8, 3, 9, 9, 3], [9, 9, 2, 8, 7, 8, 2, 2, 2, 2, 8, 7, 8, 2, 9, 9], [9, 3, 8, 8, 8, 5, 2, 1, 1, 2, 5, 8, 8, 8, 3, 9], [2, 8, 7, 8, 2, 5, 9, 7, 7, 9, 5, 2, 8, 7, 8, 2], [8, 8, 8, 5, 5, 5, 7, 6, 6, 7, 5, 5, 5, 8, 8, 8], [7, 8, 2, 2, 9, 7, 1, 1, 1, 1, 7, 9, 2, 2, 8, 7], [8, 5, 2, 1, 7, 6, 1, 3, 3, 1, 6, 7, 1, 2, 5, 8], [8, 5, 2, 1, 7, 6, 1, 3, 3, 1, 6, 7, 1, 2, 5, 8], [7, 8, 2, 2, 9, 7, 1, 1, 1, 1, 7, 9, 2, 2, 8, 7], [8, 8, 8, 5, 5, 5, 7, 6, 6, 7, 5, 5, 5, 8, 8, 8], [2, 8, 7, 8, 2, 5, 9, 7, 7, 9, 5, 2, 8, 7, 8, 2], [9, 3, 8, 8, 8, 5, 2, 1, 1, 2, 5, 8, 8, 8, 3, 9], [9, 9, 2, 8, 7, 8, 2, 2, 2, 2, 8, 7, 8, 2, 9, 9], [3, 9, 9, 3, 8, 8, 8, 5, 5, 8, 8, 8, 3, 9, 9, 3], [9, 3, 9, 9, 2, 8, 7, 8, 8, 7, 8, 2, 9, 9, 3, 9]], [[2, 2, 7, 6, 8, 9, 9, 1, 1, 9, 9, 8, 6, 7, 2, 2], [2, 1, 6, 2, 9, 5, 1, 1, 1, 1, 5, 9, 2, 6, 1, 2], [7, 6, 3, 3, 9, 1, 6, 6, 6, 6, 1, 9, 3, 3, 6, 7], [6, 2, 3, 8, 1, 1, 6, 6, 6, 6, 1, 1, 8, 3, 2, 6], [8, 9, 9, 1, 1, 7, 1, 1, 1, 1, 7, 1, 1, 9, 9, 8], [9, 5, 1, 1, 7, 7, 1, 3, 3, 1, 7, 7, 1, 1, 5, 9], [9, 1, 6, 6, 1, 1, 3, 3, 3, 3, 1, 1, 6, 6, 1, 9], [1, 1, 6, 6, 1, 3, 3, 2, 2, 3, 3, 1, 6, 6, 1, 1], [1, 1, 6, 6, 1, 3, 3, 2, 2, 3, 3, 1, 6, 6, 1, 1], [9, 1, 6, 6, 1, 1, 3, 3, 3, 3, 1, 1, 6, 6, 1, 9], [9, 5, 1, 1, 7, 7, 1, 3, 3, 1, 7, 7, 1, 1, 5, 9], [8, 9, 9, 1, 1, 7, 1, 1, 1, 1, 7, 1, 1, 9, 9, 8], [6, 2, 3, 8, 1, 1, 6, 6, 6, 6, 1, 1, 8, 3, 2, 6], [7, 6, 3, 3, 9, 1, 6, 6, 6, 6, 1, 9, 3, 3, 6, 7], [2, 1, 6, 2, 9, 5, 1, 1, 1, 1, 5, 9, 2, 6, 1, 2], [2, 2, 7, 6, 8, 9, 9, 1, 1, 9, 9, 8, 6, 7, 2, 2]]]}, "test_io": {"inputs": [[[7, 7, 8, 1, 9, 8, 2, 6, 6, 2, 8, 9, 1, 8, 7, 7], [7, 1, 1, 8, 8, 8, 6, 6, 6, 6, 8, 8, 8, 1, 1, 7], [8, 1, 6, 9, 2, 6, 4, 4, 4, 6, 6, 2, 9, 6, 1, 8], [1, 8, 9, 1, 6, 6, 4, 4, 4, 1, 6, 6, 1, 9, 8, 1], [9, 8, 2, 6, 8, 7, 4, 4, 4, 6, 4, 4, 4, 4, 8, 9], [8, 8, 6, 6, 7, 7, 6, 5, 5, 6, 4, 4, 4, 4, 8, 8], [2, 6, 6, 1, 6, 6, 5, 5, 5, 5, 4, 4, 4, 4, 6, 2], [6, 6, 1, 1, 6, 5, 5, 7, 7, 5, 4, 4, 4, 4, 6, 6], [6, 6, 1, 1, 6, 5, 5, 7, 7, 5, 5, 6, 1, 1, 6, 6], [2, 6, 6, 1, 6, 6, 5, 5, 5, 5, 6, 6, 1, 6, 6, 2], [8, 8, 6, 6, 7, 7, 6, 5, 5, 6, 7, 7, 6, 6, 8, 8], [9, 8, 2, 6, 8, 7, 6, 6, 6, 6, 7, 8, 6, 2, 8, 9], [1, 8, 9, 1, 6, 6, 1, 1, 1, 1, 6, 6, 1, 9, 8, 1], [8, 1, 6, 9, 2, 6, 6, 1, 1, 6, 6, 2, 9, 6, 1, 8], [7, 1, 1, 8, 8, 8, 6, 6, 6, 6, 8, 8, 8, 1, 1, 7], [7, 7, 8, 1, 9, 8, 2, 6, 6, 2, 8, 9, 1, 8, 7, 7]]], "outputs": [[[7, 7, 8, 1, 9, 8, 2, 6, 6, 2, 8, 9, 1, 8, 7, 7], [7, 1, 1, 8, 8, 8, 6, 6, 6, 6, 8, 8, 8, 1, 1, 7], [8, 1, 6, 9, 2, 6, 6, 1, 1, 6, 6, 2, 9, 6, 1, 8], [1, 8, 9, 1, 6, 6, 1, 1, 1, 1, 6, 6, 1, 9, 8, 1], [9, 8, 2, 6, 8, 7, 6, 6, 6, 6, 7, 8, 6, 2, 8, 9], [8, 8, 6, 6, 7, 7, 6, 5, 5, 6, 7, 7, 6, 6, 8, 8], [2, 6, 6, 1, 6, 6, 5, 5, 5, 5, 6, 6, 1, 6, 6, 2], [6, 6, 1, 1, 6, 5, 5, 7, 7, 5, 5, 6, 1, 1, 6, 6], [6, 6, 1, 1, 6, 5, 5, 7, 7, 5, 5, 6, 1, 1, 6, 6], [2, 6, 6, 1, 6, 6, 5, 5, 5, 5, 6, 6, 1, 6, 6, 2], [8, 8, 6, 6, 7, 7, 6, 5, 5, 6, 7, 7, 6, 6, 8, 8], [9, 8, 2, 6, 8, 7, 6, 6, 6, 6, 7, 8, 6, 2, 8, 9], [1, 8, 9, 1, 6, 6, 1, 1, 1, 1, 6, 6, 1, 9, 8, 1], [8, 1, 6, 9, 2, 6, 6, 1, 1, 6, 6, 2, 9, 6, 1, 8], [7, 1, 1, 8, 8, 8, 6, 6, 6, 6, 8, 8, 8, 1, 1, 7], [7, 7, 8, 1, 9, 8, 2, 6, 6, 2, 8, 9, 1, 8, 7, 7]]]}, "solved": true, "generalizable": false, "anpl": "import numpy as np\nfrom typing import *\n(black, blue, red, green, yellow, grey, pink, orange, teal, maroon) = range(10)\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    locs = `find the location of all pixels which are yellow`(input_grid)\n    output_grid = input_grid\n    for loc in locs:\n        color = `find the color of pixel which is symmetric above and below with loc in the grid`(input_grid, loc)\n        if color is yellow:\n            color = `find the color of pixel which is symmetric left and right with loc in the grid`(input_grid, loc)\n        output_grid = `change pixel to the color`(output_grid, loc, color)\n    return output_grid", "python": "import numpy as np\nfrom typing import *\nblack, blue, red, green, yellow, grey, pink, orange, teal, maroon = range(10)\n\ndef _hole2(input_grid: np.ndarray, loc: Tuple[int, int]) -> int:\n    row, col = loc\n    symmetric_col = input_grid.shape[1] - 1 - col\n    return input_grid[row][symmetric_col]\n\ndef change_pixel_color(output_grid: np.ndarray, loc: Tuple[int, int], color: int) -> np.ndarray:\n    \"\"\"\n    Given an output grid, a location and a color, changes the color of the pixel at the given location to the given color.\n    \n    Args:\n    output_grid: A numpy array representing the output grid.\n    loc: A tuple representing the location of the pixel.\n    color: An integer representing the new color of the pixel.\n    \n    Returns:\n    A numpy array representing the output grid with the color of the pixel at the given location changed to the given color.\n    \"\"\"\n    row, col = loc\n    output_grid[row][col] = color\n    return output_grid\n\ndef replace_yellow_pixels(input_grid: np.ndarray) -> np.ndarray:\n    locs = find_yellow_pixels(input_grid)\n    output_grid = input_grid\n    for loc in locs:\n        color = find_symmetric_pixel_color(input_grid, loc)\n        if color is yellow:\n            color = _hole2(input_grid, loc)\n        output_grid = change_pixel_color(output_grid, loc, color)\n    return output_grid\n\ndef find_symmetric_pixel_color(input_grid: np.ndarray, loc: Tuple[int, int]) -> int:\n    \"\"\"\n    Given an input grid and a location, returns the color of the pixel which is symmetric above and below with the given location.\n    \n    Args:\n    input_grid: A numpy array representing the input grid.\n    loc: A tuple representing the location of the pixel.\n    \n    Returns:\n    An integer representing the color of the pixel which is symmetric above and below with the given location.\n    \"\"\"\n    row, col = loc\n    symmetric_row = input_grid.shape[0] - 1 - row\n    return input_grid[symmetric_row][col]\n\ndef find_yellow_pixels(input_grid: np.ndarray) -> List[Tuple[int, int]]:\n    \"\"\"\n    Given an input grid, returns a list of tuples representing the location of all pixels which are yellow.\n    \n    Args:\n    input_grid: A numpy array representing the input grid.\n    \n    Returns:\n    A list of tuples representing the location of all pixels which are yellow.\n    \"\"\"\n    yellow_pixels = []\n    for i in range(input_grid.shape[0]):\n        for j in range(input_grid.shape[1]):\n            if input_grid[i][j] == yellow:\n                yellow_pixels.append((i, j))\n    return yellow_pixels\n\ndef main(input_grid: np.ndarray) -> np.ndarray:\n    locs = find_yellow_pixels(input_grid)\n    output_grid = input_grid\n    for loc in locs:\n        color = find_symmetric_pixel_color(input_grid, loc)\n        if color is yellow:\n            color = replace_yellow_pixels(input_grid, loc)\n        output_grid = change_pixel_color(output_grid, loc, color)\n    return output_grid"}